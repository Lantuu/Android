android.animation.Animator.AnimatorListener,"default void onAnimationStart(Animator animation, boolean isReverse)", Notifies the start of the animation as well as the animation's overall play direction.
android.animation.Animator,void addListener(Animator.AnimatorListener listener)," Adds a listener to the set of listeners that are sent events through the life of an animation, such as start, repeat, and end."
android.animation.AnimatorSet.Builder,AnimatorSet.Builder with(Animator anim), Sets up the given animation to play at the same time as the animation supplied in the play(Animator) call that created this Builder object.
android.animation.Keyframe,float getFraction()," Gets the time for this keyframe, as a fraction of the overall animation duration."
android.animation.Keyframe,void setFraction(float fraction)," Sets the time for this keyframe, as a fraction of the overall animation duration."
android.animation.LayoutTransition,void setAnimateParentHierarchy(boolean animateParentHierarchy), This flag controls whether CHANGE_APPEARING or CHANGE_DISAPPEARING animations will cause the default changing animation to be run on the parent hierarchy as well.
android.animation.PropertyValuesHolder,"static PropertyValuesHolder ofMultiFloat(String propertyName, Path path)", Constructs and returns a PropertyValuesHolder with a given property name to use as a multi-float setter.
android.animation.PropertyValuesHolder,"static PropertyValuesHolder ofMultiInt(String propertyName, Path path)", Constructs and returns a PropertyValuesHolder with a given property name to use as a multi-int setter.
android.app.ActionBar,abstract void setDisplayHomeAsUpEnabled(boolean showHomeAsUp)," Set whether home should be displayed as an ""up"" affordance."
android.app.Activity,void finishAffinity(), Finish this activity as well as all activities immediately below it in the current task that have the same affinity.
android.app.Activity,void finishAndRemoveTask(), Call this when your activity is done and should be closed and the task should be completely removed as a part of finishing the root activity of the task.
android.app.Activity,boolean isVoiceInteraction(), Check whether this activity is running as part of a voice interaction with the user.
android.app.Activity,"void onCreate(Bundle savedInstanceState, PersistableBundle persistentState)", Same as onCreate(android.os.Bundle) but called for those activities created with the attribute persistableMode set to persistAcrossReboots.
android.app.Activity,"void onPostCreate(Bundle savedInstanceState, PersistableBundle persistentState)", This is the same as onPostCreate(Bundle) but is called for activities created with the attribute persistableMode set to persistAcrossReboots.
android.app.Activity,"void onRestoreInstanceState(Bundle savedInstanceState, PersistableBundle persistentState)", This is the same as onRestoreInstanceState(Bundle) but is called for activities created with the attribute persistableMode set to persistAcrossReboots.
android.app.Activity,Object onRetainNonConfigurationInstance()," Called by the system, as part of destroying an activity due to a configuration change, when it is known that a new instance will immediately be created for the new configuration."
android.app.Activity,"void onSaveInstanceState(Bundle outState, PersistableBundle outPersistentState)", This is the same as onSaveInstanceState(Bundle) but is called for activities created with the attribute persistableMode set to persistAcrossReboots.
android.app.Activity,void onStateNotSaved()," Called when an onResume() is coming up, prior to other pre-resume callbacks such as onNewIntent(Intent) and onActivityResult(int, int, Intent)."
android.app.Activity,void onVisibleBehindCanceled(), This method was deprecated in API level 26. This method's functionality is no longer supported as of O and will be removed in a future release.
android.app.Activity,boolean requestVisibleBehind(boolean visible), This method was deprecated in API level 26. This method's functionality is no longer supported as of O and will be removed in a future release.
android.app.Activity,void setActionBar(Toolbar toolbar), Set a Toolbar to act as the ActionBar for this Activity window.
android.app.Activity,void startActivities(Intent[] intents)," Same as startActivities(Intent[], Bundle) with no options specified."
android.app.Activity,void startActivity(Intent intent)," Same as startActivity(Intent, Bundle) with no options specified."
android.app.Activity,"void startActivityForResult(Intent intent, int requestCode)"," Same as calling startActivityForResult(Intent, int, Bundle) with no options."
android.app.Activity,"void startActivityFromChild(Activity child, Intent intent, int requestCode)"," Same as calling startActivityFromChild(Activity, Intent, int, Bundle) with no options."
android.app.Activity,"boolean startActivityIfNeeded(Intent intent, int requestCode)"," Same as calling startActivityIfNeeded(Intent, int, Bundle) with no options."
android.app.Activity,"void startIntentSender(IntentSender intent, Intent fillInIntent, int flagsMask, int flagsValues, int extraFlags)"," Same as calling startIntentSender(IntentSender, Intent, int, int, int, Bundle) with no options."
android.app.Activity,"void startIntentSenderForResult(IntentSender intent, int requestCode, Intent fillInIntent, int flagsMask, int flagsValues, int extraFlags)"," Same as calling startIntentSenderForResult(IntentSender, int, Intent, int, int, int, Bundle) with no options."
android.app.Activity,"void startIntentSenderFromChild(Activity child, IntentSender intent, int requestCode, Intent fillInIntent, int flagsMask, int flagsValues, int extraFlags)"," Same as calling startIntentSenderFromChild(Activity, IntentSender, int, Intent, int, int, int, Bundle) with no options."
android.app.Activity,boolean startNextMatchingActivity(Intent intent)," Same as calling startNextMatchingActivity(Intent, Bundle) with no options."
android.app.Fragment,"final String getString(int resId, Object... formatArgs)"," Return a localized formatted string from the application's package's default string table, substituting the format arguments as defined in Formatter and format(String, Object...)."
android.app.Fragment,final boolean isInLayout(), Return true if the layout is included as part of an activity view hierarchy via the <fragment> tag.
android.app.Fragment,void onAttachFragment(Fragment childFragment), Called when a fragment is attached as a child of this fragment.
android.app.Fragment,void onHiddenChanged(boolean hidden), Called when the hidden state (as returned by isHidden() of the fragment has changed.
android.app.Fragment,"void onInflate(Context context, AttributeSet attrs, Bundle savedInstanceState)"," Called when a fragment is being created as part of a view layout inflation, typically from setting the content view of an activity."
android.app.Fragment,void setInitialSavedState(Fragment.SavedState state)," Set the initial saved state that this Fragment should restore itself from when first being constructed, as returned by FragmentManager.saveFragmentInstanceState."
android.app.Fragment,void setRetainInstance(boolean retain), Control whether a fragment instance is retained across Activity re-creation (such as from a configuration change).
android.app.FragmentController,void noteStateNotSaved(), Marks the fragment state as unsaved.
android.app.FragmentTransaction,abstract FragmentTransaction setBreadCrumbShortTitle(int res)," Set the short title to show as a bread crumb when this transaction is on the back stack, as used by FragmentBreadCrumbs."
android.app.FragmentTransaction,abstract FragmentTransaction setBreadCrumbShortTitle(CharSequence text)," Like setBreadCrumbShortTitle(int) but taking a raw string; this method is not recommended, as the string can not be changed later if the locale changes."
android.app.FragmentTransaction,abstract FragmentTransaction setBreadCrumbTitle(int res)," Set the full title to show as a bread crumb when this transaction is on the back stack, as used by FragmentBreadCrumbs."
android.app.FragmentTransaction,abstract FragmentTransaction setBreadCrumbTitle(CharSequence text)," Like setBreadCrumbTitle(int) but taking a raw string; this method is not recommended, as the string can not be changed later if the locale changes."
android.app.FragmentTransaction,abstract FragmentTransaction setPrimaryNavigationFragment(Fragment fragment), Set a currently active fragment in this FragmentManager as the primary navigation fragment.
android.app.Notification.BigPictureStyle,Notification.BigPictureStyle bigPicture(Bitmap b), Provide the bitmap to be used as the payload for the BigPicture notification.
android.app.Notification.Builder,Notification.Builder setBadgeIconType(int icon), Sets which icon to display as a badge for this notification.
android.app.Notification.Builder,Notification.Builder setSettingsText(CharSequence text), Provides text that will appear as a link to your application's settings.
android.app.Notification.Builder,Notification.Builder setUsesChronometer(boolean b), Show the when field as a stopwatch.
android.app.Notification.WearableExtender,int getContentAction()," Get the index of the notification action, if any, that was specified as being clickable with the content of this notification."
android.app.Notification.WearableExtender,boolean getHintAmbientBigPicture()," Get a hint that this notification's Notification.BigPictureStyle (if present) should be converted to low-bit and displayed in ambient mode, especially useful for barcodes and qr codes, as well as other simple black-and-white tickets."
android.app.Notification.WearableExtender,Notification.WearableExtender setHintAmbientBigPicture(boolean hintAmbientBigPicture)," Set a hint that this notification's Notification.BigPictureStyle (if present) should be converted to low-bit and displayed in ambient mode, especially useful for barcodes and qr codes, as well as other simple black-and-white tickets."
android.app.NotificationChannel,boolean canShowBadge(), Returns whether notifications posted to this channel can appear as badges in a Launcher application.
android.app.NotificationChannel,void setShowBadge(boolean showBadge), Sets whether notifications posted to this channel can appear as application icon badges in a Launcher.
android.media.AudioAttributes.Builder,AudioAttributes.Builder setContentType(int contentType)," Sets the attribute describing the content type of the audio signal, such as speech, or music."
android.media.AudioAttributes.Builder,AudioAttributes.Builder setLegacyStreamType(int streamType), Sets attributes as inferred from the legacy stream types.
android.media.AudioAttributes.Builder,AudioAttributes.Builder setUsage(int usage)," Sets the attribute describing what is the intended use of the the audio signal, such as alarm or ringtone."
android.media.AudioFocusRequest.Builder,AudioFocusRequest.Builder setAcceptsDelayedFocusGain(boolean acceptsDelayedFocusGain), Marks this focus request as compatible with delayed focus.
android.media.AudioFocusRequest.Builder,AudioFocusRequest.Builder setForceDucking(boolean forceDucking)," Marks this focus request as forcing ducking, regardless of the conditions in which the system would or would not enforce ducking."
android.media.audiofx.Visualizer,"int setDataCaptureListener(Visualizer.OnDataCaptureListener listener, int rate, boolean waveform, boolean fft)", Registers an OnDataCaptureListener interface and specifies the rate at which the capture should be updated as well as the type of capture requested.
android.media.AudioTrack,"int setStereoVolume(float leftGain, float rightGain)"," This method was deprecated in API level 21. Applications should use setVolume(float) instead, as it more gracefully scales down to mono, and up to multi-channel content beyond stereo."
android.media.DataSourceDesc.Builder,"DataSourceDesc.Builder setDataSource(Context context, Uri uri, Map<String,String> headers, List<HttpCookie> cookies)", Sets the data source as a content Uri.
android.media.DataSourceDesc.Builder,"DataSourceDesc.Builder setDataSource(Context context, Uri uri)", Sets the data source as a content Uri.
android.media.ExifInterface,"double getAttributeDouble(String tag, double defaultValue)", Returns the double value of the tag that is specified as rational or contains a double-formatted value.
android.media.MediaCodec,Surface createInputSurface()," Requests a Surface to use as the input to an encoder, in place of input buffers."
android.media.MediaCodec,static Surface createPersistentInputSurface()," Create a persistent input surface that can be used with codecs that normally have an input surface, such as video encoders."
android.media.MediaCodec,ByteBuffer[] getInputBuffers()," This method was deprecated in API level 21. Use the new getInputBuffer(int) method instead each time an input buffer is dequeued. Note: As of API 21, dequeued input buffers are automatically cleared. Do not use this method if using an input surface."
android.media.MediaCodec,ByteBuffer[] getOutputBuffers()," This method was deprecated in API level 21. Use the new getOutputBuffer(int) method instead each time an output buffer is dequeued. This method is not supported if codec is configured in asynchronous mode. Note: As of API 21, the position and limit of output buffers that are dequeued will be set to the valid data range. Do not use this method if using an output surface."
android.media.MediaDrm.HdcpLevel,abstract int hashCode()," Returns the hash code of this annotation, as defined below: The hash code of an annotation is the sum of the hash codes of its members (including those with default values), as defined below: The hash code of an annotation member is (127 times the hash code of the member-name as computed by hashCode()) XOR the hash code of the member-value, as defined below: The hash code of a member-value depends on its type: The hash code of a primitive value v is equal to WrapperType.valueOf(v).hashCode(), where WrapperType is the wrapper type corresponding to the primitive type of v (Byte, Character, Double, Float, Integer, Long, Short, or Boolean)."
android.media.MediaDrm.OnKeyStatusChangeListener,"abstract void onKeyStatusChange(MediaDrm md, byte[] sessionId, List<MediaDrm.KeyStatus> keyInformation, boolean hasNewUsableKey)"," Called when the keys in a session change status, such as when the license is renewed or expires."
android.media.MediaDrm.SecurityLevel,abstract int hashCode()," Returns the hash code of this annotation, as defined below: The hash code of an annotation is the sum of the hash codes of its members (including those with default values), as defined below: The hash code of an annotation member is (127 times the hash code of the member-name as computed by hashCode()) XOR the hash code of the member-value, as defined below: The hash code of a member-value depends on its type: The hash code of a primitive value v is equal to WrapperType.valueOf(v).hashCode(), where WrapperType is the wrapper type corresponding to the primitive type of v (Byte, Character, Double, Float, Integer, Long, Short, or Boolean)."
android.media.MediaExtractor,"void setDataSource(Context context, Uri uri, Map<String,String> headers)", Sets the data source as a content Uri.
android.media.MediaMetadata,String getString(String key)," Returns the text value associated with the given key as a String, or null if no mapping of the desired type exists for the given key or a null value is explicitly associated with the key."
android.media.MediaMetadata,Set<String> keySet(), Returns a Set containing the Strings used as keys in this metadata.
android.media.MediaMetadataEditor,void addEditableKey(int key), Flags the given key as being editable.
android.media.MediaMetadataEditor,int[] getEditableKeys(), Retrieves the keys flagged as editable.
android.media.MediaMetadataEditor,"MediaMetadataEditor putObject(int key, Object value)", Adds information stored as an instance.
android.media.MediaMetadataRetriever,"void setDataSource(Context context, Uri uri)", Sets the data source as a content Uri.
android.media.MediaPlayer.OnTimedMetaDataAvailableListener,"abstract void onTimedMetaDataAvailable(MediaPlayer mp, TimedMetaData data)"," Called to indicate avaliable timed metadata This method will be called as timed metadata is extracted from the media, in the same order as it occurs in the media."
android.media.MediaPlayer,"static MediaPlayer create(Context context, Uri uri, SurfaceHolder holder, AudioAttributes audioAttributes, int audioSessionId)"," Same factory method as create(Context, Uri, SurfaceHolder) but that lets you specify the audio attributes and session ID to be used by the new MediaPlayer instance."
android.media.MediaPlayer,"static MediaPlayer create(Context context, int resid, AudioAttributes audioAttributes, int audioSessionId)"," Same factory method as create(Context, int) but that lets you specify the audio attributes and session ID to be used by the new MediaPlayer instance."
android.media.MediaPlayer,MediaTimestamp getTimestamp(), Get current playback position as a MediaTimestamp.
android.media.MediaPlayer,"void setDataSource(Context context, Uri uri, Map<String,String> headers, List<HttpCookie> cookies)", Sets the data source as a content Uri.
android.media.MediaPlayer,"void setDataSource(Context context, Uri uri, Map<String,String> headers)", Sets the data source as a content Uri.
android.media.MediaPlayer,"void setDataSource(Context context, Uri uri)", Sets the data source as a content Uri.
android.media.MediaPlayer,void setSurface(Surface surface), Sets the Surface to be used as the sink for the video portion of the media.
android.media.MediaPlayer2.EventCallback,"void onTimedMetaDataAvailable(MediaPlayer2 mp, long srcId, TimedMetaData data)"," Called to indicate avaliable timed metadata This method will be called as timed metadata is extracted from the media, in the same order as it occurs in the media."
android.media.MediaPlayer2,abstract DataSourceDesc getCurrentDataSource(), Gets the current data source as described by a DataSourceDesc.
android.media.MediaPlayer2,abstract MediaTimestamp getTimestamp(), Get current playback position as a MediaTimestamp.
android.media.MediaPlayer2,abstract void setDataSource(DataSourceDesc dsd), Sets the data source as described by a DataSourceDesc.
android.media.MediaPlayer2,abstract void setSurface(Surface surface), Sets the Surface to be used as the sink for the video portion of the media.
android.media.MediaRouter.Callback,"abstract void onRouteSelected(MediaRouter router, int type, MediaRouter.RouteInfo info)", Called when the supplied route becomes selected as the active route for the given route type.
android.media.MediaRouter.Callback,"abstract void onRouteUnselected(MediaRouter router, int type, MediaRouter.RouteInfo info)", Called when the supplied route becomes unselected as the active route for the given route type.
android.media.MediaRouter.SimpleCallback,"void onRouteSelected(MediaRouter router, int type, MediaRouter.RouteInfo info)", Called when the supplied route becomes selected as the active route for the given route type.
android.media.MediaRouter.SimpleCallback,"void onRouteUnselected(MediaRouter router, int type, MediaRouter.RouteInfo info)", Called when the supplied route becomes unselected as the active route for the given route type.
android.media.MediaSync,Surface createInputSurface(), Requests a Surface to use as the input.
android.media.RemoteControlClient.MetadataEditor,"RemoteControlClient.MetadataEditor putObject(int key, Object object)", Adds information stored as an instance.
android.media.session.PlaybackState,float getPlaybackSpeed(), Get the current playback speed as a multiple of normal playback.
android.media.TimedText,Rect getBounds(), Get the rectangle area or region for rendering the timed text as specified by a Rect object.
android.media.tv.TvContentRating,boolean contains(TvContentRating rating), Returns true if this rating has the same main rating as the specified rating and when this rating's sub-ratings contain the other's.
android.net.CaptivePortal,void ignoreNetwork(), Indicate to the system that the user does not want to pursue signing in to the captive portal and the system should continue to prefer other networks without captive portals for use as the default active data network.
android.net.ConnectivityManager,boolean getBackgroundDataSetting()," This method was deprecated in API level 14. As of ICE_CREAM_SANDWICH, availability of background data depends on several combined factors, and this method will always return true. Instead, when background data is unavailable, getActiveNetworkInfo() will now appear disconnected."
android.net.ConnectivityManager,int getNetworkPreference()," This method was deprecated in API level 21. Functionality has been removed as it no longer makes sense, with many more than two networks - we'd need an array to express preference. Instead we use dynamic network properties of the networks to describe their precedence."
android.net.ConnectivityManager,void releaseNetworkRequest(PendingIntent operation)," Removes a request made via requestNetwork(NetworkRequest, android.app.PendingIntent) This method has the same behavior as unregisterNetworkCallback(android.app.PendingIntent) with respect to releasing network resources and disconnecting."
android.net.ConnectivityManager,void setNetworkPreference(int preference)," This method was deprecated in API level 21. Functionality has been removed as it no longer makes sense, with many more than two networks - we'd need an array to express preference. Instead we use dynamic network properties of the networks to describe their precedence."
android.net.http.HttpResponseCache,"static HttpResponseCache install(File directory, long maxSize)", Creates a new HTTP response cache and sets it as the system default cache.
android.net.LinkAddress,String toString()," Returns a string representation of this address, such as ""192.0.2.1/24"" or ""2001:db8::1/64""."
android.net.Network,InetAddress[] getAllByName(String host), Operates the same as InetAddress.getAllByName except that host resolution is done on this network.
android.net.Network,InetAddress getByName(String host), Operates the same as InetAddress.getByName except that host resolution is done on this network.
android.net.NetworkInfo,boolean isRoaming()," This method was deprecated in API level P. Callers should switch to checking NET_CAPABILITY_NOT_ROAMING instead, since that handles more complex situations, such as VPNs."
android.net.nsd.NsdServiceInfo,"Map<String,byte[]> getAttributes()", Retrieve attributes as a map of String keys to byte[] values.
android.net.nsd.NsdServiceInfo,"void setAttribute(String key, String value)", Add a service attribute as a key/value pair.
android.net.TrafficStats,static void setThreadStatsUidSelf(), Set specific UID to use when accounting Socket traffic originating from the current thread as the calling UID.
android.net.Uri,"static String encode(String s, String allow)", Encodes characters in the given string as '%'-escaped octets using the UTF-8 scheme.
android.net.Uri,static String encode(String s), Encodes characters in the given string as '%'-escaped octets using the UTF-8 scheme.
android.net.Uri,"boolean getBooleanQueryParameter(String key, boolean defaultValue)", Searches the query string for the first value with the given key and interprets it as a boolean value.
android.net.wifi.p2p.WifiP2pGroup,WifiP2pDevice getOwner(), Get the details of the group owner as a WifiP2pDevice object
android.net.wifi.p2p.WifiP2pManager,"void createGroup(WifiP2pManager.Channel c, WifiP2pManager.ActionListener listener)", Create a p2p group with the current device as the group owner.
android.net.wifi.WifiEnterpriseConfig,X509Certificate[] getClientCertificateChain(), Get the complete client certificate chain in the same order as it was last supplied.
android.view.accessibility.AccessibilityNodeInfo,int getInputType(), Gets the input type of the source as defined by InputType.
android.view.accessibility.AccessibilityNodeInfo,AccessibilityNodeInfo getLabelFor(), Gets the node info for which the view represented by this info serves as a label for accessibility purposes.
android.view.accessibility.AccessibilityNodeInfo,AccessibilityNodeInfo getLabeledBy(), Gets the node info which serves as the label of the view represented by this info for accessibility purposes.
android.view.accessibility.AccessibilityNodeInfo,boolean isScreenReaderFocusable(), Returns whether the node is explicitly marked as a focusable unit by a screen reader.
android.view.accessibility.AccessibilityNodeInfo,void setInputType(int inputType), Sets the input type of the source as defined by InputType.
android.view.accessibility.AccessibilityNodeInfo,"void setLabelFor(View root, int virtualDescendantId)", Sets the view for which the view represented by this info serves as a label for accessibility purposes.
android.view.accessibility.AccessibilityNodeInfo,void setLabelFor(View labeled), Sets the view for which the view represented by this info serves as a label for accessibility purposes.
android.view.accessibility.AccessibilityNodeInfo,void setLabeledBy(View label), Sets the view which serves as the label of the view represented by this info for accessibility purposes.
android.view.accessibility.AccessibilityNodeInfo,"void setLabeledBy(View root, int virtualDescendantId)", Sets the view which serves as the label of the view represented by this info for accessibility purposes.
android.view.accessibility.AccessibilityNodeProvider,AccessibilityNodeInfo createAccessibilityNodeInfo(int virtualViewId)," Returns an AccessibilityNodeInfo representing a virtual view, such as a descendant of the host View, with the given virtualViewId or the host View itself if virtualViewId equals to HOST_VIEW_ID."
android.view.accessibility.AccessibilityNodeProvider,AccessibilityNodeInfo findFocus(int focus)," Find the virtual view, such as a descendant of the host View, that has the specified focus type."
android.view.accessibility.AccessibilityNodeProvider,"boolean performAction(int virtualViewId, int action, Bundle arguments)"," Performs an accessibility action on a virtual view, such as a descendant of the host View, with the given virtualViewId or the host View itself if virtualViewId equals to HOST_VIEW_ID."
android.view.animation.Animation,int getZAdjustment(), Returns the Z ordering mode to use while running the animation as previously set by setZAdjustment(int).
android.view.animation.Animation,"void initialize(int width, int height, int parentWidth, int parentHeight)", Initialize this animation with the dimensions of the object being animated as well as the objects parents.
android.view.animation.AnimationSet,"void initialize(int width, int height, int parentWidth, int parentHeight)", Initialize this animation with the dimensions of the object being animated as well as the objects parents.
android.view.animation.GridLayoutAnimationController,void setColumnDelay(float columnDelay)," Sets the delay, as a fraction of the animation duration, by which the children's animations are offset from one column to the other."
android.view.animation.GridLayoutAnimationController,void setRowDelay(float rowDelay)," Sets the delay, as a fraction of the animation duration, by which the children's animations are offset from one row to the other."
android.view.animation.LayoutAnimationController,void setDelay(float delay)," Sets the delay, as a fraction of the animation duration, by which the children's animations are offset."
android.view.animation.PathInterpolator,float getInterpolation(float t)," Using the line in the Path in this interpolator that can be described as y = f(x), finds the y coordinate of the line given t as the x coordinate."
android.view.animation.RotateAnimation,"void initialize(int width, int height, int parentWidth, int parentHeight)", Initialize this animation with the dimensions of the object being animated as well as the objects parents.
android.view.animation.ScaleAnimation,"void initialize(int width, int height, int parentWidth, int parentHeight)", Initialize this animation with the dimensions of the object being animated as well as the objects parents.
android.view.animation.TranslateAnimation,"void initialize(int width, int height, int parentWidth, int parentHeight)", Initialize this animation with the dimensions of the object being animated as well as the objects parents.
android.view.CollapsibleActionView,abstract void onActionViewCollapsed(), Called when this view is collapsed as an action view.
android.view.CollapsibleActionView,abstract void onActionViewExpanded(), Called when this view is expanded as an action view.
android.view.Display,"void getCurrentSizeRange(Point outSmallestSize, Point outLargestSize)"," Return the range of display sizes an application can expect to encounter under normal operation, as long as there is no physical change in screen size."
android.view.Display,void getRectSize(Rect outSize)," Gets the size of the display as a rectangle, in pixels."
android.view.Display,int getState()," Gets the state of the display, such as whether it is on or off."
android.view.DragEvent,ClipData getClipData(), Returns the ClipData object sent to the system as part of the call to startDragAndDrop().
android.view.DragEvent,ClipDescription getClipDescription(), Returns the ClipDescription object contained in the ClipData object sent to the system as part of the call to startDragAndDrop().
android.view.DragEvent,Object getLocalState(), Returns the local state object sent to the system as part of the call to startDragAndDrop().
android.view.InputDevice,int getSources(), Gets the input sources supported by this input device as a combined bitfield.
android.view.InputDevice,boolean isVirtual()," Returns true if the device is a virtual input device rather than a real one, such as the virtual keyboard (see VIRTUAL_KEYBOARD)."
android.view.inputmethod.BaseInputConnection,"boolean setComposingRegion(int start, int end)", Mark a certain region of text as composing text.
android.view.inputmethod.CursorAnchorInfo.Builder,"CursorAnchorInfo.Builder setInsertionMarkerLocation(float horizontalPosition, float lineTop, float lineBaseline, float lineBottom, int flags)", Sets the location of the text insertion point (zero width cursor) as a rectangle in local coordinates.
android.view.inputmethod.InputConnection,"abstract boolean commitContent(InputContentInfo inputContentInfo, int flags, Bundle opts)", Called by the input method to commit content such as a PNG image to the editor.
android.view.inputmethod.InputConnection,"abstract boolean setComposingRegion(int start, int end)", Mark a certain region of text as composing text.
android.view.inputmethod.InputConnectionWrapper,"boolean commitContent(InputContentInfo inputContentInfo, int flags, Bundle opts)", Called by the input method to commit content such as a PNG image to the editor.
android.view.inputmethod.InputConnectionWrapper,"boolean setComposingRegion(int start, int end)", Mark a certain region of text as composing text.
android.view.inputmethod.InputMethodSubtype,boolean containsExtraValueKey(String key)," The string of ExtraValue in subtype should be defined as follows: example: key0,key1=value1,key2,key3,key4=value4"
android.view.inputmethod.InputMethodSubtype,String getExtraValueOf(String key)," The string of ExtraValue in subtype should be defined as follows: example: key0,key1=value1,key2,key3,key4=value4"
android.view.KeyCharacterMap,int getModifierBehavior(), Gets a constant that describes the behavior of this keyboard's modifier keys such as KEYCODE_SHIFT_LEFT.
android.view.KeyEvent.Callback,"abstract boolean onKeyMultiple(int keyCode, int count, KeyEvent event)"," Called when a user's interaction with an analog control, such as flinging a trackball, generates simulated down/up events for the same key multiple times in quick succession."
android.view.KeyEvent.DispatcherState,void performedLongPress(KeyEvent event)," Keep track of the given event's key code as having performed an action with a long press, so no action should occur on the up."
android.view.KeyEvent,"static KeyEvent changeAction(KeyEvent event, int action)"," Create a new key event that is the same as the given one, but whose action is replaced with the given value."
android.view.KeyEvent,"static KeyEvent changeFlags(KeyEvent event, int flags)"," Create a new key event that is the same as the given one, but whose flags are replaced with the given value."
android.view.KeyEvent,"static KeyEvent changeTimeRepeat(KeyEvent event, long eventTime, int newRepeat, int newFlags)"," Create a new key event that is the same as the given one, but whose event time and repeat count are replaced with the given value."
android.view.KeyEvent,"static KeyEvent changeTimeRepeat(KeyEvent event, long eventTime, int newRepeat)"," Create a new key event that is the same as the given one, but whose event time and repeat count are replaced with the given value."
android.view.KeyEvent,final boolean isCanceled()," For ACTION_UP events, indicates that the event has been canceled as per FLAG_CANCELED."
android.view.KeyEvent,final boolean isLongPress()," For ACTION_DOWN events, indicates that the event has been canceled as per FLAG_LONG_PRESS."
android.view.KeyEvent,final boolean isTracking()," For ACTION_UP events, indicates that the event is still being tracked from its initial down event as per FLAG_TRACKING."
android.view.KeyEvent,static int keyCodeFromString(String symbolicName)," Gets a keycode by its symbolic name such as ""KEYCODE_A"" or an equivalent numeric constant such as ""1001""."
android.view.KeyEvent,static String keyCodeToString(int keyCode)," Returns a string that represents the symbolic name of the specified keycode such as ""KEYCODE_A"", ""KEYCODE_DPAD_UP"", or an equivalent numeric constant such as ""1001"" if unknown."
android.view.Menu,abstract void clear()," Remove all existing items from the menu, leaving it empty as if it had just been created."
android.view.MenuItem,abstract Drawable getIcon(), Returns the icon for this item as a Drawable (getting it from resources if it hasn't been loaded before).
android.view.MotionEvent,static String actionToString(int action)," Returns a string that represents the symbolic name of the specified unmasked action such as ""ACTION_DOWN"", ""ACTION_POINTER_DOWN(3)"" or an equivalent numeric constant such as ""35"" if unknown."
android.view.MotionEvent,static int axisFromString(String symbolicName)," Gets an axis by its symbolic name such as ""AXIS_X"" or an equivalent numeric constant such as ""42""."
android.view.MotionEvent,static String axisToString(int axis)," Returns a string that represents the symbolic name of the specified axis such as ""AXIS_X"" or an equivalent numeric constant such as ""42"" if unknown."
android.view.MotionEvent,int getActionIndex()," For ACTION_POINTER_DOWN or ACTION_POINTER_UP as returned by getActionMasked(), this returns the associated pointer index."
android.view.MotionEvent,int getButtonState(), Gets the state of all buttons that are pressed such as a mouse or stylus button.
android.view.MotionEvent,"float getHistoricalAxisValue(int axis, int pointerIndex, int pos)"," Returns the historical value of the requested axis, as per getAxisValue(int, int), occurred between this event and the previous event for the given pointer."
android.view.MotionEvent,"float getHistoricalOrientation(int pointerIndex, int pos)"," Returns a historical orientation coordinate, as per getOrientation(int), that occurred between this event and the previous event for the given pointer."
android.view.MotionEvent,"void getHistoricalPointerCoords(int pointerIndex, int pos, MotionEvent.PointerCoords outPointerCoords)"," Populates a MotionEvent.PointerCoords object with historical pointer coordinate data, as per getPointerCoords(int, MotionEvent.PointerCoords), that occurred between this event and the previous event for the given pointer."
android.view.MotionEvent,"float getHistoricalPressure(int pointerIndex, int pos)"," Returns a historical pressure coordinate, as per getPressure(int), that occurred between this event and the previous event for the given pointer."
android.view.MotionEvent,"float getHistoricalSize(int pointerIndex, int pos)"," Returns a historical size coordinate, as per getSize(int), that occurred between this event and the previous event for the given pointer."
android.view.MotionEvent,"float getHistoricalToolMajor(int pointerIndex, int pos)"," Returns a historical tool major axis coordinate, as per getToolMajor(int), that occurred between this event and the previous event for the given pointer."
android.view.MotionEvent,"float getHistoricalToolMinor(int pointerIndex, int pos)"," Returns a historical tool minor axis coordinate, as per getToolMinor(int), that occurred between this event and the previous event for the given pointer."
android.view.MotionEvent,"float getHistoricalTouchMajor(int pointerIndex, int pos)"," Returns a historical touch major axis coordinate, as per getTouchMajor(int), that occurred between this event and the previous event for the given pointer."
android.view.MotionEvent,"float getHistoricalTouchMinor(int pointerIndex, int pos)"," Returns a historical touch minor axis coordinate, as per getTouchMinor(int), that occurred between this event and the previous event for the given pointer."
android.view.MotionEvent,"float getHistoricalX(int pointerIndex, int pos)"," Returns a historical X coordinate, as per getX(int), that occurred between this event and the previous event for the given pointer."
android.view.MotionEvent,"float getHistoricalY(int pointerIndex, int pos)"," Returns a historical Y coordinate, as per getY(int), that occurred between this event and the previous event for the given pointer."
android.view.SurfaceView,void setSecure(boolean isSecure)," Control whether the surface view's content should be treated as secure, preventing it from appearing in screenshots or from being viewed on non-secure displays."
android.view.textservice.SpellCheckerSubtype,boolean containsExtraValueKey(String key)," The string of ExtraValue in subtype should be defined as follows: example: key0,key1=value1,key2,key3,key4=value4"
android.view.textservice.SpellCheckerSubtype,String getExtraValueOf(String key)," The string of ExtraValue in subtype should be defined as follows: example: key0,key1=value1,key2,key3,key4=value4"
android.view.TextureView,"void setLayerType(int layerType, Paint paint)", The layer type of a TextureView is ignored since a TextureView is always considered to act as a hardware layer.
android.view.View,void addChildrenForAccessibility(ArrayList<View> outChildren), Adds the children of this View relevant for accessibility to the given list as output.
android.view.View,void buildDrawingCache(boolean autoScale)," This method was deprecated in API level P. The view drawing cache was largely made obsolete with the introduction of hardware-accelerated rendering in API 11. With hardware-acceleration, intermediate cache layers are largely unnecessary and can easily result in a net loss in performance due to the cost of creating and updating the layer. In the rare cases where caching layers are useful, such as for alpha animations, setLayerType(int, Paint) handles this with hardware rendering. For software-rendered snapshots of a small part of the View hierarchy or individual Views it is recommended to create a Canvas from either a Bitmap or Picture and call draw(Canvas) on the View. However these software-rendered usages are discouraged and have compatibility issues with hardware-only rendering features such as Config.HARDWARE bitmaps, real-time shadows, and outline clipping. For screenshots of the UI for feedback reports or unit testing the PixelCopy API is recommended."
android.view.View,void buildDrawingCache()," This method was deprecated in API level P. The view drawing cache was largely made obsolete with the introduction of hardware-accelerated rendering in API 11. With hardware-acceleration, intermediate cache layers are largely unnecessary and can easily result in a net loss in performance due to the cost of creating and updating the layer. In the rare cases where caching layers are useful, such as for alpha animations, setLayerType(int, Paint) handles this with hardware rendering. For software-rendered snapshots of a small part of the View hierarchy or individual Views it is recommended to create a Canvas from either a Bitmap or Picture and call draw(Canvas) on the View. However these software-rendered usages are discouraged and have compatibility issues with hardware-only rendering features such as Config.HARDWARE bitmaps, real-time shadows, and outline clipping. For screenshots of the UI for feedback reports or unit testing the PixelCopy API is recommended."
android.view.View,"static int combineMeasuredStates(int curState, int newState)", Merge two states as returned by getMeasuredState().
android.view.View,void destroyDrawingCache()," This method was deprecated in API level P. The view drawing cache was largely made obsolete with the introduction of hardware-accelerated rendering in API 11. With hardware-acceleration, intermediate cache layers are largely unnecessary and can easily result in a net loss in performance due to the cost of creating and updating the layer. In the rare cases where caching layers are useful, such as for alpha animations, setLayerType(int, Paint) handles this with hardware rendering. For software-rendered snapshots of a small part of the View hierarchy or individual Views it is recommended to create a Canvas from either a Bitmap or Picture and call draw(Canvas) on the View. However these software-rendered usages are discouraged and have compatibility issues with hardware-only rendering features such as Config.HARDWARE bitmaps, real-time shadows, and outline clipping. For screenshots of the UI for feedback reports or unit testing the PixelCopy API is recommended."
android.view.View,"void dispatchProvideAutofillStructure(ViewStructure structure, int flags)"," Dispatches creation of a ViewStructures for autofill purposes down the hierarchy, when an Assist structure is being created as part of an autofill request."
android.view.View,Bitmap getDrawingCache()," This method was deprecated in API level P. The view drawing cache was largely made obsolete with the introduction of hardware-accelerated rendering in API 11. With hardware-acceleration, intermediate cache layers are largely unnecessary and can easily result in a net loss in performance due to the cost of creating and updating the layer. In the rare cases where caching layers are useful, such as for alpha animations, setLayerType(int, Paint) handles this with hardware rendering. For software-rendered snapshots of a small part of the View hierarchy or individual Views it is recommended to create a Canvas from either a Bitmap or Picture and call draw(Canvas) on the View. However these software-rendered usages are discouraged and have compatibility issues with hardware-only rendering features such as Config.HARDWARE bitmaps, real-time shadows, and outline clipping. For screenshots of the UI for feedback reports or unit testing the PixelCopy API is recommended."
android.view.View,Bitmap getDrawingCache(boolean autoScale)," This method was deprecated in API level P. The view drawing cache was largely made obsolete with the introduction of hardware-accelerated rendering in API 11. With hardware-acceleration, intermediate cache layers are largely unnecessary and can easily result in a net loss in performance due to the cost of creating and updating the layer. In the rare cases where caching layers are useful, such as for alpha animations, setLayerType(int, Paint) handles this with hardware rendering. For software-rendered snapshots of a small part of the View hierarchy or individual Views it is recommended to create a Canvas from either a Bitmap or Picture and call draw(Canvas) on the View. However these software-rendered usages are discouraged and have compatibility issues with hardware-only rendering features such as Config.HARDWARE bitmaps, real-time shadows, and outline clipping. For screenshots of the UI for feedback reports or unit testing the PixelCopy API is recommended."
android.view.View,int getDrawingCacheBackgroundColor()," This method was deprecated in API level P. The view drawing cache was largely made obsolete with the introduction of hardware-accelerated rendering in API 11. With hardware-acceleration, intermediate cache layers are largely unnecessary and can easily result in a net loss in performance due to the cost of creating and updating the layer. In the rare cases where caching layers are useful, such as for alpha animations, setLayerType(int, Paint) handles this with hardware rendering. For software-rendered snapshots of a small part of the View hierarchy or individual Views it is recommended to create a Canvas from either a Bitmap or Picture and call draw(Canvas) on the View. However these software-rendered usages are discouraged and have compatibility issues with hardware-only rendering features such as Config.HARDWARE bitmaps, real-time shadows, and outline clipping. For screenshots of the UI for feedback reports or unit testing the PixelCopy API is recommended."
android.view.View,int getDrawingCacheQuality()," This method was deprecated in API level P. The view drawing cache was largely made obsolete with the introduction of hardware-accelerated rendering in API 11. With hardware-acceleration, intermediate cache layers are largely unnecessary and can easily result in a net loss in performance due to the cost of creating and updating the layer. In the rare cases where caching layers are useful, such as for alpha animations, setLayerType(int, Paint) handles this with hardware rendering. For software-rendered snapshots of a small part of the View hierarchy or individual Views it is recommended to create a Canvas from either a Bitmap or Picture and call draw(Canvas) on the View. However these software-rendered usages are discouraged and have compatibility issues with hardware-only rendering features such as Config.HARDWARE bitmaps, real-time shadows, and outline clipping. For screenshots of the UI for feedback reports or unit testing the PixelCopy API is recommended."
android.view.View,Drawable getForeground(), Returns the drawable used as the foreground of this View.
android.view.View,int getLabelFor(), Gets the id of a view for which this view serves as a label for accessibility purposes.
android.view.View,final int getMeasuredHeightAndState()," Return the full height measurement information for this view as computed by the most recent call to measure(int, int)."
android.view.View,final int getMeasuredWidthAndState()," Return the full width measurement information for this view as computed by the most recent call to measure(int, int)."
android.view.View,float getScaleX()," The amount that the view is scaled in x around the pivot point, as a proportion of the view's unscaled width."
android.view.View,float getScaleY()," The amount that the view is scaled in y around the pivot point, as a proportion of the view's unscaled height."
android.view.View,boolean isDrawingCacheEnabled()," This method was deprecated in API level P. The view drawing cache was largely made obsolete with the introduction of hardware-accelerated rendering in API 11. With hardware-acceleration, intermediate cache layers are largely unnecessary and can easily result in a net loss in performance due to the cost of creating and updating the layer. In the rare cases where caching layers are useful, such as for alpha animations, setLayerType(int, Paint) handles this with hardware rendering. For software-rendered snapshots of a small part of the View hierarchy or individual Views it is recommended to create a Canvas from either a Bitmap or Picture and call draw(Canvas) on the View. However these software-rendered usages are discouraged and have compatibility issues with hardware-only rendering features such as Config.HARDWARE bitmaps, real-time shadows, and outline clipping. For screenshots of the UI for feedback reports or unit testing the PixelCopy API is recommended."
android.view.View,boolean isScreenReaderFocusable(), Returns whether the view should be treated as a focusable unit by screen reader accessibility tools.
android.view.View,void onCancelPendingInputEvents(), Called as the result of a call to cancelPendingInputEvents() on this view or a parent view.
android.view.View,void onProvideStructure(ViewStructure structure), Called when assist structure is being retrieved from a view as part of Activity.onProvideAssistData.
android.view.View,void onProvideVirtualStructure(ViewStructure structure), Called when assist structure is being retrieved from a view as part of Activity.onProvideAssistData to generate additional virtual structure under this view.
android.view.View,boolean restoreDefaultFocus(), Gives focus to the default-focus view in the view hierarchy that has this view as a root.
android.view.View,void sendAccessibilityEventUnchecked(AccessibilityEvent event), This method behaves exactly as sendAccessibilityEvent(int) but takes as an argument an empty AccessibilityEvent and does not perform a check whether accessibility is enabled.
android.view.View,void setAccessibilityDelegate(View.AccessibilityDelegate delegate), Sets a delegate for implementing accessibility support via composition (as opposed to inheritance).
android.view.View,void setDrawingCacheBackgroundColor(int color)," This method was deprecated in API level P. The view drawing cache was largely made obsolete with the introduction of hardware-accelerated rendering in API 11. With hardware-acceleration, intermediate cache layers are largely unnecessary and can easily result in a net loss in performance due to the cost of creating and updating the layer. In the rare cases where caching layers are useful, such as for alpha animations, setLayerType(int, Paint) handles this with hardware rendering. For software-rendered snapshots of a small part of the View hierarchy or individual Views it is recommended to create a Canvas from either a Bitmap or Picture and call draw(Canvas) on the View. However these software-rendered usages are discouraged and have compatibility issues with hardware-only rendering features such as Config.HARDWARE bitmaps, real-time shadows, and outline clipping. For screenshots of the UI for feedback reports or unit testing the PixelCopy API is recommended."
android.view.View,void setDrawingCacheEnabled(boolean enabled)," This method was deprecated in API level P. The view drawing cache was largely made obsolete with the introduction of hardware-accelerated rendering in API 11. With hardware-acceleration, intermediate cache layers are largely unnecessary and can easily result in a net loss in performance due to the cost of creating and updating the layer. In the rare cases where caching layers are useful, such as for alpha animations, setLayerType(int, Paint) handles this with hardware rendering. For software-rendered snapshots of a small part of the View hierarchy or individual Views it is recommended to create a Canvas from either a Bitmap or Picture and call draw(Canvas) on the View. However these software-rendered usages are discouraged and have compatibility issues with hardware-only rendering features such as Config.HARDWARE bitmaps, real-time shadows, and outline clipping. For screenshots of the UI for feedback reports or unit testing the PixelCopy API is recommended."
android.view.View,void setDrawingCacheQuality(int quality)," This method was deprecated in API level P. The view drawing cache was largely made obsolete with the introduction of hardware-accelerated rendering in API 11. With hardware-acceleration, intermediate cache layers are largely unnecessary and can easily result in a net loss in performance due to the cost of creating and updating the layer. In the rare cases where caching layers are useful, such as for alpha animations, setLayerType(int, Paint) handles this with hardware rendering. For software-rendered snapshots of a small part of the View hierarchy or individual Views it is recommended to create a Canvas from either a Bitmap or Picture and call draw(Canvas) on the View. However these software-rendered usages are discouraged and have compatibility issues with hardware-only rendering features such as Config.HARDWARE bitmaps, real-time shadows, and outline clipping. For screenshots of the UI for feedback reports or unit testing the PixelCopy API is recommended."
android.view.View,void setFitsSystemWindows(boolean fitSystemWindows)," Sets whether or not this view should account for system screen decorations such as the status bar and inset its content; that is, controlling whether the default implementation of fitSystemWindows(Rect) will be executed."
android.view.View,void setHapticFeedbackEnabled(boolean hapticFeedbackEnabled), Set whether this view should have haptic feedback for events such as long presses.
android.view.View,void setLabelFor(int id), Sets the id of a view for which this view serves as a label for accessibility purposes.
android.view.View,void setNextClusterForwardId(int nextClusterForwardId), Sets the id of the view to use as the root of the next keyboard navigation cluster.
android.view.View,void setScaleX(float scaleX)," Sets the amount that the view is scaled in x around the pivot point, as a proportion of the view's unscaled width."
android.view.View,void setScaleY(float scaleY)," Sets the amount that the view is scaled in Y around the pivot point, as a proportion of the view's unscaled width."
android.view.View,void setScreenReaderFocusable(boolean screenReaderFocusable)," When screen readers (one type of accessibility tool) decide what should be read to the user, they typically look for input focusable (isFocusable()) parents of non-focusable text items, and read those focusable parents and their non-focusable children as a unit."
android.view.View,void setSoundEffectsEnabled(boolean soundEffectsEnabled), Set whether this view should have sound effects enabled for events such as clicking and touching.
android.view.ViewGroup,void addChildrenForAccessibility(ArrayList<View> outChildren), Adds the children of this View relevant for accessibility to the given list as output.
android.view.ViewGroup,"void dispatchProvideAutofillStructure(ViewStructure structure, int flags)"," Dispatches creation of a ViewStructures for autofill purposes down the hierarchy, when an Assist structure is being created as part of an autofill request. This implementation adds in all child views of the view group, in addition to calling the default View implementation."
android.view.ViewGroup,int getPersistentDrawingCache()," This method was deprecated in API level P. The view drawing cache was largely made obsolete with the introduction of hardware-accelerated rendering in API 11. With hardware-acceleration, intermediate cache layers are largely unnecessary and can easily result in a net loss in performance due to the cost of creating and updating the layer. In the rare cases where caching layers are useful, such as for alpha animations, setLayerType(int, Paint) handles this with hardware rendering. For software-rendered snapshots of a small part of the View hierarchy or individual Views it is recommended to create a Canvas from either a Bitmap or Picture and call draw(Canvas) on the View. However these software-rendered usages are discouraged and have compatibility issues with hardware-only rendering features such as Config.HARDWARE bitmaps, real-time shadows, and outline clipping. For screenshots of the UI for feedback reports or unit testing the PixelCopy API is recommended."
android.view.ViewGroup,boolean isAlwaysDrawnWithCacheEnabled()," This method was deprecated in API level 23. As of M, this property is ignored. Child views may no longer have their caching behavior disabled by parents."
android.view.ViewGroup,boolean isAnimationCacheEnabled()," This method was deprecated in API level 23. As of M, this property is ignored. Caching behavior of children may be controlled through setLayerType(int, Paint)."
android.view.ViewGroup,boolean isTransitionGroup(), Returns true if this ViewGroup should be considered as a single entity for removal when executing an Activity transition.
android.view.ViewGroup,boolean restoreDefaultFocus(), Gives focus to the default-focus view in the view hierarchy that has this view as a root.
android.view.ViewGroup,void setAlwaysDrawnWithCacheEnabled(boolean always)," This method was deprecated in API level 23. As of M, this property is ignored. Child views may no longer have their caching behavior disabled by parents."
android.view.ViewGroup,void setAnimationCacheEnabled(boolean enabled)," This method was deprecated in API level 23. As of M, this property is ignored. Caching behavior of children may be controlled through setLayerType(int, Paint)."
android.view.ViewGroup,void setPersistentDrawingCache(int drawingCacheToKeep)," This method was deprecated in API level P. The view drawing cache was largely made obsolete with the introduction of hardware-accelerated rendering in API 11. With hardware-acceleration, intermediate cache layers are largely unnecessary and can easily result in a net loss in performance due to the cost of creating and updating the layer. In the rare cases where caching layers are useful, such as for alpha animations, setLayerType(int, Paint) handles this with hardware rendering. For software-rendered snapshots of a small part of the View hierarchy or individual Views it is recommended to create a Canvas from either a Bitmap or Picture and call draw(Canvas) on the View. However these software-rendered usages are discouraged and have compatibility issues with hardware-only rendering features such as Config.HARDWARE bitmaps, real-time shadows, and outline clipping. For screenshots of the UI for feedback reports or unit testing the PixelCopy API is recommended."
android.view.ViewGroup,void setTransitionGroup(boolean isTransitionGroup), Changes whether or not this ViewGroup should be treated as a single entity during Activity Transitions.
android.view.ViewGroup,void startViewTransition(View view)," This method tells the ViewGroup that the given View object, which should have this ViewGroup as its parent, should be kept around (re-displayed when the ViewGroup draws its children) even if it is removed from its parent."
android.view.ViewStructure,abstract int getChildCount(), Return the child count as set by setChildCount(int).
android.view.ViewStructure,abstract void setAccessibilityFocused(boolean state)," Set the accessibility focused state of this view, as per View.isAccessibilityFocused()."
android.view.ViewStructure,abstract void setActivated(boolean state)," Set the activated state of this view, as per View.isActivated()."
android.view.ViewStructure,abstract void setAlpha(float alpha)," Set an alpha transformation that is applied to this view, as per View.getAlpha()."
android.view.ViewStructure,abstract void setCheckable(boolean state)," Set the checkable state of this view, such as whether it implements the Checkable interface."
android.view.ViewStructure,abstract void setChecked(boolean state)," Set the checked state of this view, such as Checkable.isChecked()."
android.view.ViewStructure,abstract void setClassName(String className)," Set the class name of the view, as per View.getAccessibilityClassName()."
android.view.ViewStructure,abstract void setClickable(boolean state)," Set the clickable state of this view, as per View.isClickable()."
android.view.ViewStructure,abstract void setContentDescription(CharSequence contentDescription)," Set the content description of the view, as per View.getContentDescription()."
android.view.ViewStructure,abstract void setContextClickable(boolean state)," Set the context clickable state of this view, as per View.isContextClickable()."
android.view.ViewStructure,abstract void setElevation(float elevation)," Set the visual elevation (shadow) of the view, as per View.getZ()."
android.view.ViewStructure,abstract void setEnabled(boolean state)," Set the enabled state of this view, as per View.isEnabled()."
android.view.ViewStructure,abstract void setFocusable(boolean state)," Set the focusable state of this view, as per View.isFocusable()."
android.view.ViewStructure,abstract void setFocused(boolean state)," Set the focused state of this view, as per View.isFocused()."
android.view.ViewStructure,abstract void setLongClickable(boolean state)," Set the long clickable state of this view, as per View.isLongClickable()."
android.view.ViewStructure,abstract void setOpaque(boolean opaque)," Set the opaque state of this view, as per View.isOpaque()."
android.view.ViewStructure,abstract void setSelected(boolean state)," Set the selected state of this view, as per View.isSelected()."
android.view.ViewStructure,abstract void setTransformation(Matrix matrix)," Set the transformation matrix associated with this view, as per View.getMatrix(), or null if there is none."
android.view.ViewStructure,abstract void setVisibility(int visibility)," Set the visibility state of this view, as per View.getVisibility()."
android.webkit.CookieSyncManager,void resetSync(), This method was deprecated in API level 27. Calling resetSync is no longer necessary as the WebView automatically syncs cookies.
android.webkit.CookieSyncManager,void startSync(), This method was deprecated in API level 27. Calling startSync is no longer necessary as the WebView automatically syncs cookies.
android.webkit.CookieSyncManager,void stopSync(), This method was deprecated in API level 27. Calling stopSync is no longer useful as the WebView automatically syncs cookies.
android.webkit.JavascriptInterface,abstract int hashCode()," Returns the hash code of this annotation, as defined below: The hash code of an annotation is the sum of the hash codes of its members (including those with default values), as defined below: The hash code of an annotation member is (127 times the hash code of the member-name as computed by hashCode()) XOR the hash code of the member-value, as defined below: The hash code of a member-value depends on its type: The hash code of a primitive value v is equal to WrapperType.valueOf(v).hashCode(), where WrapperType is the wrapper type corresponding to the primitive type of v (Byte, Character, Double, Float, Integer, Long, Short, or Boolean)."
android.webkit.PluginStub,"abstract View getFullScreenView(int NPP, Context context)", Return a custom full-screen view to be displayed when the user requests a plugin display as full-screen.
android.webkit.SafeBrowsingResponse,abstract void backToSafety(boolean report)," Act as if the user clicked ""back to safety."""
android.webkit.SafeBrowsingResponse,abstract void proceed(boolean report)," Act as if the user clicked ""visit this unsafe site."""
android.webkit.WebResourceRequest,abstract boolean hasGesture(), Gets whether a gesture (such as a click) was associated with the request.
android.webkit.WebView,void findNext(boolean forward)," Highlights and scrolls to the next match found by findAllAsync(String), wrapping around page boundaries as necessary."
android.webkit.WebView,"void loadDataWithBaseURL(String baseUrl, String data, String mimeType, String encoding, String historyUrl)"," Loads the given data into this WebView, using baseUrl as the base URL for the content."
android.webkit.WebView,void onPause()," Does a best-effort attempt to pause any processing that can be paused safely, such as animations and geolocation."
android.webkit.WebView,void onProvideVirtualStructure(ViewStructure structure), Called when assist structure is being retrieved from a view as part of Activity.onProvideAssistData to generate additional virtual structure under this view.
android.webkit.WebView,void saveWebArchive(String filename), Saves the current view as a web archive.
android.webkit.WebView,"void saveWebArchive(String basename, boolean autoname, ValueCallback<String> callback)", Saves the current view as a web archive.
android.webkit.WebView,void setFindListener(WebView.FindListener listener), Registers the listener to be notified as find-on-page operations progress.
android.webkit.WebViewClient,"void onFormResubmission(WebView view, Message dontResend, Message resend)", As the host application if the browser should resend data as the requested page was a result of a POST.
