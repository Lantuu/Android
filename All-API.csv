android.animation.Animator.AnimatorListener,abstract void onAnimationCancel(Animator animation), Notifies the cancellation of the animation.
android.animation.Animator.AnimatorListener,abstract void onAnimationEnd(Animator animation), Notifies the end of the animation.
android.animation.Animator.AnimatorListener,"default void onAnimationEnd(Animator animation, boolean isReverse)", Notifies the end of the animation.
android.animation.Animator.AnimatorListener,abstract void onAnimationRepeat(Animator animation), Notifies the repetition of the animation.
android.animation.Animator.AnimatorListener,abstract void onAnimationStart(Animator animation), Notifies the start of the animation.
android.animation.Animator.AnimatorListener,"default void onAnimationStart(Animator animation, boolean isReverse)", Notifies the start of the animation as well as the animation's overall play direction.
android.animation.Animator.AnimatorPauseListener,abstract void onAnimationPause(Animator animation), Notifies that the animation was paused.
android.animation.Animator.AnimatorPauseListener,abstract void onAnimationResume(Animator animation)," Notifies that the animation was resumed, after being previously paused."
android.animation.Animator,void addListener(Animator.AnimatorListener listener)," Adds a listener to the set of listeners that are sent events through the life of an animation, such as start, repeat, and end."
android.animation.Animator,void addPauseListener(Animator.AnimatorPauseListener listener), Adds a pause listener to this animator.
android.animation.Animator,void cancel(), Cancels the animation.
android.animation.Animator,Animator clone(), Creates and returns a copy of this object.
android.animation.Animator,void end(), Ends the animation.
android.animation.Animator,abstract long getDuration(), Gets the duration of the animation.
android.animation.Animator,TimeInterpolator getInterpolator(), Returns the timing interpolator that this animation uses.
android.animation.Animator,ArrayList<Animator.AnimatorListener> getListeners(), Gets the set of Animator.AnimatorListener objects that are currently listening for events on this Animator object.
android.animation.Animator,abstract long getStartDelay()," The amount of time, in milliseconds, to delay processing the animation after start() is called."
android.animation.Animator,long getTotalDuration()," Gets the total duration of the animation, accounting for animation sequences, start delay, and repeating."
android.animation.Animator,boolean isPaused(), Returns whether this animator is currently in a paused state.
android.animation.Animator,abstract boolean isRunning(), Returns whether this Animator is currently running (having been started and gone past any initial startDelay period and not yet ended).
android.animation.Animator,boolean isStarted(), Returns whether this Animator has been started and not yet ended.
android.animation.Animator,void pause(), Pauses a running animation.
android.animation.Animator,void removeAllListeners(), Removes all listeners and pauseListeners from this object.
android.animation.Animator,void removeListener(Animator.AnimatorListener listener), Removes a listener from the set listening to this animation.
android.animation.Animator,void removePauseListener(Animator.AnimatorPauseListener listener), Removes a pause listener from the set listening to this animation.
android.animation.Animator,void resume()," Resumes a paused animation, causing the animator to pick up where it left off when it was paused."
android.animation.Animator,abstract Animator setDuration(long duration), Sets the duration of the animation.
android.animation.Animator,abstract void setInterpolator(TimeInterpolator value), The time interpolator used in calculating the elapsed fraction of the animation.
android.animation.Animator,abstract void setStartDelay(long startDelay)," The amount of time, in milliseconds, to delay processing the animation after start() is called."
android.animation.Animator,void setTarget(Object target), Sets the target object whose property will be animated by this animation.
android.animation.Animator,void setupEndValues(), This method tells the object to use appropriate information to extract ending values for the animation.
android.animation.Animator,void setupStartValues(), This method tells the object to use appropriate information to extract starting values for the animation.
android.animation.Animator,void start(), Starts this animation.
android.animation.AnimatorInflater,"static Animator loadAnimator(Context context, int id)", Loads an Animator object from a resource
android.animation.AnimatorInflater,"static StateListAnimator loadStateListAnimator(Context context, int id)",
android.animation.AnimatorListenerAdapter,void onAnimationCancel(Animator animation), Notifies the cancellation of the animation.
android.animation.AnimatorListenerAdapter,void onAnimationEnd(Animator animation), Notifies the end of the animation.
android.animation.AnimatorListenerAdapter,void onAnimationPause(Animator animation), Notifies that the animation was paused.
android.animation.AnimatorListenerAdapter,void onAnimationRepeat(Animator animation), Notifies the repetition of the animation.
android.animation.AnimatorListenerAdapter,void onAnimationResume(Animator animation)," Notifies that the animation was resumed, after being previously paused."
android.animation.AnimatorListenerAdapter,void onAnimationStart(Animator animation), Notifies the start of the animation.
android.animation.AnimatorSet.Builder,AnimatorSet.Builder after(long delay), Sets up the animation supplied in the play(Animator) call that created this Builder object to play when the given amount of time elapses.
android.animation.AnimatorSet.Builder,AnimatorSet.Builder after(Animator anim), Sets up the given animation to play when the animation supplied in the play(Animator) call that created this Builder object to start when the animation supplied in this method call ends.
android.animation.AnimatorSet.Builder,AnimatorSet.Builder before(Animator anim), Sets up the given animation to play when the animation supplied in the play(Animator) call that created this Builder object ends.
android.animation.AnimatorSet.Builder,AnimatorSet.Builder with(Animator anim), Sets up the given animation to play at the same time as the animation supplied in the play(Animator) call that created this Builder object.
android.animation.AnimatorSet,void cancel(), Cancels the animation. Note that canceling a AnimatorSet also cancels all of the animations that it is responsible for.
android.animation.AnimatorSet,AnimatorSet clone(), Creates and returns a copy of this object.
android.animation.AnimatorSet,void end(), Ends the animation. Note that ending a AnimatorSet also ends all of the animations that it is responsible for.
android.animation.AnimatorSet,ArrayList<Animator> getChildAnimations(), Returns the current list of child Animator objects controlled by this AnimatorSet.
android.animation.AnimatorSet,long getCurrentPlayTime(), Returns the milliseconds elapsed since the start of the animation.
android.animation.AnimatorSet,long getDuration(), Gets the length of each of the child animations of this AnimatorSet.
android.animation.AnimatorSet,TimeInterpolator getInterpolator(), Returns the timing interpolator that this animation uses.
android.animation.AnimatorSet,long getStartDelay()," The amount of time, in milliseconds, to delay starting the animation after start() is called."
android.animation.AnimatorSet,long getTotalDuration()," Gets the total duration of the animation, accounting for animation sequences, start delay, and repeating."
android.animation.AnimatorSet,boolean isRunning(), Returns true if any of the child animations of this AnimatorSet have been started and have not yet ended.
android.animation.AnimatorSet,boolean isStarted(), Returns whether this Animator has been started and not yet ended.
android.animation.AnimatorSet,void pause(), Pauses a running animation.
android.animation.AnimatorSet,AnimatorSet.Builder play(Animator anim)," This method creates a Builder object, which is used to set up playing constraints."
android.animation.AnimatorSet,void playSequentially(List<Animator> items), Sets up this AnimatorSet to play each of the supplied animations when the previous animation ends.
android.animation.AnimatorSet,void playSequentially(Animator... items), Sets up this AnimatorSet to play each of the supplied animations when the previous animation ends.
android.animation.AnimatorSet,void playTogether(Collection<Animator> items), Sets up this AnimatorSet to play all of the supplied animations at the same time.
android.animation.AnimatorSet,void playTogether(Animator... items), Sets up this AnimatorSet to play all of the supplied animations at the same time.
android.animation.AnimatorSet,void resume()," Resumes a paused animation, causing the animator to pick up where it left off when it was paused."
android.animation.AnimatorSet,void reverse(), Plays the AnimatorSet in reverse.
android.animation.AnimatorSet,void setCurrentPlayTime(long playTime), Sets the position of the animation to the specified point in time.
android.animation.AnimatorSet,AnimatorSet setDuration(long duration), Sets the length of each of the current child animations of this AnimatorSet.
android.animation.AnimatorSet,void setInterpolator(TimeInterpolator interpolator), Sets the TimeInterpolator for all current child animations of this AnimatorSet.
android.animation.AnimatorSet,void setStartDelay(long startDelay)," The amount of time, in milliseconds, to delay starting the animation after start() is called."
android.animation.AnimatorSet,void setTarget(Object target), Sets the target object for all current child animations of this AnimatorSet that take targets (ObjectAnimator and AnimatorSet).
android.animation.AnimatorSet,void setupEndValues(), This method tells the object to use appropriate information to extract ending values for the animation.
android.animation.AnimatorSet,void setupStartValues(), This method tells the object to use appropriate information to extract starting values for the animation.
android.animation.AnimatorSet,void start()," Starts this animation. Starting this AnimatorSet will, in turn, start the animations for which it is responsible."
android.animation.AnimatorSet,String toString(), Returns a string representation of the object.
android.animation.ArgbEvaluator,"Object evaluate(float fraction, Object startValue, Object endValue)", This function returns the calculated in-between value for a color given integers that represent the start and end values in the four bytes of the 32-bit int.
android.animation.BidirectionalTypeConverter,abstract T convertBack(V value), Does a conversion from the target type back to the source type.
android.animation.BidirectionalTypeConverter,"BidirectionalTypeConverter<V,T> invert()"," Returns the inverse of this converter, where the from and to classes are reversed."
android.animation.FloatArrayEvaluator,"float[] evaluate(float fraction, float[] startValue, float[] endValue)", Interpolates the value at each index by the fraction.
android.animation.FloatEvaluator,"Float evaluate(float fraction, Number startValue, Number endValue)"," This function returns the result of linearly interpolating the start and end values, with fraction representing the proportion between the start and end values."
android.animation.IntArrayEvaluator,"int[] evaluate(float fraction, int[] startValue, int[] endValue)", Interpolates the value at each index by the fraction.
android.animation.IntEvaluator,"Integer evaluate(float fraction, Integer startValue, Integer endValue)"," This function returns the result of linearly interpolating the start and end values, with fraction representing the proportion between the start and end values."
android.animation.Keyframe,abstract Keyframe clone(), Creates and returns a copy of this object.
android.animation.Keyframe,float getFraction()," Gets the time for this keyframe, as a fraction of the overall animation duration."
android.animation.Keyframe,TimeInterpolator getInterpolator(), Gets the optional interpolator for this Keyframe.
android.animation.Keyframe,Class getType(), Gets the type of keyframe.
android.animation.Keyframe,abstract Object getValue(), Gets the value for this Keyframe.
android.animation.Keyframe,boolean hasValue(), Indicates whether this keyframe has a valid value.
android.animation.Keyframe,static Keyframe ofFloat(float fraction), Constructs a Keyframe object with the given time.
android.animation.Keyframe,"static Keyframe ofFloat(float fraction, float value)", Constructs a Keyframe object with the given time and value.
android.animation.Keyframe,"static Keyframe ofInt(float fraction, int value)", Constructs a Keyframe object with the given time and value.
android.animation.Keyframe,static Keyframe ofInt(float fraction), Constructs a Keyframe object with the given time.
android.animation.Keyframe,"static Keyframe ofObject(float fraction, Object value)", Constructs a Keyframe object with the given time and value.
android.animation.Keyframe,static Keyframe ofObject(float fraction), Constructs a Keyframe object with the given time.
android.animation.Keyframe,void setFraction(float fraction)," Sets the time for this keyframe, as a fraction of the overall animation duration."
android.animation.Keyframe,void setInterpolator(TimeInterpolator interpolator), Sets the optional interpolator for this Keyframe.
android.animation.Keyframe,abstract void setValue(Object value), Sets the value for this Keyframe.
android.animation.LayoutTransition.TransitionListener,"abstract void endTransition(LayoutTransition transition, ViewGroup container, View view, int transitionType)", This event is sent to listeners when any type of transition animation ends.
android.animation.LayoutTransition.TransitionListener,"abstract void startTransition(LayoutTransition transition, ViewGroup container, View view, int transitionType)", This event is sent to listeners when any type of transition animation begins.
android.animation.LayoutTransition,"void addChild(ViewGroup parent, View child)", This method is called by ViewGroup when a child view is about to be added to the container.
android.animation.LayoutTransition,void addTransitionListener(LayoutTransition.TransitionListener listener), Add a listener that will be called when the bounds of the view change due to layout processing.
android.animation.LayoutTransition,void disableTransitionType(int transitionType), Disables the specified transitionType for this LayoutTransition object.
android.animation.LayoutTransition,void enableTransitionType(int transitionType), Enables the specified transitionType for this LayoutTransition object.
android.animation.LayoutTransition,Animator getAnimator(int transitionType), Gets the animation used during one of the transition types that may run.
android.animation.LayoutTransition,long getDuration(int transitionType), Gets the duration on one of the animation objects used by this transition.
android.animation.LayoutTransition,TimeInterpolator getInterpolator(int transitionType), Gets the interpolator on one of the animation objects used by this transition.
android.animation.LayoutTransition,long getStagger(int transitionType), Gets the length of time to delay between starting each animation during one of the change animations.
android.animation.LayoutTransition,long getStartDelay(int transitionType), Gets the start delay on one of the animation objects used by this transition.
android.animation.LayoutTransition,List<LayoutTransition.TransitionListener> getTransitionListeners(), Gets the current list of listeners for layout changes.
android.animation.LayoutTransition,"void hideChild(ViewGroup parent, View child)"," This method was deprecated in API level 16. Use hideChild(android.view.ViewGroup, android.view.View, int)."
android.animation.LayoutTransition,"void hideChild(ViewGroup parent, View child, int newVisibility)", This method is called by ViewGroup when a child view is about to be hidden in container.
android.animation.LayoutTransition,boolean isChangingLayout(), Returns true if animations are running which animate layout-related properties.
android.animation.LayoutTransition,boolean isRunning(), Returns true if any of the animations in this transition are currently running.
android.animation.LayoutTransition,boolean isTransitionTypeEnabled(int transitionType), Returns whether the specified transitionType is enabled for this LayoutTransition object.
android.animation.LayoutTransition,"void removeChild(ViewGroup parent, View child)", This method is called by ViewGroup when a child view is about to be removed from the container.
android.animation.LayoutTransition,void removeTransitionListener(LayoutTransition.TransitionListener listener), Remove a listener for layout changes.
android.animation.LayoutTransition,void setAnimateParentHierarchy(boolean animateParentHierarchy), This flag controls whether CHANGE_APPEARING or CHANGE_DISAPPEARING animations will cause the default changing animation to be run on the parent hierarchy as well.
android.animation.LayoutTransition,"void setAnimator(int transitionType, Animator animator)", Sets the animation used during one of the transition types that may run.
android.animation.LayoutTransition,"void setDuration(int transitionType, long duration)", Sets the duration on one of the animation objects used by this transition.
android.animation.LayoutTransition,void setDuration(long duration), Sets the duration to be used by all animations of this transition object.
android.animation.LayoutTransition,"void setInterpolator(int transitionType, TimeInterpolator interpolator)", Sets the interpolator on one of the animation objects used by this transition.
android.animation.LayoutTransition,"void setStagger(int transitionType, long duration)", Sets the length of time to delay between starting each animation during one of the change animations.
android.animation.LayoutTransition,"void setStartDelay(int transitionType, long delay)", Sets the start delay on one of the animation objects used by this transition.
android.animation.LayoutTransition,"void showChild(ViewGroup parent, View child)"," This method was deprecated in API level 16. Use showChild(android.view.ViewGroup, android.view.View, int)."
android.animation.LayoutTransition,"void showChild(ViewGroup parent, View child, int oldVisibility)", This method is called by ViewGroup when a child view is about to be made visible in the container.
android.animation.ObjectAnimator,ObjectAnimator clone(), Creates and returns a copy of this object.
android.animation.ObjectAnimator,String getPropertyName(), Gets the name of the property that will be animated.
android.animation.ObjectAnimator,Object getTarget(), The target object whose property will be animated by this animation
android.animation.ObjectAnimator,"static ObjectAnimator ofArgb(Object target, String propertyName, int... values)", Constructs and returns an ObjectAnimator that animates between color values.
android.animation.ObjectAnimator,"static <T> ObjectAnimator ofArgb(T target, Property<T,Integer> property, int... values)", Constructs and returns an ObjectAnimator that animates between color values.
android.animation.ObjectAnimator,"static ObjectAnimator ofFloat(Object target, String xPropertyName, String yPropertyName, Path path)", Constructs and returns an ObjectAnimator that animates coordinates along a Path using two properties.
android.animation.ObjectAnimator,"static <T> ObjectAnimator ofFloat(T target, Property<T,Float> property, float... values)", Constructs and returns an ObjectAnimator that animates between float values.
android.animation.ObjectAnimator,"static <T> ObjectAnimator ofFloat(T target, Property<T,Float> xProperty, Property<T,Float> yProperty, Path path)", Constructs and returns an ObjectAnimator that animates coordinates along a Path using two properties.
android.animation.ObjectAnimator,"static ObjectAnimator ofFloat(Object target, String propertyName, float... values)", Constructs and returns an ObjectAnimator that animates between float values.
android.animation.ObjectAnimator,"static <T> ObjectAnimator ofInt(T target, Property<T,Integer> xProperty, Property<T,Integer> yProperty, Path path)", Constructs and returns an ObjectAnimator that animates coordinates along a Path using two properties.
android.animation.ObjectAnimator,"static <T> ObjectAnimator ofInt(T target, Property<T,Integer> property, int... values)", Constructs and returns an ObjectAnimator that animates between int values.
android.animation.ObjectAnimator,"static ObjectAnimator ofInt(Object target, String propertyName, int... values)", Constructs and returns an ObjectAnimator that animates between int values.
android.animation.ObjectAnimator,"static ObjectAnimator ofInt(Object target, String xPropertyName, String yPropertyName, Path path)", Constructs and returns an ObjectAnimator that animates coordinates along a Path using two properties.
android.animation.ObjectAnimator,"static ObjectAnimator ofMultiFloat(Object target, String propertyName, float[][] values)", Constructs and returns an ObjectAnimator that animates over float values for a multiple parameters setter.
android.animation.ObjectAnimator,"static ObjectAnimator ofMultiFloat(Object target, String propertyName, Path path)", Constructs and returns an ObjectAnimator that animates the target using a multi-float setter along the given Path.
android.animation.ObjectAnimator,"static <T> ObjectAnimator ofMultiFloat(Object target, String propertyName, TypeConverter<T,float[]> converter, TypeEvaluator<T> evaluator, T... values)", Constructs and returns an ObjectAnimator that animates over values for a multiple float parameters setter.
android.animation.ObjectAnimator,"static ObjectAnimator ofMultiInt(Object target, String propertyName, int[][] values)", Constructs and returns an ObjectAnimator that animates over int values for a multiple parameters setter.
android.animation.ObjectAnimator,"static ObjectAnimator ofMultiInt(Object target, String propertyName, Path path)", Constructs and returns an ObjectAnimator that animates the target using a multi-int setter along the given Path.
android.animation.ObjectAnimator,"static <T> ObjectAnimator ofMultiInt(Object target, String propertyName, TypeConverter<T,int[]> converter, TypeEvaluator<T> evaluator, T... values)", Constructs and returns an ObjectAnimator that animates over values for a multiple int parameters setter.
android.animation.ObjectAnimator,"static <T,V> ObjectAnimator ofObject(T target, Property<T,V> property, TypeEvaluator<V> evaluator, V... values)", Constructs and returns an ObjectAnimator that animates between Object values.
android.animation.ObjectAnimator,"static ObjectAnimator ofObject(Object target, String propertyName, TypeConverter<PointF,?> converter, Path path)", Constructs and returns an ObjectAnimator that animates a property along a Path.
android.animation.ObjectAnimator,"static <T,V> ObjectAnimator ofObject(T target, Property<T,V> property, TypeConverter<PointF,V> converter, Path path)", Constructs and returns an ObjectAnimator that animates a property along a Path.
android.animation.ObjectAnimator,"static <T,V,P> ObjectAnimator ofObject(T target, Property<T,P> property, TypeConverter<V,P> converter, TypeEvaluator<V> evaluator, V... values)", Constructs and returns an ObjectAnimator that animates between Object values.
android.animation.ObjectAnimator,"static ObjectAnimator ofObject(Object target, String propertyName, TypeEvaluator evaluator, Object... values)", Constructs and returns an ObjectAnimator that animates between Object values.
android.animation.ObjectAnimator,"static ObjectAnimator ofPropertyValuesHolder(Object target, PropertyValuesHolder... values)", Constructs and returns an ObjectAnimator that animates between the sets of values specified in PropertyValueHolder objects.
android.animation.ObjectAnimator,void setAutoCancel(boolean cancel), autoCancel controls whether an ObjectAnimator will be canceled automatically when any other ObjectAnimator with the same target and properties is started.
android.animation.ObjectAnimator,ObjectAnimator setDuration(long duration), Sets the length of the animation.
android.animation.ObjectAnimator,void setFloatValues(float... values), Sets float values that will be animated between.
android.animation.ObjectAnimator,void setIntValues(int... values), Sets int values that will be animated between.
android.animation.ObjectAnimator,void setObjectValues(Object... values), Sets the values to animate between for this animation.
android.animation.ObjectAnimator,void setProperty(Property property), Sets the property that will be animated.
android.animation.ObjectAnimator,void setPropertyName(String propertyName), Sets the name of the property that will be animated.
android.animation.ObjectAnimator,void setTarget(Object target), Sets the target object whose property will be animated by this animation.
android.animation.ObjectAnimator,void setupEndValues(), This method tells the object to use appropriate information to extract ending values for the animation.
android.animation.ObjectAnimator,void setupStartValues(), This method tells the object to use appropriate information to extract starting values for the animation.
android.animation.ObjectAnimator,void start(), Starts this animation.
android.animation.ObjectAnimator,String toString(), Returns a string representation of the object.
android.animation.PointFEvaluator,"PointF evaluate(float fraction, PointF startValue, PointF endValue)"," This function returns the result of linearly interpolating the start and end PointF values, with fraction representing the proportion between the start and end values."
android.animation.PropertyValuesHolder,PropertyValuesHolder clone(), Creates and returns a copy of this object.
android.animation.PropertyValuesHolder,String getPropertyName(), Gets the name of the property that will be animated.
android.animation.PropertyValuesHolder,"static PropertyValuesHolder ofFloat(Property<?,Float> property, float... values)", Constructs and returns a PropertyValuesHolder with a given property and set of float values.
android.animation.PropertyValuesHolder,"static PropertyValuesHolder ofFloat(String propertyName, float... values)", Constructs and returns a PropertyValuesHolder with a given property name and set of float values.
android.animation.PropertyValuesHolder,"static PropertyValuesHolder ofInt(String propertyName, int... values)", Constructs and returns a PropertyValuesHolder with a given property name and set of int values.
android.animation.PropertyValuesHolder,"static PropertyValuesHolder ofInt(Property<?,Integer> property, int... values)", Constructs and returns a PropertyValuesHolder with a given property and set of int values.
android.animation.PropertyValuesHolder,"static PropertyValuesHolder ofKeyframe(String propertyName, Keyframe... values)", Constructs and returns a PropertyValuesHolder object with the specified property name and set of values.
android.animation.PropertyValuesHolder,"static PropertyValuesHolder ofKeyframe(Property property, Keyframe... values)", Constructs and returns a PropertyValuesHolder object with the specified property and set of values.
android.animation.PropertyValuesHolder,"static PropertyValuesHolder ofMultiFloat(String propertyName, float[][] values)", Constructs and returns a PropertyValuesHolder with a given property name and set of float[] values.
android.animation.PropertyValuesHolder,"static <V> PropertyValuesHolder ofMultiFloat(String propertyName, TypeConverter<V,float[]> converter, TypeEvaluator<V> evaluator, V... values)", Constructs and returns a PropertyValuesHolder with a given property and set of Object values for use with ObjectAnimator multi-value setters.
android.animation.PropertyValuesHolder,"static PropertyValuesHolder ofMultiFloat(String propertyName, Path path)", Constructs and returns a PropertyValuesHolder with a given property name to use as a multi-float setter.
android.animation.PropertyValuesHolder,"static <T> PropertyValuesHolder ofMultiFloat(String propertyName, TypeConverter<T,float[]> converter, TypeEvaluator<T> evaluator, Keyframe... values)", Constructs and returns a PropertyValuesHolder object with the specified property name or setter name for use in a multi-float setter function using ObjectAnimator.
android.animation.PropertyValuesHolder,"static PropertyValuesHolder ofMultiInt(String propertyName, Path path)", Constructs and returns a PropertyValuesHolder with a given property name to use as a multi-int setter.
android.animation.PropertyValuesHolder,"static <T> PropertyValuesHolder ofMultiInt(String propertyName, TypeConverter<T,int[]> converter, TypeEvaluator<T> evaluator, Keyframe... values)", Constructs and returns a PropertyValuesHolder object with the specified property name or setter name for use in a multi-int setter function using ObjectAnimator.
android.animation.PropertyValuesHolder,"static <V> PropertyValuesHolder ofMultiInt(String propertyName, TypeConverter<V,int[]> converter, TypeEvaluator<V> evaluator, V... values)", Constructs and returns a PropertyValuesHolder with a given property and set of Object values for use with ObjectAnimator multi-value setters.
android.animation.PropertyValuesHolder,"static PropertyValuesHolder ofMultiInt(String propertyName, int[][] values)", Constructs and returns a PropertyValuesHolder with a given property name and set of int[] values.
android.animation.PropertyValuesHolder,"static PropertyValuesHolder ofObject(String propertyName, TypeConverter<PointF,?> converter, Path path)", Constructs and returns a PropertyValuesHolder with a given property name and a Path along which the values should be animated.
android.animation.PropertyValuesHolder,"static PropertyValuesHolder ofObject(String propertyName, TypeEvaluator evaluator, Object... values)", Constructs and returns a PropertyValuesHolder with a given property name and set of Object values.
android.animation.PropertyValuesHolder,"static <T,V> PropertyValuesHolder ofObject(Property<?,V> property, TypeConverter<T,V> converter, TypeEvaluator<T> evaluator, T... values)", Constructs and returns a PropertyValuesHolder with a given property and set of Object values.
android.animation.PropertyValuesHolder,"static <V> PropertyValuesHolder ofObject(Property property, TypeEvaluator<V> evaluator, V... values)", Constructs and returns a PropertyValuesHolder with a given property and set of Object values.
android.animation.PropertyValuesHolder,"static <V> PropertyValuesHolder ofObject(Property<?,V> property, TypeConverter<PointF,V> converter, Path path)", Constructs and returns a PropertyValuesHolder with a given property and a Path along which the values should be animated.
android.animation.PropertyValuesHolder,void setConverter(TypeConverter converter), Sets the converter to convert from the values type to the setter's parameter type.
android.animation.PropertyValuesHolder,void setEvaluator(TypeEvaluator evaluator), The TypeEvaluator will be automatically determined based on the type of values supplied to PropertyValuesHolder.
android.animation.PropertyValuesHolder,void setFloatValues(float... values), Set the animated values for this object to this set of floats.
android.animation.PropertyValuesHolder,void setIntValues(int... values), Set the animated values for this object to this set of ints.
android.animation.PropertyValuesHolder,void setKeyframes(Keyframe... values), Set the animated values for this object to this set of Keyframes.
android.animation.PropertyValuesHolder,void setObjectValues(Object... values), Set the animated values for this object to this set of Objects.
android.animation.PropertyValuesHolder,void setProperty(Property property), Sets the property that will be animated.
android.animation.PropertyValuesHolder,void setPropertyName(String propertyName), Sets the name of the property that will be animated.
android.animation.PropertyValuesHolder,String toString(), Returns a string representation of the object.
android.animation.RectEvaluator,"Rect evaluate(float fraction, Rect startValue, Rect endValue)"," This function returns the result of linearly interpolating the start and end Rect values, with fraction representing the proportion between the start and end values."
android.animation.StateListAnimator,"void addState(int[] specs, Animator animator)", Associates the given animator with the provided drawable state specs so that it will be run when the View's drawable state matches the specs.
android.animation.StateListAnimator,StateListAnimator clone(), Creates and returns a copy of this object.
android.animation.StateListAnimator,void jumpToCurrentState()," If there is an animation running for a recent state change, ends it."
android.animation.TimeAnimator.TimeListener,"abstract void onTimeUpdate(TimeAnimator animation, long totalTime, long deltaTime)"," Notifies listeners of the occurrence of another frame of the animation, along with information about the elapsed time."
android.animation.TimeAnimator,void setCurrentPlayTime(long playTime), Sets the position of the animation to the specified point in time.
android.animation.TimeAnimator,void setTimeListener(TimeAnimator.TimeListener listener), Sets a listener that is sent update events throughout the life of an animation.
android.animation.TimeAnimator,void start(), Starts this animation.
android.animation.TimeInterpolator,abstract float getInterpolation(float input), Maps a value representing the elapsed fraction of an animation to a value that represents the interpolated fraction.
android.animation.TypeConverter,abstract V convert(T value), Converts a value from one type to another.
android.animation.TypeEvaluator,"abstract T evaluate(float fraction, T startValue, T endValue)"," This function returns the result of linearly interpolating the start and end values, with fraction representing the proportion between the start and end values."
android.animation.ValueAnimator.AnimatorUpdateListener,abstract void onAnimationUpdate(ValueAnimator animation), Notifies the occurrence of another frame of the animation.
android.animation.ValueAnimator,void addUpdateListener(ValueAnimator.AnimatorUpdateListener listener), Adds a listener to the set of listeners that are sent update events through the life of an animation.
android.animation.ValueAnimator,static boolean areAnimatorsEnabled()," Returns whether animators are currently enabled, system-wide."
android.animation.ValueAnimator,void cancel(), Cancels the animation.
android.animation.ValueAnimator,ValueAnimator clone(), Creates and returns a copy of this object.
android.animation.ValueAnimator,void end(), Ends the animation.
android.animation.ValueAnimator,float getAnimatedFraction()," Returns the current animation fraction, which is the elapsed/interpolated fraction used in the most recent frame update on the animation."
android.animation.ValueAnimator,Object getAnimatedValue(), The most recent value calculated by this ValueAnimator when there is just one property being animated.
android.animation.ValueAnimator,Object getAnimatedValue(String propertyName), The most recent value calculated by this ValueAnimator for propertyName.
android.animation.ValueAnimator,long getCurrentPlayTime()," Gets the current position of the animation in time, which is equal to the current time minus the time that the animation started."
android.animation.ValueAnimator,long getDuration(), Gets the length of the animation.
android.animation.ValueAnimator,static long getFrameDelay()," The amount of time, in milliseconds, between each frame of the animation."
android.animation.ValueAnimator,TimeInterpolator getInterpolator(), Returns the timing interpolator that this ValueAnimator uses.
android.animation.ValueAnimator,int getRepeatCount(), Defines how many times the animation should repeat.
android.animation.ValueAnimator,int getRepeatMode(), Defines what this animation should do when it reaches the end.
android.animation.ValueAnimator,long getStartDelay()," The amount of time, in milliseconds, to delay starting the animation after start() is called."
android.animation.ValueAnimator,long getTotalDuration()," Gets the total duration of the animation, accounting for animation sequences, start delay, and repeating."
android.animation.ValueAnimator,PropertyValuesHolder[] getValues(), Returns the values that this ValueAnimator animates between.
android.animation.ValueAnimator,boolean isRunning(), Returns whether this Animator is currently running (having been started and gone past any initial startDelay period and not yet ended).
android.animation.ValueAnimator,boolean isStarted(), Returns whether this Animator has been started and not yet ended.
android.animation.ValueAnimator,static ValueAnimator ofArgb(int... values), Constructs and returns a ValueAnimator that animates between color values.
android.animation.ValueAnimator,static ValueAnimator ofFloat(float... values), Constructs and returns a ValueAnimator that animates between float values.
android.animation.ValueAnimator,static ValueAnimator ofInt(int... values), Constructs and returns a ValueAnimator that animates between int values.
android.animation.ValueAnimator,"static ValueAnimator ofObject(TypeEvaluator evaluator, Object... values)", Constructs and returns a ValueAnimator that animates between Object values.
android.animation.ValueAnimator,static ValueAnimator ofPropertyValuesHolder(PropertyValuesHolder... values), Constructs and returns a ValueAnimator that animates between the values specified in the PropertyValuesHolder objects.
android.animation.ValueAnimator,void pause(), Pauses a running animation.
android.animation.ValueAnimator,void removeAllUpdateListeners(), Removes all listeners from the set listening to frame updates for this animation.
android.animation.ValueAnimator,void removeUpdateListener(ValueAnimator.AnimatorUpdateListener listener), Removes a listener from the set listening to frame updates for this animation.
android.animation.ValueAnimator,void resume()," Resumes a paused animation, causing the animator to pick up where it left off when it was paused."
android.animation.ValueAnimator,void reverse(), Plays the ValueAnimator in reverse.
android.animation.ValueAnimator,void setCurrentFraction(float fraction), Sets the position of the animation to the specified fraction.
android.animation.ValueAnimator,void setCurrentPlayTime(long playTime), Sets the position of the animation to the specified point in time.
android.animation.ValueAnimator,ValueAnimator setDuration(long duration), Sets the length of the animation.
android.animation.ValueAnimator,void setEvaluator(TypeEvaluator value), The type evaluator to be used when calculating the animated values of this animation.
android.animation.ValueAnimator,void setFloatValues(float... values), Sets float values that will be animated between.
android.animation.ValueAnimator,static void setFrameDelay(long frameDelay)," The amount of time, in milliseconds, between each frame of the animation."
android.animation.ValueAnimator,void setIntValues(int... values), Sets int values that will be animated between.
android.animation.ValueAnimator,void setInterpolator(TimeInterpolator value), The time interpolator used in calculating the elapsed fraction of this animation.
android.animation.ValueAnimator,void setObjectValues(Object... values), Sets the values to animate between for this animation.
android.animation.ValueAnimator,void setRepeatCount(int value), Sets how many times the animation should be repeated.
android.animation.ValueAnimator,void setRepeatMode(int value), Defines what this animation should do when it reaches the end.
android.animation.ValueAnimator,void setStartDelay(long startDelay)," The amount of time, in milliseconds, to delay starting the animation after start() is called."
android.animation.ValueAnimator,void setValues(PropertyValuesHolder... values)," Sets the values, per property, being animated between."
android.animation.ValueAnimator,void start(), Starts this animation.
android.animation.ValueAnimator,String toString(), Returns a string representation of the object.
android.app.ActionBar.LayoutParams,int getLayoutDirection(), Retuns the layout direction.
android.app.ActionBar.LayoutParams,int getMarginEnd(), Returns the end margin in pixels.
android.app.ActionBar.LayoutParams,int getMarginStart(), Returns the start margin in pixels.
android.app.ActionBar.LayoutParams,boolean isMarginRelative(), Check if margins are relative.
android.app.ActionBar.LayoutParams,void resolveLayoutDirection(int layoutDirection), This will be called by requestLayout().
android.app.ActionBar.LayoutParams,void setLayoutDirection(int layoutDirection), Set the layout direction
android.app.ActionBar.LayoutParams,void setMarginEnd(int end), Sets the relative end margin.
android.app.ActionBar.LayoutParams,void setMarginStart(int start), Sets the relative start margin.
android.app.ActionBar.LayoutParams,"void setMargins(int left, int top, int right, int bottom)"," Sets the margins, in pixels."
android.app.ActionBar.LayoutParams,void resolveLayoutDirection(int layoutDirection), Resolve layout parameters depending on the layout direction.
android.app.ActionBar.LayoutParams,"void setBaseAttributes(TypedArray a, int widthAttr, int heightAttr)", Extracts the layout parameters from the supplied attributes.
android.app.ActionBar.LayoutParams,Object clone(), Creates and returns a copy of this object.
android.app.ActionBar.LayoutParams,boolean equals(Object obj)," Indicates whether some other object is ""equal to"" this one."
android.app.ActionBar.LayoutParams,void finalize(), Called by the garbage collector on an object when garbage collection determines that there are no more references to the object.
android.app.ActionBar.LayoutParams,final Class<?> getClass(), Returns the runtime class of this Object.
android.app.ActionBar.LayoutParams,int hashCode(), Returns a hash code value for the object.
android.app.ActionBar.LayoutParams,final void notify(), Wakes up a single thread that is waiting on this object's monitor.
android.app.ActionBar.LayoutParams,final void notifyAll(), Wakes up all threads that are waiting on this object's monitor.
android.app.ActionBar.LayoutParams,String toString(), Returns a string representation of the object.
android.app.ActionBar.LayoutParams,"final void wait(long millis, int nanos)"," Causes the current thread to wait until another thread invokes the notify() method or the notifyAll() method for this object, or some other thread interrupts the current thread, or a certain amount of real time has elapsed."
android.app.ActionBar.LayoutParams,final void wait(long millis)," Causes the current thread to wait until either another thread invokes the notify() method or the notifyAll() method for this object, or a specified amount of time has elapsed."
android.app.ActionBar.LayoutParams,final void wait(), Causes the current thread to wait until another thread invokes the notify() method or the notifyAll() method for this object.
android.app.ActionBar.OnMenuVisibilityListener,abstract void onMenuVisibilityChanged(boolean isVisible), Called when an action bar menu is shown or hidden.
android.app.ActionBar.OnNavigationListener,"abstract boolean onNavigationItemSelected(int itemPosition, long itemId)", This method is called whenever a navigation item in your action bar is selected.
android.app.ActionBar.Tab,abstract CharSequence getContentDescription(), Gets a brief description of this tab's content for use in accessibility support.
android.app.ActionBar.Tab,abstract View getCustomView(), Retrieve a previously set custom view for this tab.
android.app.ActionBar.Tab,abstract Drawable getIcon(), Return the icon associated with this tab.
android.app.ActionBar.Tab,abstract int getPosition(), Return the current position of this tab in the action bar.
android.app.ActionBar.Tab,abstract Object getTag(),
android.app.ActionBar.Tab,abstract CharSequence getText(), Return the text of this tab.
android.app.ActionBar.Tab,abstract void select(), Select this tab.
android.app.ActionBar.Tab,abstract ActionBar.Tab setContentDescription(int resId), Set a description of this tab's content for use in accessibility support.
android.app.ActionBar.Tab,abstract ActionBar.Tab setContentDescription(CharSequence contentDesc), Set a description of this tab's content for use in accessibility support.
android.app.ActionBar.Tab,abstract ActionBar.Tab setCustomView(int layoutResId), Set a custom view to be used for this tab.
android.app.ActionBar.Tab,abstract ActionBar.Tab setCustomView(View view), Set a custom view to be used for this tab.
android.app.ActionBar.Tab,abstract ActionBar.Tab setIcon(Drawable icon), Set the icon displayed on this tab.
android.app.ActionBar.Tab,abstract ActionBar.Tab setIcon(int resId), Set the icon displayed on this tab.
android.app.ActionBar.Tab,abstract ActionBar.Tab setTabListener(ActionBar.TabListener listener), Set the ActionBar.TabListener that will handle switching to and from this tab.
android.app.ActionBar.Tab,abstract ActionBar.Tab setTag(Object obj), Give this Tab an arbitrary object to hold for later use.
android.app.ActionBar.Tab,abstract ActionBar.Tab setText(int resId), Set the text displayed on this tab.
android.app.ActionBar.Tab,abstract ActionBar.Tab setText(CharSequence text), Set the text displayed on this tab.
android.app.ActionBar.TabListener,"abstract void onTabReselected(ActionBar.Tab tab, FragmentTransaction ft)", Called when a tab that is already selected is chosen again by the user.
android.app.ActionBar.TabListener,"abstract void onTabSelected(ActionBar.Tab tab, FragmentTransaction ft)", Called when a tab enters the selected state.
android.app.ActionBar.TabListener,"abstract void onTabUnselected(ActionBar.Tab tab, FragmentTransaction ft)", Called when a tab exits the selected state.
android.app.ActionBar,abstract void addOnMenuVisibilityListener(ActionBar.OnMenuVisibilityListener listener), Add a listener that will respond to menu visibility change events.
android.app.ActionBar,"abstract void addTab(ActionBar.Tab tab, int position)", This method was deprecated in API level 21. Action bar navigation modes are deprecated and not supported by inline toolbar action bars. Consider using other common navigation patterns instead.
android.app.ActionBar,abstract void addTab(ActionBar.Tab tab), This method was deprecated in API level 21. Action bar navigation modes are deprecated and not supported by inline toolbar action bars. Consider using other common navigation patterns instead.
android.app.ActionBar,"abstract void addTab(ActionBar.Tab tab, int position, boolean setSelected)", This method was deprecated in API level 21. Action bar navigation modes are deprecated and not supported by inline toolbar action bars. Consider using other common navigation patterns instead.
android.app.ActionBar,"abstract void addTab(ActionBar.Tab tab, boolean setSelected)", This method was deprecated in API level 21. Action bar navigation modes are deprecated and not supported by inline toolbar action bars. Consider using other common navigation patterns instead.
android.app.ActionBar,abstract View getCustomView(),
android.app.ActionBar,abstract int getDisplayOptions(),
android.app.ActionBar,float getElevation(), Get the Z-axis elevation of the action bar in pixels.
android.app.ActionBar,abstract int getHeight(), Retrieve the current height of the ActionBar.
android.app.ActionBar,int getHideOffset(), Return the current vertical offset of the action bar.
android.app.ActionBar,abstract int getNavigationItemCount(), This method was deprecated in API level 21. Action bar navigation modes are deprecated and not supported by inline toolbar action bars. Consider using other common navigation patterns instead.
android.app.ActionBar,abstract int getNavigationMode(), This method was deprecated in API level 21. Action bar navigation modes are deprecated and not supported by inline toolbar action bars. Consider using other common navigation patterns instead.
android.app.ActionBar,abstract int getSelectedNavigationIndex(), This method was deprecated in API level 21. Action bar navigation modes are deprecated and not supported by inline toolbar action bars. Consider using other common navigation patterns instead.
android.app.ActionBar,abstract ActionBar.Tab getSelectedTab(), This method was deprecated in API level 21. Action bar navigation modes are deprecated and not supported by inline toolbar action bars. Consider using other common navigation patterns instead.
android.app.ActionBar,abstract CharSequence getSubtitle(), Returns the current ActionBar subtitle in standard mode.
android.app.ActionBar,abstract ActionBar.Tab getTabAt(int index), This method was deprecated in API level 21. Action bar navigation modes are deprecated and not supported by inline toolbar action bars. Consider using other common navigation patterns instead.
android.app.ActionBar,abstract int getTabCount(), This method was deprecated in API level 21. Action bar navigation modes are deprecated and not supported by inline toolbar action bars. Consider using other common navigation patterns instead.
android.app.ActionBar,Context getThemedContext(), Returns a Context with an appropriate theme for creating views that will appear in the action bar.
android.app.ActionBar,abstract CharSequence getTitle(), Returns the current ActionBar title in standard mode.
android.app.ActionBar,abstract void hide(), Hide the ActionBar if it is currently showing.
android.app.ActionBar,boolean isHideOnContentScrollEnabled(), Return whether the action bar is configured to scroll out of sight along with a nested scrolling child.
android.app.ActionBar,abstract boolean isShowing(),
android.app.ActionBar,abstract ActionBar.Tab newTab(), This method was deprecated in API level 21. Action bar navigation modes are deprecated and not supported by inline toolbar action bars. Consider using other common navigation patterns instead.
android.app.ActionBar,abstract void removeAllTabs(), This method was deprecated in API level 21. Action bar navigation modes are deprecated and not supported by inline toolbar action bars. Consider using other common navigation patterns instead.
android.app.ActionBar,abstract void removeOnMenuVisibilityListener(ActionBar.OnMenuVisibilityListener listener), Remove a menu visibility listener.
android.app.ActionBar,abstract void removeTab(ActionBar.Tab tab), This method was deprecated in API level 21. Action bar navigation modes are deprecated and not supported by inline toolbar action bars. Consider using other common navigation patterns instead.
android.app.ActionBar,abstract void removeTabAt(int position), This method was deprecated in API level 21. Action bar navigation modes are deprecated and not supported by inline toolbar action bars. Consider using other common navigation patterns instead.
android.app.ActionBar,abstract void selectTab(ActionBar.Tab tab), This method was deprecated in API level 21. Action bar navigation modes are deprecated and not supported by inline toolbar action bars. Consider using other common navigation patterns instead.
android.app.ActionBar,abstract void setBackgroundDrawable(Drawable d), Set the ActionBar's background.
android.app.ActionBar,"abstract void setCustomView(View view, ActionBar.LayoutParams layoutParams)"," Set the action bar into custom navigation mode, supplying a view for custom navigation."
android.app.ActionBar,abstract void setCustomView(View view)," Set the action bar into custom navigation mode, supplying a view for custom navigation."
android.app.ActionBar,abstract void setCustomView(int resId)," Set the action bar into custom navigation mode, supplying a view for custom navigation."
android.app.ActionBar,abstract void setDisplayHomeAsUpEnabled(boolean showHomeAsUp)," Set whether home should be displayed as an ""up"" affordance."
android.app.ActionBar,"abstract void setDisplayOptions(int options, int mask)", Set selected display options.
android.app.ActionBar,abstract void setDisplayOptions(int options), Set display options.
android.app.ActionBar,abstract void setDisplayShowCustomEnabled(boolean showCustom)," Set whether a custom view should be displayed, if set."
android.app.ActionBar,abstract void setDisplayShowHomeEnabled(boolean showHome), Set whether to include the application home affordance in the action bar.
android.app.ActionBar,abstract void setDisplayShowTitleEnabled(boolean showTitle), Set whether an activity title/subtitle should be displayed.
android.app.ActionBar,abstract void setDisplayUseLogoEnabled(boolean useLogo), Set whether to display the activity logo rather than the activity icon.
android.app.ActionBar,void setElevation(float elevation), Set the Z-axis elevation of the action bar in pixels.
android.app.ActionBar,void setHideOffset(int offset), Set the current hide offset of the action bar.
android.app.ActionBar,void setHideOnContentScrollEnabled(boolean hideOnContentScroll), Enable hiding the action bar on content scroll.
android.app.ActionBar,void setHomeActionContentDescription(CharSequence description)," Set an alternate description for the Home/Up action, when enabled."
android.app.ActionBar,void setHomeActionContentDescription(int resId)," Set an alternate description for the Home/Up action, when enabled."
android.app.ActionBar,void setHomeAsUpIndicator(int resId), Set an alternate drawable to display next to the icon/logo/title when DISPLAY_HOME_AS_UP is enabled.
android.app.ActionBar,void setHomeAsUpIndicator(Drawable indicator), Set an alternate drawable to display next to the icon/logo/title when DISPLAY_HOME_AS_UP is enabled.
android.app.ActionBar,void setHomeButtonEnabled(boolean enabled)," Enable or disable the ""home"" button in the corner of the action bar."
android.app.ActionBar,abstract void setIcon(Drawable icon), Set the icon to display in the 'home' section of the action bar.
android.app.ActionBar,abstract void setIcon(int resId), Set the icon to display in the 'home' section of the action bar.
android.app.ActionBar,"abstract void setListNavigationCallbacks(SpinnerAdapter adapter, ActionBar.OnNavigationListener callback)", This method was deprecated in API level 21. Action bar navigation modes are deprecated and not supported by inline toolbar action bars. Consider using other common navigation patterns instead.
android.app.ActionBar,abstract void setLogo(int resId), Set the logo to display in the 'home' section of the action bar.
android.app.ActionBar,abstract void setLogo(Drawable logo), Set the logo to display in the 'home' section of the action bar.
android.app.ActionBar,abstract void setNavigationMode(int mode), This method was deprecated in API level 21. Action bar navigation modes are deprecated and not supported by inline toolbar action bars. Consider using other common navigation patterns instead.
android.app.ActionBar,abstract void setSelectedNavigationItem(int position), This method was deprecated in API level 21. Action bar navigation modes are deprecated and not supported by inline toolbar action bars. Consider using other common navigation patterns instead.
android.app.ActionBar,void setSplitBackgroundDrawable(Drawable d), Set the ActionBar's split background.
android.app.ActionBar,void setStackedBackgroundDrawable(Drawable d), Set the ActionBar's stacked background.
android.app.ActionBar,abstract void setSubtitle(CharSequence subtitle), Set the action bar's subtitle.
android.app.ActionBar,abstract void setSubtitle(int resId), Set the action bar's subtitle.
android.app.ActionBar,abstract void setTitle(CharSequence title), Set the action bar's title.
android.app.ActionBar,abstract void setTitle(int resId), Set the action bar's title.
android.app.ActionBar,abstract void show(), Show the ActionBar if it is not currently showing.
android.app.Activity,"void addContentView(View view, ViewGroup.LayoutParams params)", Add an additional content view to the activity.
android.app.Activity,void closeContextMenu()," Programmatically closes the most recently opened context menu, if showing."
android.app.Activity,void closeOptionsMenu(), Progammatically closes the options menu.
android.app.Activity,"PendingIntent createPendingResult(int requestCode, Intent data, int flags)"," Create a new PendingIntent object which you can hand to others for them to use to send result data back to your onActivityResult(int, int, Intent) callback."
android.app.Activity,final void dismissDialog(int id), This method was deprecated in API level 13. Use the new DialogFragment class with FragmentManager instead; this is also available on older platforms through the Android compatibility package.
android.app.Activity,final void dismissKeyboardShortcutsHelper(), Dismiss the Keyboard Shortcuts screen.
android.app.Activity,boolean dispatchGenericMotionEvent(MotionEvent ev), Called to process generic motion events.
android.app.Activity,boolean dispatchKeyEvent(KeyEvent event), Called to process key events.
android.app.Activity,boolean dispatchKeyShortcutEvent(KeyEvent event), Called to process a key shortcut event.
android.app.Activity,boolean dispatchPopulateAccessibilityEvent(AccessibilityEvent event), Called to process population of AccessibilityEvents.
android.app.Activity,boolean dispatchTouchEvent(MotionEvent ev), Called to process touch screen events.
android.app.Activity,boolean dispatchTrackballEvent(MotionEvent ev), Called to process trackball events.
android.app.Activity,"void dump(String prefix, FileDescriptor fd, PrintWriter writer, String[] args)", Print the Activity's state into the given stream.
android.app.Activity,boolean enterPictureInPictureMode(PictureInPictureParams params), Puts the activity in picture-in-picture mode if possible in the current system state.
android.app.Activity,void enterPictureInPictureMode(), Puts the activity in picture-in-picture mode if possible in the current system state.
android.app.Activity,<TextendsView> T findViewById(int id), Finds a view that was identified by the android:id XML attribute that was processed in onCreate(Bundle).
android.app.Activity,void finish(), Call this when your activity is done and should be closed.
android.app.Activity,void finishActivity(int requestCode)," Force finish another activity that you had previously started with startActivityForResult(Intent, int)."
android.app.Activity,"void finishActivityFromChild(Activity child, int requestCode)", This is called when a child activity of this one calls its finishActivity().
android.app.Activity,void finishAffinity(), Finish this activity as well as all activities immediately below it in the current task that have the same affinity.
android.app.Activity,void finishAfterTransition(), Reverses the Activity Scene entry Transition and triggers the calling Activity to reverse its exit Transition.
android.app.Activity,void finishAndRemoveTask(), Call this when your activity is done and should be closed and the task should be completely removed as a part of finishing the root activity of the task.
android.app.Activity,void finishFromChild(Activity child), This is called when a child activity of this one calls its finish() method.
android.app.Activity,ActionBar getActionBar(), Retrieve a reference to this activity's ActionBar.
android.app.Activity,final Application getApplication(), Return the application that owns this activity.
android.app.Activity,ComponentName getCallingActivity(), Return the name of the activity that invoked this activity.
android.app.Activity,String getCallingPackage(), Return the name of the package that invoked this activity.
android.app.Activity,int getChangingConfigurations()," If this activity is being destroyed because it can not handle a configuration parameter being changed (and thus its onConfigurationChanged(Configuration) method is not being called), then you can use this method to discover the set of changes that have occurred while in the process of being destroyed."
android.app.Activity,ComponentName getComponentName(), Returns the complete component name of this activity.
android.app.Activity,Scene getContentScene(), Retrieve the Scene representing this window's current content.
android.app.Activity,TransitionManager getContentTransitionManager(), Retrieve the TransitionManager responsible for default transitions in this window.
android.app.Activity,View getCurrentFocus(), Calls getCurrentFocus() on the Window of this Activity to return the currently focused view.
android.app.Activity,FragmentManager getFragmentManager(), This method was deprecated in API level P. Use getSupportFragmentManager()
android.app.Activity,Intent getIntent(), Return the intent that started this activity.
android.app.Activity,Object getLastNonConfigurationInstance(), Retrieve the non-configuration instance data that was previously returned by onRetainNonConfigurationInstance().
android.app.Activity,LayoutInflater getLayoutInflater(), Convenience for calling getLayoutInflater().
android.app.Activity,LoaderManager getLoaderManager(), This method was deprecated in API level P. Use getSupportLoaderManager()
android.app.Activity,String getLocalClassName(), Returns class name for this activity with the package prefix removed.
android.app.Activity,int getMaxNumPictureInPictureActions(), Return the number of actions that will be displayed in the picture-in-picture UI when the user interacts with the activity currently in picture-in-picture mode.
android.app.Activity,final MediaController getMediaController(), Gets the controller which should be receiving media key and volume events while this activity is in the foreground.
android.app.Activity,MenuInflater getMenuInflater(), Returns a MenuInflater with this context.
android.app.Activity,final Activity getParent(), Return the parent activity if this view is an embedded child.
android.app.Activity,Intent getParentActivityIntent(), Obtain an Intent that will launch an explicit target activity specified by this activity's logical parent.
android.app.Activity,SharedPreferences getPreferences(int mode), Retrieve a SharedPreferences object for accessing preferences that are private to this activity.
android.app.Activity,Uri getReferrer(), Return information about who launched this activity.
android.app.Activity,int getRequestedOrientation(), Return the current requested orientation of the activity.
android.app.Activity,final SearchEvent getSearchEvent()," During the onSearchRequested() callbacks, this function will return the SearchEvent that triggered the callback, if it exists."
android.app.Activity,Object getSystemService(String name), Return the handle to a system-level service by name.
android.app.Activity,int getTaskId(), Return the identifier of the task this activity is in.
android.app.Activity,final CharSequence getTitle(),
android.app.Activity,final int getTitleColor(),
android.app.Activity,VoiceInteractor getVoiceInteractor(), Retrieve the active VoiceInteractor that the user is going through to interact with this activity.
android.app.Activity,final int getVolumeControlStream(), Gets the suggested audio stream whose volume should be changed by the hardware volume controls.
android.app.Activity,Window getWindow(), Retrieve the current Window for the activity.
android.app.Activity,WindowManager getWindowManager(), Retrieve the window manager for showing custom windows.
android.app.Activity,boolean hasWindowFocus(), Returns true if this activity's main window currently has window focus.
android.app.Activity,void invalidateOptionsMenu()," Declare that the options menu has changed, so should be recreated."
android.app.Activity,boolean isActivityTransitionRunning(), Returns whether there are any activity transitions currently running on this activity.
android.app.Activity,boolean isChangingConfigurations(), Check to see whether this activity is in the process of being destroyed in order to be recreated with a new configuration.
android.app.Activity,final boolean isChild(), Is this activity embedded inside of another activity?
android.app.Activity,boolean isDestroyed()," Returns true if the final onDestroy() call has been made on the Activity, so this instance is now dead."
android.app.Activity,boolean isFinishing()," Check to see whether this activity is in the process of finishing, either because you called finish() on it or someone else has requested that it finished."
android.app.Activity,boolean isImmersive()," Bit indicating that this activity is ""immersive"" and should not be interrupted by notifications if possible."
android.app.Activity,boolean isInMultiWindowMode(), Returns true if the activity is currently in multi-window mode.
android.app.Activity,boolean isInPictureInPictureMode(), Returns true if the activity is currently in picture-in-picture mode.
android.app.Activity,boolean isLocalVoiceInteractionSupported(), Queries whether the currently enabled voice interaction service supports returning a voice interactor for use by the activity.
android.app.Activity,boolean isTaskRoot(), Return whether this activity is the root of a task.
android.app.Activity,boolean isVoiceInteraction(), Check whether this activity is running as part of a voice interaction with the user.
android.app.Activity,boolean isVoiceInteractionRoot()," Like isVoiceInteraction(), but only returns true if this is also the root of a voice interaction."
android.app.Activity,"final Cursor managedQuery(Uri uri, String[] projection, String selection, String[] selectionArgs, String sortOrder)", This method was deprecated in API level 11. Use CursorLoader instead.
android.app.Activity,boolean moveTaskToBack(boolean nonRoot), Move the task containing this activity to the back of the activity stack.
android.app.Activity,boolean navigateUpTo(Intent upIntent)," Navigate from this activity to the activity specified by upIntent, finishing this activity in the process."
android.app.Activity,"boolean navigateUpToFromChild(Activity child, Intent upIntent)", This is called when a child activity of this one calls its navigateUpTo(Intent) method.
android.app.Activity,void onActionModeFinished(ActionMode mode), Notifies the activity that an action mode has finished.
android.app.Activity,void onActionModeStarted(ActionMode mode), Notifies the Activity that an action mode has been started.
android.app.Activity,"void onActivityReenter(int resultCode, Intent data)"," Called when an activity you launched with an activity transition exposes this Activity through a returning activity transition, giving you the resultCode and any additional data from it."
android.app.Activity,void onAttachFragment(Fragment fragment), This method was deprecated in API level P. Use onAttachFragment(android.support.v4.app.Fragment)
android.app.Activity,void onAttachedToWindow(), Called when the main window associated with the activity has been attached to the window manager.
android.app.Activity,void onBackPressed(), Called when the activity has detected the user's press of the back key.
android.app.Activity,void onConfigurationChanged(Configuration newConfig), Called by the system when the device configuration changes while your activity is running.
android.app.Activity,void onContentChanged(), This hook is called whenever the content view of the screen changes (due to a call to Window.setContentView or Window.addContentView).
android.app.Activity,boolean onContextItemSelected(MenuItem item), This hook is called whenever an item in a context menu is selected.
android.app.Activity,void onContextMenuClosed(Menu menu)," This hook is called whenever the context menu is being closed (either by the user canceling the menu with the back/menu button, or when an item is selected)."
android.app.Activity,"void onCreate(Bundle savedInstanceState, PersistableBundle persistentState)", Same as onCreate(android.os.Bundle) but called for those activities created with the attribute persistableMode set to persistAcrossReboots.
android.app.Activity,"void onCreateContextMenu(ContextMenu menu, View v, ContextMenu.ContextMenuInfo menuInfo)", Called when a context menu for the view is about to be shown.
android.app.Activity,CharSequence onCreateDescription(), Generate a new description for this activity.
android.app.Activity,void onCreateNavigateUpTaskStack(TaskStackBuilder builder), Define the synthetic task stack that will be generated during Up navigation from a different task.
android.app.Activity,boolean onCreateOptionsMenu(Menu menu), Initialize the contents of the Activity's standard options menu.
android.app.Activity,"boolean onCreatePanelMenu(int featureId, Menu menu)"," Default implementation of onCreatePanelMenu(int, Menu) for activities."
android.app.Activity,View onCreatePanelView(int featureId), Default implementation of onCreatePanelView(int) for activities.
android.app.Activity,"boolean onCreateThumbnail(Bitmap outBitmap, Canvas canvas)", Generate a new thumbnail for this activity.
android.app.Activity,"View onCreateView(View parent, String name, Context context, AttributeSet attrs)"," Standard implementation of onCreateView(View, String, Context, AttributeSet) used when inflating with the LayoutInflater returned by getSystemService(Class)."
android.app.Activity,"View onCreateView(String name, Context context, AttributeSet attrs)"," Standard implementation of onCreateView(String, Context, AttributeSet) used when inflating with the LayoutInflater returned by getSystemService(Class)."
android.app.Activity,void onDetachedFromWindow(), Called when the main window associated with the activity has been detached from the window manager.
android.app.Activity,void onEnterAnimationComplete(), Activities cannot draw during the period that their windows are animating in.
android.app.Activity,boolean onGenericMotionEvent(MotionEvent event), Called when a generic motion event was not handled by any of the views inside of the activity.
android.app.Activity,"boolean onKeyDown(int keyCode, KeyEvent event)", Called when a key was pressed down and not handled by any of the views inside of the activity.
android.app.Activity,"boolean onKeyLongPress(int keyCode, KeyEvent event)", Default implementation of KeyEvent.Callback.onKeyLongPress(): always returns false (doesn't handle the event).
android.app.Activity,"boolean onKeyMultiple(int keyCode, int repeatCount, KeyEvent event)", Default implementation of KeyEvent.Callback.onKeyMultiple(): always returns false (doesn't handle the event).
android.app.Activity,"boolean onKeyShortcut(int keyCode, KeyEvent event)", Called when a key shortcut event is not handled by any of the views in the Activity.
android.app.Activity,"boolean onKeyUp(int keyCode, KeyEvent event)", Called when a key was released and not handled by any of the views inside of the activity.
android.app.Activity,void onLocalVoiceInteractionStarted(), Callback to indicate that startLocalVoiceInteraction(Bundle) has resulted in a voice interaction session being started.
android.app.Activity,void onLocalVoiceInteractionStopped(), Callback to indicate that the local voice interaction has stopped either because it was requested through a call to stopLocalVoiceInteraction() or because it was canceled by the user.
android.app.Activity,void onLowMemory()," This is called when the overall system is running low on memory, and actively running processes should trim their memory usage."
android.app.Activity,"boolean onMenuItemSelected(int featureId, MenuItem item)"," Default implementation of onMenuItemSelected(int, MenuItem) for activities."
android.app.Activity,"boolean onMenuOpened(int featureId, Menu menu)", Called when a panel's menu is opened by the user.
android.app.Activity,void onMultiWindowModeChanged(boolean isInMultiWindowMode)," This method was deprecated in API level 26. Use onMultiWindowModeChanged(boolean, Configuration) instead."
android.app.Activity,"void onMultiWindowModeChanged(boolean isInMultiWindowMode, Configuration newConfig)", Called by the system when the activity changes from fullscreen mode to multi-window mode and visa-versa.
android.app.Activity,boolean onNavigateUp(), This method is called whenever the user chooses to navigate Up within your application's activity hierarchy from the action bar.
android.app.Activity,boolean onNavigateUpFromChild(Activity child), This is called when a child activity of this one attempts to navigate up.
android.app.Activity,boolean onOptionsItemSelected(MenuItem item), This hook is called whenever an item in your options menu is selected.
android.app.Activity,void onOptionsMenuClosed(Menu menu)," This hook is called whenever the options menu is being closed (either by the user canceling the menu with the back/menu button, or when an item is selected)."
android.app.Activity,"void onPanelClosed(int featureId, Menu menu)"," Default implementation of onPanelClosed(int, Menu) for activities."
android.app.Activity,"void onPictureInPictureModeChanged(boolean isInPictureInPictureMode, Configuration newConfig)", Called by the system when the activity changes to and from picture-in-picture mode.
android.app.Activity,void onPictureInPictureModeChanged(boolean isInPictureInPictureMode)," This method was deprecated in API level 26. Use onPictureInPictureModeChanged(boolean, Configuration) instead."
android.app.Activity,"void onPostCreate(Bundle savedInstanceState, PersistableBundle persistentState)", This is the same as onPostCreate(Bundle) but is called for activities created with the attribute persistableMode set to persistAcrossReboots.
android.app.Activity,void onPrepareNavigateUpTaskStack(TaskStackBuilder builder), Prepare the synthetic task stack that will be generated during Up navigation from a different task.
android.app.Activity,boolean onPrepareOptionsMenu(Menu menu), Prepare the Screen's standard options menu to be displayed.
android.app.Activity,"boolean onPreparePanel(int featureId, View view, Menu menu)"," Default implementation of onPreparePanel(int, View, Menu) for activities."
android.app.Activity,void onProvideAssistContent(AssistContent outContent)," This is called when the user is requesting an assist, to provide references to content related to the current activity."
android.app.Activity,void onProvideAssistData(Bundle data)," This is called when the user is requesting an assist, to build a full ACTION_ASSIST Intent with all of the context of the current application."
android.app.Activity,Uri onProvideReferrer(), Override to generate the desired referrer for the content currently being shown by the app.
android.app.Activity,"void onRequestPermissionsResult(int requestCode, String[] permissions, int[] grantResults)", Callback for the result from requesting permissions.
android.app.Activity,"void onRestoreInstanceState(Bundle savedInstanceState, PersistableBundle persistentState)", This is the same as onRestoreInstanceState(Bundle) but is called for activities created with the attribute persistableMode set to persistAcrossReboots.
android.app.Activity,Object onRetainNonConfigurationInstance()," Called by the system, as part of destroying an activity due to a configuration change, when it is known that a new instance will immediately be created for the new configuration."
android.app.Activity,"void onSaveInstanceState(Bundle outState, PersistableBundle outPersistentState)", This is the same as onSaveInstanceState(Bundle) but is called for activities created with the attribute persistableMode set to persistAcrossReboots.
android.app.Activity,boolean onSearchRequested(SearchEvent searchEvent), This hook is called when the user signals the desire to start a search.
android.app.Activity,boolean onSearchRequested(), Called when the user signals the desire to start a search.
android.app.Activity,void onStateNotSaved()," Called when an onResume() is coming up, prior to other pre-resume callbacks such as onNewIntent(Intent) and onActivityResult(int, int, Intent)."
android.app.Activity,boolean onTouchEvent(MotionEvent event), Called when a touch screen event was not handled by any of the views under it.
android.app.Activity,boolean onTrackballEvent(MotionEvent event), Called when the trackball was moved and not handled by any of the views inside of the activity.
android.app.Activity,void onTrimMemory(int level), Called when the operating system has determined that it is a good time for a process to trim unneeded memory from its process.
android.app.Activity,void onUserInteraction()," Called whenever a key, touch, or trackball event is dispatched to the activity."
android.app.Activity,void onVisibleBehindCanceled(), This method was deprecated in API level 26. This method's functionality is no longer supported as of O and will be removed in a future release.
android.app.Activity,void onWindowAttributesChanged(WindowManager.LayoutParams params), This is called whenever the current window attributes change.
android.app.Activity,void onWindowFocusChanged(boolean hasFocus), Called when the current Window of the activity gains or loses focus.
android.app.Activity,"ActionMode onWindowStartingActionMode(ActionMode.Callback callback, int type)", Called when an action mode is being started for this window.
android.app.Activity,ActionMode onWindowStartingActionMode(ActionMode.Callback callback), Give the Activity a chance to control the UI for an action mode requested by the system.
android.app.Activity,void openContextMenu(View view), Programmatically opens the context menu for a particular view.
android.app.Activity,void openOptionsMenu(), Programmatically opens the options menu.
android.app.Activity,"void overridePendingTransition(int enterAnim, int exitAnim)", Call immediately after one of the flavors of startActivity(Intent) or finish() to specify an explicit transition animation to perform next.
android.app.Activity,void postponeEnterTransition()," Postpone the entering activity transition when Activity was started with makeSceneTransitionAnimation(Activity, android.util.Pair[])."
android.app.Activity,void recreate(), Cause this Activity to be recreated with a new instance.
android.app.Activity,void registerForContextMenu(View view), Registers a context menu to be shown for the given view (multiple views can show the context menu).
android.app.Activity,boolean releaseInstance(), Ask that the local app instance of this activity be released to free up its memory.
android.app.Activity,final void removeDialog(int id), This method was deprecated in API level 13. Use the new DialogFragment class with FragmentManager instead; this is also available on older platforms through the Android compatibility package.
android.app.Activity,void reportFullyDrawn()," Report to the system that your app is now fully drawn, purely for diagnostic purposes (calling it does not impact the visible behavior of the activity)."
android.app.Activity,DragAndDropPermissions requestDragAndDropPermissions(DragEvent event), Create DragAndDropPermissions object bound to this activity and controlling the access permissions for content URIs associated with the DragEvent.
android.app.Activity,"final void requestPermissions(String[] permissions, int requestCode)", Requests permissions to be granted to this application.
android.app.Activity,final void requestShowKeyboardShortcuts(), Request the Keyboard Shortcuts screen to show up.
android.app.Activity,boolean requestVisibleBehind(boolean visible), This method was deprecated in API level 26. This method's functionality is no longer supported as of O and will be removed in a future release.
android.app.Activity,final boolean requestWindowFeature(int featureId), Enable extended window features.
android.app.Activity,final <TextendsView> T requireViewById(int id)," Finds a view that was identified by the android:id XML attribute that was processed in onCreate(Bundle), or throws an IllegalArgumentException if the ID is invalid, or there is no matching view in the hierarchy."
android.app.Activity,final void runOnUiThread(Runnable action), Runs the specified action on the UI thread.
android.app.Activity,void setActionBar(Toolbar toolbar), Set a Toolbar to act as the ActionBar for this Activity window.
android.app.Activity,void setContentTransitionManager(TransitionManager tm), Set the TransitionManager to use for default transitions in this window.
android.app.Activity,"void setContentView(View view, ViewGroup.LayoutParams params)", Set the activity content to an explicit view.
android.app.Activity,void setContentView(View view), Set the activity content to an explicit view.
android.app.Activity,void setContentView(int layoutResID), Set the activity content from a layout resource.
android.app.Activity,final void setDefaultKeyMode(int mode), Select the default key handling for this activity.
android.app.Activity,void setEnterSharedElementCallback(SharedElementCallback callback)," When makeSceneTransitionAnimation(Activity, android.view.View, String) was used to start an Activity, callback will be called to handle shared elements on the launched Activity."
android.app.Activity,void setExitSharedElementCallback(SharedElementCallback callback)," When makeSceneTransitionAnimation(Activity, android.view.View, String) was used to start an Activity, callback will be called to handle shared elements on the launching Activity."
android.app.Activity,"final void setFeatureDrawable(int featureId, Drawable drawable)"," Convenience for calling setFeatureDrawable(int, Drawable)."
android.app.Activity,"final void setFeatureDrawableAlpha(int featureId, int alpha)"," Convenience for calling setFeatureDrawableAlpha(int, int)."
android.app.Activity,"final void setFeatureDrawableResource(int featureId, int resId)"," Convenience for calling setFeatureDrawableResource(int, int)."
android.app.Activity,"final void setFeatureDrawableUri(int featureId, Uri uri)"," Convenience for calling setFeatureDrawableUri(int, Uri)."
android.app.Activity,void setFinishOnTouchOutside(boolean finish), Sets whether this activity is finished when touched outside its window's bounds.
android.app.Activity,void setImmersive(boolean i), Adjust the current immersive mode setting.
android.app.Activity,void setIntent(Intent newIntent), Change the intent returned by getIntent().
android.app.Activity,final void setMediaController(MediaController controller), Sets a MediaController to send media keys and volume changes to.
android.app.Activity,void setPictureInPictureParams(PictureInPictureParams params)," Updates the properties of the picture-in-picture activity, or sets it to be used later when enterPictureInPictureMode() is called."
android.app.Activity,final void setProgress(int progress), This method was deprecated in API level 24. No longer supported starting in API 21.
android.app.Activity,final void setProgressBarIndeterminate(boolean indeterminate), This method was deprecated in API level 24. No longer supported starting in API 21.
android.app.Activity,final void setProgressBarIndeterminateVisibility(boolean visible), This method was deprecated in API level 24. No longer supported starting in API 21.
android.app.Activity,final void setProgressBarVisibility(boolean visible), This method was deprecated in API level 24. No longer supported starting in API 21.
android.app.Activity,void setRequestedOrientation(int requestedOrientation), Change the desired orientation of this activity.
android.app.Activity,"final void setResult(int resultCode, Intent data)", Call this to set the result that your activity will return to its caller.
android.app.Activity,final void setResult(int resultCode), Call this to set the result that your activity will return to its caller.
android.app.Activity,final void setSecondaryProgress(int secondaryProgress), This method was deprecated in API level 24. No longer supported starting in API 21.
android.app.Activity,void setShowWhenLocked(boolean showWhenLocked), Specifies whether an Activity should be shown on top of the the lock screen whenever the lockscreen is up and the activity is resumed.
android.app.Activity,void setTaskDescription(ActivityManager.TaskDescription taskDescription), Sets information describing the task with this activity for presentation inside the Recents System UI.
android.app.Activity,void setTheme(int resid), Set the base theme for this context.
android.app.Activity,void setTitle(CharSequence title), Change the title associated with this activity.
android.app.Activity,void setTitle(int titleId), Change the title associated with this activity.
android.app.Activity,void setTitleColor(int textColor), This method was deprecated in API level 21. Use action bar styles instead.
android.app.Activity,void setTurnScreenOn(boolean turnScreenOn), Specifies whether the screen should be turned on when the Activity is resumed.
android.app.Activity,void setVisible(boolean visible), Control whether this activity's main window is visible.
android.app.Activity,final void setVolumeControlStream(int streamType), Suggests an audio stream whose volume should be changed by the hardware volume controls.
android.app.Activity,"void setVrModeEnabled(boolean enabled, ComponentName requestedComponent)", Enable or disable virtual reality (VR) mode for this Activity.
android.app.Activity,boolean shouldShowRequestPermissionRationale(String permission), Gets whether you should show UI with rationale for requesting a permission.
android.app.Activity,boolean shouldUpRecreateTask(Intent targetIntent), Returns true if the app should recreate the task when navigating 'up' from this activity by using targetIntent.
android.app.Activity,boolean showAssist(Bundle args), Ask to have the current assistant shown to the user.
android.app.Activity,"final boolean showDialog(int id, Bundle args)", This method was deprecated in API level 13. Use the new DialogFragment class with FragmentManager instead; this is also available on older platforms through the Android compatibility package.
android.app.Activity,final void showDialog(int id), This method was deprecated in API level 13. Use the new DialogFragment class with FragmentManager instead; this is also available on older platforms through the Android compatibility package.
android.app.Activity,void showLockTaskEscapeMessage(), Shows the user the system defined message for telling the user how to exit lock task mode.
android.app.Activity,"ActionMode startActionMode(ActionMode.Callback callback, int type)", Start an action mode of the given type.
android.app.Activity,ActionMode startActionMode(ActionMode.Callback callback), Start an action mode of the default type TYPE_PRIMARY.
android.app.Activity,"void startActivities(Intent[] intents, Bundle options)", Launch a new activity.
android.app.Activity,void startActivities(Intent[] intents)," Same as startActivities(Intent[], Bundle) with no options specified."
android.app.Activity,void startActivity(Intent intent)," Same as startActivity(Intent, Bundle) with no options specified."
android.app.Activity,"void startActivity(Intent intent, Bundle options)", Launch a new activity.
android.app.Activity,"void startActivityForResult(Intent intent, int requestCode)"," Same as calling startActivityForResult(Intent, int, Bundle) with no options."
android.app.Activity,"void startActivityForResult(Intent intent, int requestCode, Bundle options)", Launch an activity for which you would like a result when it finished.
android.app.Activity,"void startActivityFromChild(Activity child, Intent intent, int requestCode)"," Same as calling startActivityFromChild(Activity, Intent, int, Bundle) with no options."
android.app.Activity,"void startActivityFromChild(Activity child, Intent intent, int requestCode, Bundle options)"," This is called when a child activity of this one calls its startActivity(Intent) or startActivityForResult(Intent, int) method."
android.app.Activity,"void startActivityFromFragment(Fragment fragment, Intent intent, int requestCode, Bundle options)"," This method was deprecated in API level P. Use startActivityFromFragment(android.support.v4.app.Fragment, Intent, int, Bundle)"
android.app.Activity,"void startActivityFromFragment(Fragment fragment, Intent intent, int requestCode)"," This method was deprecated in API level P. Use startActivityFromFragment(android.support.v4.app.Fragment, Intent, int)"
android.app.Activity,"boolean startActivityIfNeeded(Intent intent, int requestCode, Bundle options)", A special variation to launch an activity only if a new activity instance is needed to handle the given Intent.
android.app.Activity,"boolean startActivityIfNeeded(Intent intent, int requestCode)"," Same as calling startActivityIfNeeded(Intent, int, Bundle) with no options."
android.app.Activity,"void startIntentSender(IntentSender intent, Intent fillInIntent, int flagsMask, int flagsValues, int extraFlags)"," Same as calling startIntentSender(IntentSender, Intent, int, int, int, Bundle) with no options."
android.app.Activity,"void startIntentSender(IntentSender intent, Intent fillInIntent, int flagsMask, int flagsValues, int extraFlags, Bundle options)"," Like startActivity(Intent, Bundle), but taking a IntentSender to start; see startIntentSenderForResult(IntentSender, int, Intent, int, int, int, Bundle) for more information."
android.app.Activity,"void startIntentSenderForResult(IntentSender intent, int requestCode, Intent fillInIntent, int flagsMask, int flagsValues, int extraFlags)"," Same as calling startIntentSenderForResult(IntentSender, int, Intent, int, int, int, Bundle) with no options."
android.app.Activity,"void startIntentSenderForResult(IntentSender intent, int requestCode, Intent fillInIntent, int flagsMask, int flagsValues, int extraFlags, Bundle options)"," Like startActivityForResult(Intent, int), but allowing you to use a IntentSender to describe the activity to be started."
android.app.Activity,"void startIntentSenderFromChild(Activity child, IntentSender intent, int requestCode, Intent fillInIntent, int flagsMask, int flagsValues, int extraFlags, Bundle options)"," Like startActivityFromChild(Activity, Intent, int), but taking a IntentSender; see startIntentSenderForResult(IntentSender, int, Intent, int, int, int) for more information."
android.app.Activity,"void startIntentSenderFromChild(Activity child, IntentSender intent, int requestCode, Intent fillInIntent, int flagsMask, int flagsValues, int extraFlags)"," Same as calling startIntentSenderFromChild(Activity, IntentSender, int, Intent, int, int, int, Bundle) with no options."
android.app.Activity,void startLocalVoiceInteraction(Bundle privateOptions), Starts a local voice interaction session.
android.app.Activity,void startLockTask(), Request to put this activity in a mode where the user is locked to a restricted set of applications.
android.app.Activity,void startManagingCursor(Cursor c), This method was deprecated in API level 11. Use the new CursorLoader class with LoaderManager instead; this is also available on older platforms through the Android compatibility package.
android.app.Activity,"boolean startNextMatchingActivity(Intent intent, Bundle options)"," Special version of starting an activity, for use when you are replacing other activity components."
android.app.Activity,boolean startNextMatchingActivity(Intent intent)," Same as calling startNextMatchingActivity(Intent, Bundle) with no options."
android.app.Activity,void startPostponedEnterTransition(), Begin postponed transitions after postponeEnterTransition() was called.
android.app.Activity,"void startSearch(String initialQuery, boolean selectInitialQuery, Bundle appSearchData, boolean globalSearch)", This hook is called to launch the search UI.
android.app.Activity,void stopLocalVoiceInteraction(), Request to terminate the current voice interaction that was previously started using startLocalVoiceInteraction(Bundle).
android.app.Activity,void stopLockTask(), Stop the current task from being locked.
android.app.Activity,void stopManagingCursor(Cursor c), This method was deprecated in API level 11. Use the new CursorLoader class with LoaderManager instead; this is also available on older platforms through the Android compatibility package.
android.app.Activity,void takeKeyEvents(boolean get), Request that key events come to this activity.
android.app.Activity,"void triggerSearch(String query, Bundle appSearchData)"," Similar to startSearch(String, boolean, Bundle, boolean), but actually fires off the search query after invoking the search dialog."
android.app.Activity,void unregisterForContextMenu(View view), Prevents a context menu to be shown for the given view.
android.app.ActivityGroup,Activity getCurrentActivity(),
android.app.ActivityGroup,final LocalActivityManager getLocalActivityManager(),
android.app.Fragment.InstantiationException,final void addSuppressed(Throwable exception), Appends the specified exception to the exceptions that were suppressed in order to deliver this exception.
android.app.Fragment.InstantiationException,Throwable fillInStackTrace(), Fills in the execution stack trace.
android.app.Fragment.InstantiationException,Throwable getCause(), Returns the cause of this throwable or null if the cause is nonexistent or unknown.
android.app.Fragment.InstantiationException,String getLocalizedMessage(), Creates a localized description of this throwable.
android.app.Fragment.InstantiationException,String getMessage(), Returns the detail message string of this throwable.
android.app.Fragment.InstantiationException,StackTraceElement[] getStackTrace(), Provides programmatic access to the stack trace information printed by printStackTrace().
android.app.Fragment.InstantiationException,final Throwable[] getSuppressed()," Returns an array containing all of the exceptions that were suppressed, typically by the try-with-resources statement, in order to deliver this exception."
android.app.Fragment.InstantiationException,Throwable initCause(Throwable cause), Initializes the cause of this throwable to the specified value.
android.app.Fragment.InstantiationException,void printStackTrace(), Prints this throwable and its backtrace to the standard error stream.
android.app.Fragment.InstantiationException,void printStackTrace(PrintWriter s), Prints this throwable and its backtrace to the specified print writer.
android.app.Fragment.InstantiationException,void printStackTrace(PrintStream s), Prints this throwable and its backtrace to the specified print stream.
android.app.Fragment.InstantiationException,void setStackTrace(StackTraceElement[] stackTrace), Sets the stack trace elements that will be returned by getStackTrace() and printed by printStackTrace() and related methods.
android.app.Fragment.InstantiationException,String toString(), Returns a short description of this throwable.
android.app.Fragment.InstantiationException,Object clone(), Creates and returns a copy of this object.
android.app.Fragment.InstantiationException,boolean equals(Object obj)," Indicates whether some other object is ""equal to"" this one."
android.app.Fragment.InstantiationException,void finalize(), Called by the garbage collector on an object when garbage collection determines that there are no more references to the object.
android.app.Fragment.InstantiationException,final Class<?> getClass(), Returns the runtime class of this Object.
android.app.Fragment.InstantiationException,int hashCode(), Returns a hash code value for the object.
android.app.Fragment.InstantiationException,final void notify(), Wakes up a single thread that is waiting on this object's monitor.
android.app.Fragment.InstantiationException,final void notifyAll(), Wakes up all threads that are waiting on this object's monitor.
android.app.Fragment.InstantiationException,String toString(), Returns a string representation of the object.
android.app.Fragment.InstantiationException,"final void wait(long millis, int nanos)"," Causes the current thread to wait until another thread invokes the notify() method or the notifyAll() method for this object, or some other thread interrupts the current thread, or a certain amount of real time has elapsed."
android.app.Fragment.InstantiationException,final void wait(long millis)," Causes the current thread to wait until either another thread invokes the notify() method or the notifyAll() method for this object, or a specified amount of time has elapsed."
android.app.Fragment.InstantiationException,final void wait(), Causes the current thread to wait until another thread invokes the notify() method or the notifyAll() method for this object.
android.app.Fragment.SavedState,int describeContents(), Describe the kinds of special objects contained in this Parcelable instance's marshaled representation.
android.app.Fragment.SavedState,"void writeToParcel(Parcel dest, int flags)", Flatten this object in to a Parcel.
android.app.Fragment,"void dump(String prefix, FileDescriptor fd, PrintWriter writer, String[] args)", Print the Fragments's state into the given stream.
android.app.Fragment,final boolean equals(Object o), Subclasses can not override equals().
android.app.Fragment,final Activity getActivity(), Return the Activity this fragment is currently associated with.
android.app.Fragment,boolean getAllowEnterTransitionOverlap(), Returns whether the the exit transition and enter transition overlap or not.
android.app.Fragment,boolean getAllowReturnTransitionOverlap(), Returns whether the the return transition and reenter transition overlap or not.
android.app.Fragment,final Bundle getArguments()," Return the arguments supplied to setArguments(Bundle), if any."
android.app.Fragment,final FragmentManager getChildFragmentManager(), Return a private FragmentManager for placing and managing Fragments inside of this Fragment.
android.app.Fragment,Context getContext(), Return the Context this fragment is currently associated with.
android.app.Fragment,Transition getEnterTransition(), Returns the Transition that will be used to move Views into the initial scene.
android.app.Fragment,Transition getExitTransition()," Returns the Transition that will be used to move Views out of the scene when the fragment is removed, hidden, or detached when not popping the back stack."
android.app.Fragment,final FragmentManager getFragmentManager(), Return the FragmentManager for interacting with fragments associated with this fragment's activity.
android.app.Fragment,final Object getHost(), Return the host object of this fragment.
android.app.Fragment,final int getId(), Return the identifier this fragment is known by.
android.app.Fragment,final LayoutInflater getLayoutInflater(), Returns the cached LayoutInflater used to inflate Views of this Fragment.
android.app.Fragment,LoaderManager getLoaderManager(), This method was deprecated in API level P. Use getLoaderManager()
android.app.Fragment,final Fragment getParentFragment(), Returns the parent Fragment containing this Fragment.
android.app.Fragment,Transition getReenterTransition(), Returns the Transition that will be used to move Views in to the scene when returning due to popping a back stack.
android.app.Fragment,final Resources getResources(), Return getActivity().getResources().
android.app.Fragment,final boolean getRetainInstance(),
android.app.Fragment,Transition getReturnTransition()," Returns the Transition that will be used to move Views out of the scene when the Fragment is preparing to be removed, hidden, or detached because of popping the back stack."
android.app.Fragment,Transition getSharedElementEnterTransition(), Returns the Transition that will be used for shared elements transferred into the content Scene.
android.app.Fragment,Transition getSharedElementReturnTransition(), Return the Transition that will be used for shared elements transferred back during a pop of the back stack.
android.app.Fragment,"final String getString(int resId, Object... formatArgs)"," Return a localized formatted string from the application's package's default string table, substituting the format arguments as defined in Formatter and format(String, Object...)."
android.app.Fragment,final String getString(int resId), Return a localized string from the application's package's default string table.
android.app.Fragment,final String getTag()," Get the tag name of the fragment, if specified."
android.app.Fragment,final Fragment getTargetFragment()," Return the target fragment set by setTargetFragment(Fragment, int)."
android.app.Fragment,final int getTargetRequestCode()," Return the target request code set by setTargetFragment(Fragment, int)."
android.app.Fragment,final CharSequence getText(int resId)," Return a localized, styled CharSequence from the application's package's default string table."
android.app.Fragment,boolean getUserVisibleHint(),
android.app.Fragment,View getView()," Get the root view for the fragment's layout (the one returned by onCreateView(LayoutInflater, ViewGroup, Bundle)), if provided."
android.app.Fragment,final int hashCode(), Subclasses can not override hashCode().
android.app.Fragment,"static Fragment instantiate(Context context, String fname)"," Like instantiate(Context, String, Bundle) but with a null argument Bundle."
android.app.Fragment,"static Fragment instantiate(Context context, String fname, Bundle args)", Create a new instance of a Fragment with the given class name.
android.app.Fragment,final boolean isAdded(), Return true if the fragment is currently added to its activity.
android.app.Fragment,final boolean isDetached(), Return true if the fragment has been explicitly detached from the UI.
android.app.Fragment,final boolean isHidden(), Return true if the fragment has been hidden.
android.app.Fragment,final boolean isInLayout(), Return true if the layout is included as part of an activity view hierarchy via the <fragment> tag.
android.app.Fragment,final boolean isRemoving(), Return true if this fragment is currently being removed from its activity.
android.app.Fragment,final boolean isResumed(), Return true if the fragment is in the resumed state.
android.app.Fragment,final boolean isStateSaved(), Returns true if this fragment is added and its state has already been saved by its host.
android.app.Fragment,final boolean isVisible(), Return true if the fragment is currently visible to the user.
android.app.Fragment,void onActivityCreated(Bundle savedInstanceState), Called when the fragment's activity has been created and this fragment's view hierarchy instantiated.
android.app.Fragment,"void onActivityResult(int requestCode, int resultCode, Intent data)"," Receive the result from a previous call to startActivityForResult(Intent, int)."
android.app.Fragment,void onAttach(Activity activity), This method was deprecated in API level 23. Use onAttach(Context) instead.
android.app.Fragment,void onAttach(Context context), Called when a fragment is first attached to its context.
android.app.Fragment,void onAttachFragment(Fragment childFragment), Called when a fragment is attached as a child of this fragment.
android.app.Fragment,void onConfigurationChanged(Configuration newConfig), Called by the system when the device configuration changes while your component is running.
android.app.Fragment,boolean onContextItemSelected(MenuItem item), This hook is called whenever an item in a context menu is selected.
android.app.Fragment,void onCreate(Bundle savedInstanceState), Called to do initial creation of a fragment.
android.app.Fragment,"Animator onCreateAnimator(int transit, boolean enter, int nextAnim)", Called when a fragment loads an animation.
android.app.Fragment,"void onCreateContextMenu(ContextMenu menu, View v, ContextMenu.ContextMenuInfo menuInfo)", Called when a context menu for the view is about to be shown.
android.app.Fragment,"void onCreateOptionsMenu(Menu menu, MenuInflater inflater)", Initialize the contents of the Activity's standard options menu.
android.app.Fragment,"View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState)", Called to have the fragment instantiate its user interface view.
android.app.Fragment,void onDestroy(), Called when the fragment is no longer in use.
android.app.Fragment,void onDestroyOptionsMenu(), Called when this fragment's option menu items are no longer being included in the overall options menu.
android.app.Fragment,void onDestroyView()," Called when the view previously created by onCreateView(LayoutInflater, ViewGroup, Bundle) has been detached from the fragment."
android.app.Fragment,void onDetach(), Called when the fragment is no longer attached to its activity.
android.app.Fragment,LayoutInflater onGetLayoutInflater(Bundle savedInstanceState), Returns the LayoutInflater used to inflate Views of this Fragment.
android.app.Fragment,void onHiddenChanged(boolean hidden), Called when the hidden state (as returned by isHidden() of the fragment has changed.
android.app.Fragment,"void onInflate(AttributeSet attrs, Bundle savedInstanceState)"," This method was deprecated in API level 12. Use onInflate(Context, AttributeSet, Bundle) instead."
android.app.Fragment,"void onInflate(Activity activity, AttributeSet attrs, Bundle savedInstanceState)"," This method was deprecated in API level 23. Use onInflate(Context, AttributeSet, Bundle) instead."
android.app.Fragment,"void onInflate(Context context, AttributeSet attrs, Bundle savedInstanceState)"," Called when a fragment is being created as part of a view layout inflation, typically from setting the content view of an activity."
android.app.Fragment,void onLowMemory()," This is called when the overall system is running low on memory, and actively running processes should trim their memory usage."
android.app.Fragment,void onMultiWindowModeChanged(boolean isInMultiWindowMode)," This method was deprecated in API level 26. Use onMultiWindowModeChanged(boolean, Configuration) instead."
android.app.Fragment,"void onMultiWindowModeChanged(boolean isInMultiWindowMode, Configuration newConfig)", Called when the Fragment's activity changes from fullscreen mode to multi-window mode and visa-versa.
android.app.Fragment,boolean onOptionsItemSelected(MenuItem item), This hook is called whenever an item in your options menu is selected.
android.app.Fragment,void onOptionsMenuClosed(Menu menu)," This hook is called whenever the options menu is being closed (either by the user canceling the menu with the back/menu button, or when an item is selected)."
android.app.Fragment,void onPause(), Called when the Fragment is no longer resumed.
android.app.Fragment,"void onPictureInPictureModeChanged(boolean isInPictureInPictureMode, Configuration newConfig)", Called by the system when the activity changes to and from picture-in-picture mode.
android.app.Fragment,void onPictureInPictureModeChanged(boolean isInPictureInPictureMode)," This method was deprecated in API level 26. Use onPictureInPictureModeChanged(boolean, Configuration) instead."
android.app.Fragment,void onPrepareOptionsMenu(Menu menu), Prepare the Screen's standard options menu to be displayed.
android.app.Fragment,"void onRequestPermissionsResult(int requestCode, String[] permissions, int[] grantResults)", Callback for the result from requesting permissions.
android.app.Fragment,void onResume(), Called when the fragment is visible to the user and actively running.
android.app.Fragment,void onSaveInstanceState(Bundle outState)," Called to ask the fragment to save its current dynamic state, so it can later be reconstructed in a new instance of its process is restarted."
android.app.Fragment,void onStart(), Called when the Fragment is visible to the user.
android.app.Fragment,void onStop(), Called when the Fragment is no longer started.
android.app.Fragment,void onTrimMemory(int level), Called when the operating system has determined that it is a good time for a process to trim unneeded memory from its process.
android.app.Fragment,"void onViewCreated(View view, Bundle savedInstanceState)"," Called immediately after onCreateView(LayoutInflater, ViewGroup, Bundle) has returned, but before any saved state has been restored in to the view."
android.app.Fragment,void onViewStateRestored(Bundle savedInstanceState), Called when all saved state has been restored into the view hierarchy of the fragment.
android.app.Fragment,void postponeEnterTransition(), Postpone the entering Fragment transition until startPostponedEnterTransition() or executePendingTransactions() has been called.
android.app.Fragment,void registerForContextMenu(View view), Registers a context menu to be shown for the given view (multiple views can show the context menu).
android.app.Fragment,"final void requestPermissions(String[] permissions, int requestCode)", Requests permissions to be granted to this application.
android.app.Fragment,void setAllowEnterTransitionOverlap(boolean allow), Sets whether the the exit transition and enter transition overlap or not.
android.app.Fragment,void setAllowReturnTransitionOverlap(boolean allow), Sets whether the the return transition and reenter transition overlap or not.
android.app.Fragment,void setArguments(Bundle args), Supply the construction arguments for this fragment.
android.app.Fragment,void setEnterSharedElementCallback(SharedElementCallback callback)," When custom transitions are used with Fragments, the enter transition callback is called when this Fragment is attached or detached when not popping the back stack."
android.app.Fragment,void setEnterTransition(Transition transition), Sets the Transition that will be used to move Views into the initial scene.
android.app.Fragment,void setExitSharedElementCallback(SharedElementCallback callback)," When custom transitions are used with Fragments, the exit transition callback is called when this Fragment is attached or detached when popping the back stack."
android.app.Fragment,void setExitTransition(Transition transition)," Sets the Transition that will be used to move Views out of the scene when the fragment is removed, hidden, or detached when not popping the back stack."
android.app.Fragment,void setHasOptionsMenu(boolean hasMenu)," Report that this fragment would like to participate in populating the options menu by receiving a call to onCreateOptionsMenu(Menu, MenuInflater) and related methods."
android.app.Fragment,void setInitialSavedState(Fragment.SavedState state)," Set the initial saved state that this Fragment should restore itself from when first being constructed, as returned by FragmentManager.saveFragmentInstanceState."
android.app.Fragment,void setMenuVisibility(boolean menuVisible), Set a hint for whether this fragment's menu should be visible.
android.app.Fragment,void setReenterTransition(Transition transition), Sets the Transition that will be used to move Views in to the scene when returning due to popping a back stack.
android.app.Fragment,void setRetainInstance(boolean retain), Control whether a fragment instance is retained across Activity re-creation (such as from a configuration change).
android.app.Fragment,void setReturnTransition(Transition transition)," Sets the Transition that will be used to move Views out of the scene when the Fragment is preparing to be removed, hidden, or detached because of popping the back stack."
android.app.Fragment,void setSharedElementEnterTransition(Transition transition), Sets the Transition that will be used for shared elements transferred into the content Scene.
android.app.Fragment,void setSharedElementReturnTransition(Transition transition), Sets the Transition that will be used for shared elements transferred back during a pop of the back stack.
android.app.Fragment,"void setTargetFragment(Fragment fragment, int requestCode)", Optional target for this fragment.
android.app.Fragment,void setUserVisibleHint(boolean isVisibleToUser), Set a hint to the system about whether this fragment's UI is currently visible to the user.
android.app.Fragment,boolean shouldShowRequestPermissionRationale(String permission), Gets whether you should show UI with rationale for requesting a permission.
android.app.Fragment,void startActivity(Intent intent), Call startActivity(Intent) from the fragment's containing Activity.
android.app.Fragment,"void startActivity(Intent intent, Bundle options)"," Call startActivity(Intent, Bundle) from the fragment's containing Activity."
android.app.Fragment,"void startActivityForResult(Intent intent, int requestCode)"," Call startActivityForResult(Intent, int) from the fragment's containing Activity."
android.app.Fragment,"void startActivityForResult(Intent intent, int requestCode, Bundle options)"," Call startActivityForResult(Intent, int, Bundle) from the fragment's containing Activity."
android.app.Fragment,"void startIntentSenderForResult(IntentSender intent, int requestCode, Intent fillInIntent, int flagsMask, int flagsValues, int extraFlags, Bundle options)"," Call startIntentSenderForResult(IntentSender, int, Intent, int, int, int, Bundle) from the fragment's containing Activity."
android.app.Fragment,void startPostponedEnterTransition(), Begin postponed transitions after postponeEnterTransition() was called.
android.app.Fragment,String toString(), Returns a string representation of the object.
android.app.Fragment,void unregisterForContextMenu(View view), Prevents a context menu to be shown for the given view.
android.app.FragmentBreadCrumbs.OnBreadCrumbClickListener,"abstract boolean onBreadCrumbClick(FragmentManager.BackStackEntry backStack, int flags)", Called when a bread crumb is clicked.
android.app.FragmentBreadCrumbs,void onBackStackChanged(), Called whenever the contents of the back stack change.
android.app.FragmentBreadCrumbs,void setActivity(Activity a), Attach the bread crumbs to their activity.
android.app.FragmentBreadCrumbs,void setMaxVisible(int visibleCrumbs), The maximum number of breadcrumbs to show.
android.app.FragmentBreadCrumbs,void setOnBreadCrumbClickListener(FragmentBreadCrumbs.OnBreadCrumbClickListener listener), Sets a listener for clicks on the bread crumbs.
android.app.FragmentBreadCrumbs,"void setParentTitle(CharSequence title, CharSequence shortTitle, View.OnClickListener listener)", Inserts an optional parent entry at the first position in the breadcrumbs.
android.app.FragmentBreadCrumbs,"void setTitle(CharSequence title, CharSequence shortTitle)", Set a custom title for the bread crumbs.
android.app.FragmentContainer,abstract <TextendsView> T onFindViewById(int id), Return the view with the given resource ID.
android.app.FragmentContainer,abstract boolean onHasView(), Return true if the container holds any view.
android.app.FragmentController,void attachHost(Fragment parent), Attaches the host to the FragmentManager for this controller.
android.app.FragmentController,static final FragmentController createController(FragmentHostCallback<?> callbacks), Returns a FragmentController.
android.app.FragmentController,void dispatchActivityCreated(), Moves all Fragments managed by the controller's FragmentManager into the activity created state.
android.app.FragmentController,void dispatchConfigurationChanged(Configuration newConfig), Lets all Fragments managed by the controller's FragmentManager know a configuration change occurred.
android.app.FragmentController,boolean dispatchContextItemSelected(MenuItem item), Sends a context item selection event to the Fragments managed by the controller's FragmentManager.
android.app.FragmentController,void dispatchCreate(), Moves all Fragments managed by the controller's FragmentManager into the create state.
android.app.FragmentController,"boolean dispatchCreateOptionsMenu(Menu menu, MenuInflater inflater)", Lets all Fragments managed by the controller's FragmentManager know they should create an options menu.
android.app.FragmentController,void dispatchDestroy(), Moves all Fragments managed by the controller's FragmentManager into the destroy state.
android.app.FragmentController,void dispatchDestroyView(), Moves all Fragments managed by the controller's FragmentManager into the destroy view state.
android.app.FragmentController,void dispatchLowMemory(), Lets all Fragments managed by the controller's FragmentManager know the device is in a low memory condition.
android.app.FragmentController,void dispatchMultiWindowModeChanged(boolean isInMultiWindowMode)," This method was deprecated in API level 26. use dispatchMultiWindowModeChanged(boolean, Configuration)"
android.app.FragmentController,"void dispatchMultiWindowModeChanged(boolean isInMultiWindowMode, Configuration newConfig)", Lets all Fragments managed by the controller's FragmentManager know the multi-window mode of the activity changed.
android.app.FragmentController,boolean dispatchOptionsItemSelected(MenuItem item), Sends an option item selection event to the Fragments managed by the controller's FragmentManager.
android.app.FragmentController,void dispatchOptionsMenuClosed(Menu menu), Lets all Fragments managed by the controller's FragmentManager know their options menu has closed.
android.app.FragmentController,void dispatchPause(), Moves all Fragments managed by the controller's FragmentManager into the pause state.
android.app.FragmentController,"void dispatchPictureInPictureModeChanged(boolean isInPictureInPictureMode, Configuration newConfig)", Lets all Fragments managed by the controller's FragmentManager know the picture-in-picture mode of the activity changed.
android.app.FragmentController,void dispatchPictureInPictureModeChanged(boolean isInPictureInPictureMode)," This method was deprecated in API level 26. use dispatchPictureInPictureModeChanged(boolean, Configuration)"
android.app.FragmentController,boolean dispatchPrepareOptionsMenu(Menu menu), Lets all Fragments managed by the controller's FragmentManager know they should prepare their options menu for display.
android.app.FragmentController,void dispatchResume(), Moves all Fragments managed by the controller's FragmentManager into the resume state.
android.app.FragmentController,void dispatchStart(), Moves all Fragments managed by the controller's FragmentManager into the start state.
android.app.FragmentController,void dispatchStop(), Moves all Fragments managed by the controller's FragmentManager into the stop state.
android.app.FragmentController,void dispatchTrimMemory(int level), Lets all Fragments managed by the controller's FragmentManager know they should trim their memory usage.
android.app.FragmentController,void doLoaderDestroy()," Destroys the loaders and, if their state is not being retained, removes them."
android.app.FragmentController,void doLoaderStart(), Starts the loaders.
android.app.FragmentController,void doLoaderStop(boolean retain)," Stops the loaders, optionally retaining their state."
android.app.FragmentController,"void dumpLoaders(String prefix, FileDescriptor fd, PrintWriter writer, String[] args)", Dumps the current state of the loaders.
android.app.FragmentController,boolean execPendingActions(), Execute any pending actions for the Fragments managed by the controller's FragmentManager.
android.app.FragmentController,Fragment findFragmentByWho(String who), Returns a fragment with the given identifier.
android.app.FragmentController,FragmentManager getFragmentManager(), Returns a FragmentManager for this controller.
android.app.FragmentController,LoaderManager getLoaderManager(), Returns a LoaderManager.
android.app.FragmentController,void noteStateNotSaved(), Marks the fragment state as unsaved.
android.app.FragmentController,"View onCreateView(View parent, String name, Context context, AttributeSet attrs)", Instantiates a Fragment's view.
android.app.FragmentController,void reportLoaderStart(), Lets the loaders know the host is ready to receive notifications.
android.app.FragmentController,"void restoreAllState(Parcelable state, FragmentManagerNonConfig nonConfig)", Restores the saved state for all Fragments.
android.app.FragmentController,"void restoreAllState(Parcelable state, List<Fragment> nonConfigList)"," This method was deprecated in API level 24. use restoreAllState(Parcelable, FragmentManagerNonConfig)"
android.app.FragmentController,"void restoreLoaderNonConfig(ArrayMap<String,LoaderManager> loaderManagers)", Restores the saved state for all LoaderManagers.
android.app.FragmentController,"ArrayMap<String,LoaderManager> retainLoaderNonConfig()", Returns a list of LoaderManagers that have opted to retain their instance across configuration changes.
android.app.FragmentController,FragmentManagerNonConfig retainNestedNonConfig(), Returns a nested tree of Fragments that have opted to retain their instance across configuration changes.
android.app.FragmentController,List<Fragment> retainNonConfig(), This method was deprecated in API level 24. use retainNestedNonConfig() to also track retained nested child fragments
android.app.FragmentController,Parcelable saveAllState(), Saves the state for all Fragments.
android.app.FragmentHostCallback,void onAttachFragment(Fragment fragment)," Called when a Fragment is being attached to this host, immediately after the call to its onAttach(Context) method and before onCreate(Bundle)."
android.app.FragmentHostCallback,"void onDump(String prefix, FileDescriptor fd, PrintWriter writer, String[] args)", Print internal state into the given stream.
android.app.FragmentHostCallback,<TextendsView> T onFindViewById(int id), Return the view with the given resource ID.
android.app.FragmentHostCallback,abstract E onGetHost(), Return the object that's currently hosting the fragment.
android.app.FragmentHostCallback,LayoutInflater onGetLayoutInflater(), Return a LayoutInflater.
android.app.FragmentHostCallback,int onGetWindowAnimations(), Return the window animations.
android.app.FragmentHostCallback,boolean onHasView(), Return true if the container holds any view.
android.app.FragmentHostCallback,boolean onHasWindowAnimations(), Return true if there are window animations.
android.app.FragmentHostCallback,void onInvalidateOptionsMenu(), Invalidates the activity's options menu.
android.app.FragmentHostCallback,"void onRequestPermissionsFromFragment(Fragment fragment, String[] permissions, int requestCode)", Requests permissions from the given fragment.
android.app.FragmentHostCallback,boolean onShouldSaveFragmentState(Fragment fragment), Return true if the fragment's state needs to be saved.
android.app.FragmentHostCallback,"void onStartActivityFromFragment(Fragment fragment, Intent intent, int requestCode, Bundle options)", Starts a new Activity from the given fragment.
android.app.FragmentHostCallback,"void onStartIntentSenderFromFragment(Fragment fragment, IntentSender intent, int requestCode, Intent fillInIntent, int flagsMask, int flagsValues, int extraFlags, Bundle options)", Starts a new IntentSender from the given fragment.
android.app.FragmentHostCallback,boolean onUseFragmentManagerInflaterFactory(), Return true if the FragmentManager's LayoutInflaterFactory should be used.
android.app.FragmentTransaction,"abstract FragmentTransaction add(Fragment fragment, String tag)"," Calls add(int, Fragment, String) with a 0 containerViewId."
android.app.FragmentTransaction,"abstract FragmentTransaction add(int containerViewId, Fragment fragment)"," Calls add(int, Fragment, String) with a null tag."
android.app.FragmentTransaction,"abstract FragmentTransaction add(int containerViewId, Fragment fragment, String tag)", Add a fragment to the activity state.
android.app.FragmentTransaction,"abstract FragmentTransaction addSharedElement(View sharedElement, String name)", Used with to map a View from a removed or hidden Fragment to a View from a shown or added Fragment.
android.app.FragmentTransaction,abstract FragmentTransaction addToBackStack(String name), Add this transaction to the back stack.
android.app.FragmentTransaction,abstract FragmentTransaction attach(Fragment fragment), Re-attach a fragment after it had previously been detached from the UI with detach(Fragment).
android.app.FragmentTransaction,abstract int commit(), Schedules a commit of this transaction.
android.app.FragmentTransaction,abstract int commitAllowingStateLoss(), Like commit() but allows the commit to be executed after an activity's state is saved.
android.app.FragmentTransaction,abstract void commitNow(), Commits this transaction synchronously.
android.app.FragmentTransaction,abstract void commitNowAllowingStateLoss(), Like commitNow() but allows the commit to be executed after an activity's state is saved.
android.app.FragmentTransaction,abstract FragmentTransaction detach(Fragment fragment), Detach the given fragment from the UI.
android.app.FragmentTransaction,abstract FragmentTransaction disallowAddToBackStack(), Disallow calls to addToBackStack(String).
android.app.FragmentTransaction,abstract FragmentTransaction hide(Fragment fragment), Hides an existing fragment.
android.app.FragmentTransaction,abstract boolean isAddToBackStackAllowed(), Returns true if this FragmentTransaction is allowed to be added to the back stack.
android.app.FragmentTransaction,abstract boolean isEmpty(),
android.app.FragmentTransaction,abstract FragmentTransaction remove(Fragment fragment), Remove an existing fragment.
android.app.FragmentTransaction,"abstract FragmentTransaction replace(int containerViewId, Fragment fragment, String tag)", Replace an existing fragment that was added to a container.
android.app.FragmentTransaction,"abstract FragmentTransaction replace(int containerViewId, Fragment fragment)"," Calls replace(int, Fragment, String) with a null tag."
android.app.FragmentTransaction,abstract FragmentTransaction runOnCommit(Runnable runnable), Add a Runnable to this transaction that will be run after this transaction has been committed.
android.app.FragmentTransaction,abstract FragmentTransaction setBreadCrumbShortTitle(int res)," Set the short title to show as a bread crumb when this transaction is on the back stack, as used by FragmentBreadCrumbs."
android.app.FragmentTransaction,abstract FragmentTransaction setBreadCrumbShortTitle(CharSequence text)," Like setBreadCrumbShortTitle(int) but taking a raw string; this method is not recommended, as the string can not be changed later if the locale changes."
android.app.FragmentTransaction,abstract FragmentTransaction setBreadCrumbTitle(int res)," Set the full title to show as a bread crumb when this transaction is on the back stack, as used by FragmentBreadCrumbs."
android.app.FragmentTransaction,abstract FragmentTransaction setBreadCrumbTitle(CharSequence text)," Like setBreadCrumbTitle(int) but taking a raw string; this method is not recommended, as the string can not be changed later if the locale changes."
android.app.FragmentTransaction,"abstract FragmentTransaction setCustomAnimations(int enter, int exit, int popEnter, int popExit)", Set specific animation resources to run for the fragments that are entering and exiting in this transaction.
android.app.FragmentTransaction,"abstract FragmentTransaction setCustomAnimations(int enter, int exit)", Set specific animation resources to run for the fragments that are entering and exiting in this transaction.
android.app.FragmentTransaction,abstract FragmentTransaction setPrimaryNavigationFragment(Fragment fragment), Set a currently active fragment in this FragmentManager as the primary navigation fragment.
android.app.FragmentTransaction,abstract FragmentTransaction setReorderingAllowed(boolean reorderingAllowed), Sets whether or not to allow optimizing operations within and across transactions.
android.app.FragmentTransaction,abstract FragmentTransaction setTransition(int transit), Select a standard transition animation for this transaction.
android.app.FragmentTransaction,abstract FragmentTransaction setTransitionStyle(int styleRes), Set a custom style resource that will be used for resolving transit animations.
android.app.FragmentTransaction,abstract FragmentTransaction show(Fragment fragment), Shows a previously hidden fragment.
android.app.Notification.Action.Builder,Notification.Action.Builder addExtras(Bundle extras), Merge additional metadata into this builder.
android.app.Notification.Action.Builder,Notification.Action.Builder addRemoteInput(RemoteInput remoteInput), Add an input to be collected from the user when this action is sent.
android.app.Notification.Action.Builder,Notification.Action build(), Combine all of the options that have been set and return a new Notification.Action object.
android.app.Notification.Action.Builder,Notification.Action.Builder extend(Notification.Action.Extender extender), Apply an extender to this action builder.
android.app.Notification.Action.Builder,Bundle getExtras(), Get the metadata Bundle used by this Builder.
android.app.Notification.Action.Builder,Notification.Action.Builder setAllowGeneratedReplies(boolean allowGeneratedReplies), Set whether the platform should automatically generate possible replies to add to getChoices().
android.app.Notification.Action.Builder,Notification.Action.Builder setSemanticAction(int semanticAction), Sets the SemanticAction for this Notification.Action.
android.app.Notification.Action.Extender,abstract Notification.Action.Builder extend(Notification.Action.Builder builder), Apply this extender to a notification action builder.
android.app.Notification.Action,Notification.Action clone(), Creates and returns a copy of this object.
android.app.Notification.Action,int describeContents(), Describe the kinds of special objects contained in this Parcelable instance's marshaled representation.
android.app.Notification.Action,boolean getAllowGeneratedReplies(), Return whether the platform should automatically generate possible replies for this Notification.Action
android.app.Notification.Action,RemoteInput[] getDataOnlyRemoteInputs(), Get the list of inputs to be collected from the user that ONLY accept data when this action is sent.
android.app.Notification.Action,Bundle getExtras(), Get additional metadata carried around with this Action.
android.app.Notification.Action,Icon getIcon(), Return an icon representing the action.
android.app.Notification.Action,RemoteInput[] getRemoteInputs(), Get the list of inputs to be collected from the user when this action is sent.
android.app.Notification.Action,int getSemanticAction(), Returns the SemanticAction associated with this Notification.Action.
android.app.Notification.Action,"void writeToParcel(Parcel out, int flags)", Flatten this object in to a Parcel.
android.app.Notification.Action.WearableExtender,Notification.Action.WearableExtender clone(), Creates and returns a copy of this object.
android.app.Notification.Action.WearableExtender,Notification.Action.Builder extend(Notification.Action.Builder builder), Apply wearable extensions to a notification action that is being built.
android.app.Notification.Action.WearableExtender,CharSequence getCancelLabel(), Get the label to display to cancel the action.
android.app.Notification.Action.WearableExtender,CharSequence getConfirmLabel(), Get the label to display to confirm that the action should be executed.
android.app.Notification.Action.WearableExtender,boolean getHintDisplayActionInline(), Get a hint that this Action should be displayed inline.
android.app.Notification.Action.WearableExtender,boolean getHintLaunchesActivity()," Get a hint that this Action will launch an Activity directly, telling the platform that it can generate the appropriate transitions"
android.app.Notification.Action.WearableExtender,CharSequence getInProgressLabel(), Get the label to display while the wearable is preparing to automatically execute the action.
android.app.Notification.Action.WearableExtender,boolean isAvailableOffline(), Get whether this action is available when the wearable device is not connected to a companion device.
android.app.Notification.Action.WearableExtender,Notification.Action.WearableExtender setAvailableOffline(boolean availableOffline), Set whether this action is available when the wearable device is not connected to a companion device.
android.app.Notification.Action.WearableExtender,Notification.Action.WearableExtender setCancelLabel(CharSequence label), Set a label to display to cancel the action.
android.app.Notification.Action.WearableExtender,Notification.Action.WearableExtender setConfirmLabel(CharSequence label), Set a label to display to confirm that the action should be executed.
android.app.Notification.Action.WearableExtender,Notification.Action.WearableExtender setHintDisplayActionInline(boolean hintDisplayInline), Set a hint that this Action should be displayed inline.
android.app.Notification.Action.WearableExtender,Notification.Action.WearableExtender setHintLaunchesActivity(boolean hintLaunchesActivity)," Set a hint that this Action will launch an Activity directly, telling the platform that it can generate the appropriate transitions."
android.app.Notification.Action.WearableExtender,Notification.Action.WearableExtender setInProgressLabel(CharSequence label), Set a label to display while the wearable is preparing to automatically execute the action.
android.app.Notification.BigPictureStyle,Notification.BigPictureStyle bigLargeIcon(Bitmap b), Override the large icon when the big notification is shown.
android.app.Notification.BigPictureStyle,Notification.BigPictureStyle bigLargeIcon(Icon icon), Override the large icon when the big notification is shown.
android.app.Notification.BigPictureStyle,Notification.BigPictureStyle bigPicture(Bitmap b), Provide the bitmap to be used as the payload for the BigPicture notification.
android.app.Notification.BigPictureStyle,Notification.BigPictureStyle setBigContentTitle(CharSequence title), Overrides ContentTitle in the big form of the template.
android.app.Notification.BigPictureStyle,Notification.BigPictureStyle setSummaryText(CharSequence cs), Set the first line of text after the detail section in the big form of the template.
android.app.Notification.BigTextStyle,Notification.BigTextStyle bigText(CharSequence cs), Provide the longer text to be displayed in the big form of the template in place of the content text.
android.app.Notification.BigTextStyle,Notification.BigTextStyle setBigContentTitle(CharSequence title), Overrides ContentTitle in the big form of the template.
android.app.Notification.BigTextStyle,Notification.BigTextStyle setSummaryText(CharSequence cs), Set the first line of text after the detail section in the big form of the template.
android.app.Notification.Builder,"Notification.Builder addAction(int icon, CharSequence title, PendingIntent intent)", This method was deprecated in API level 23. Use addAction(Action) instead.
android.app.Notification.Builder,Notification.Builder addAction(Notification.Action action), Add an action to this notification.
android.app.Notification.Builder,Notification.Builder addExtras(Bundle extras), Merge additional metadata into this notification.
android.app.Notification.Builder,Notification.Builder addPerson(String uri), This method was deprecated in API level P. use addPerson(Person)
android.app.Notification.Builder,Notification.Builder addPerson(Notification.Person person), Add a person that is relevant to this notification.
android.app.Notification.Builder,Notification build(), Combine all of the options that have been set and return a new Notification object.
android.app.Notification.Builder,RemoteViews createBigContentView(), Construct a RemoteViews for the final big notification layout.
android.app.Notification.Builder,RemoteViews createContentView(), Construct a RemoteViews for the final 1U notification layout.
android.app.Notification.Builder,RemoteViews createHeadsUpContentView(), Construct a RemoteViews for the final heads-up notification layout.
android.app.Notification.Builder,Notification.Builder extend(Notification.Extender extender), Apply an extender to this notification builder.
android.app.Notification.Builder,Bundle getExtras(), Get the current metadata Bundle used by this notification Builder.
android.app.Notification.Builder,Notification getNotification(), This method was deprecated in API level 16. Use build() instead.
android.app.Notification.Builder,"static Notification.Builder recoverBuilder(Context context, Notification n)", Creates a Builder from an existing notification so further changes can be made.
android.app.Notification.Builder,Notification.Builder setActions(Action... actions), Alter the complete list of actions attached to this notification.
android.app.Notification.Builder,Notification.Builder setAutoCancel(boolean autoCancel), Make this notification automatically dismissed when the user touches it.
android.app.Notification.Builder,Notification.Builder setBadgeIconType(int icon), Sets which icon to display as a badge for this notification.
android.app.Notification.Builder,Notification.Builder setCategory(String category), Set the notification category.
android.app.Notification.Builder,Notification.Builder setChannelId(String channelId), Specifies the channel the notification should be delivered on.
android.app.Notification.Builder,Notification.Builder setChronometerCountDown(boolean countDown), Sets the Chronometer to count down instead of counting up.
android.app.Notification.Builder,Notification.Builder setColor(int argb), Sets color.
android.app.Notification.Builder,Notification.Builder setColorized(boolean colorize), Set whether this notification should be colorized.
android.app.Notification.Builder,Notification.Builder setContent(RemoteViews views), Supply a custom RemoteViews to use instead of the platform template.
android.app.Notification.Builder,Notification.Builder setContentInfo(CharSequence info)," This method was deprecated in API level 24. use setSubText(CharSequence) instead to set a text in the header. For legacy apps targeting a version below N this field will still show up, but the subtext will take precedence."
android.app.Notification.Builder,Notification.Builder setContentIntent(PendingIntent intent), Supply a PendingIntent to be sent when the notification is clicked.
android.app.Notification.Builder,Notification.Builder setContentText(CharSequence text), Set the second line of text in the platform notification template.
android.app.Notification.Builder,Notification.Builder setContentTitle(CharSequence title), Set the first line of text in the platform notification template.
android.app.Notification.Builder,Notification.Builder setCustomBigContentView(RemoteViews contentView), Supply custom RemoteViews to use instead of the platform template in the expanded form.
android.app.Notification.Builder,Notification.Builder setCustomContentView(RemoteViews contentView), Supply custom RemoteViews to use instead of the platform template.
android.app.Notification.Builder,Notification.Builder setCustomHeadsUpContentView(RemoteViews contentView), Supply custom RemoteViews to use instead of the platform template in the heads up dialog.
android.app.Notification.Builder,Notification.Builder setDefaults(int defaults)," This method was deprecated in API level 26. use enableVibration(boolean) and enableLights(boolean) and setSound(Uri, AudioAttributes) instead."
android.app.Notification.Builder,Notification.Builder setDeleteIntent(PendingIntent intent), Supply a PendingIntent to send when the notification is cleared explicitly by the user.
android.app.Notification.Builder,Notification.Builder setExtras(Bundle extras), Set metadata for this notification.
android.app.Notification.Builder,"Notification.Builder setFullScreenIntent(PendingIntent intent, boolean highPriority)", An intent to launch instead of posting the notification to the status bar.
android.app.Notification.Builder,Notification.Builder setGroup(String groupKey), Set this notification to be part of a group of notifications sharing the same key.
android.app.Notification.Builder,Notification.Builder setGroupAlertBehavior(int groupAlertBehavior), Sets the group alert behavior for this notification.
android.app.Notification.Builder,Notification.Builder setGroupSummary(boolean isGroupSummary), Set this notification to be the group summary for a group of notifications.
android.app.Notification.Builder,Notification.Builder setLargeIcon(Bitmap b), Add a large icon to the notification content view.
android.app.Notification.Builder,Notification.Builder setLargeIcon(Icon icon), Add a large icon to the notification content view.
android.app.Notification.Builder,"Notification.Builder setLights(int argb, int onMs, int offMs)", This method was deprecated in API level 26. use enableLights(boolean) instead.
android.app.Notification.Builder,Notification.Builder setLocalOnly(boolean localOnly), Set whether or not this notification should not bridge to other devices.
android.app.Notification.Builder,Notification.Builder setNumber(int number), Sets the number of items this notification represents.
android.app.Notification.Builder,Notification.Builder setOngoing(boolean ongoing)," Set whether this is an ""ongoing"" notification."
android.app.Notification.Builder,Notification.Builder setOnlyAlertOnce(boolean onlyAlertOnce)," Set this flag if you would only like the sound, vibrate and ticker to be played if the notification is not already showing."
android.app.Notification.Builder,Notification.Builder setPriority(int pri), This method was deprecated in API level 26. use setImportance(int) instead.
android.app.Notification.Builder,"Notification.Builder setProgress(int max, int progress, boolean indeterminate)", Set the progress this notification represents.
android.app.Notification.Builder,Notification.Builder setPublicVersion(Notification n), Supply a replacement Notification whose contents should be shown in insecure contexts (i.e.
android.app.Notification.Builder,Notification.Builder setRemoteInputHistory(CharSequence[] text), Set the remote input history.
android.app.Notification.Builder,Notification.Builder setSettingsText(CharSequence text), Provides text that will appear as a link to your application's settings.
android.app.Notification.Builder,Notification.Builder setShortcutId(String shortcutId)," If this notification is duplicative of a Launcher shortcut, sets the id of the shortcut, in case the Launcher wants to hide the shortcut."
android.app.Notification.Builder,Notification.Builder setShowWhen(boolean show), Control whether the timestamp set with setWhen is shown in the content view.
android.app.Notification.Builder,"Notification.Builder setSmallIcon(int icon, int level)", A variant of setSmallIcon(int) that takes an additional level parameter for when the icon is a LevelListDrawable.
android.app.Notification.Builder,Notification.Builder setSmallIcon(int icon)," Set the small icon resource, which will be used to represent the notification in the status bar."
android.app.Notification.Builder,Notification.Builder setSmallIcon(Icon icon)," Set the small icon, which will be used to represent the notification in the status bar and content view (unless overriden there by a large icon)."
android.app.Notification.Builder,Notification.Builder setSortKey(String sortKey), Set a sort key that orders this notification among other notifications from the same package.
android.app.Notification.Builder,"Notification.Builder setSound(Uri sound, AudioAttributes audioAttributes)"," This method was deprecated in API level 26. use setSound(Uri, AudioAttributes) instead."
android.app.Notification.Builder,Notification.Builder setSound(Uri sound)," This method was deprecated in API level 26. use setSound(Uri, AudioAttributes) instead."
android.app.Notification.Builder,"Notification.Builder setSound(Uri sound, int streamType)"," This method was deprecated in API level 21. use setSound(Uri, AudioAttributes)."
android.app.Notification.Builder,Notification.Builder setStyle(Notification.Style style), Add a rich notification style to be applied at build time.
android.app.Notification.Builder,Notification.Builder setSubText(CharSequence text), This provides some additional information that is displayed in the notification.
android.app.Notification.Builder,"Notification.Builder setTicker(CharSequence tickerText, RemoteViews views)", Obsolete version of setTicker(CharSequence).
android.app.Notification.Builder,Notification.Builder setTicker(CharSequence tickerText)," Set the ""ticker"" text which is sent to accessibility services."
android.app.Notification.Builder,Notification.Builder setTimeoutAfter(long durationMs)," Specifies a duration in milliseconds after which this notification should be canceled, if it is not already canceled."
android.app.Notification.Builder,Notification.Builder setUsesChronometer(boolean b), Show the when field as a stopwatch.
android.app.Notification.Builder,Notification.Builder setVibrate(long[] pattern), This method was deprecated in API level 26. use setVibrationPattern(long[]) instead.
android.app.Notification.Builder,Notification.Builder setVisibility(int visibility), Specify the value of visibility.
android.app.Notification.Builder,Notification.Builder setWhen(long when), Add a timestamp pertaining to the notification (usually the time the event occurred).
android.app.Notification.CarExtender.Builder,Notification.CarExtender.Builder addMessage(String message), Appends a new unread message to the list of messages for this conversation.
android.app.Notification.CarExtender.Builder,Notification.CarExtender.UnreadConversation build(), Builds a new unread conversation object.
android.app.Notification.CarExtender.Builder,Notification.CarExtender.Builder setLatestTimestamp(long timestamp), Sets the timestamp of the most recent message in an unread conversation.
android.app.Notification.CarExtender.Builder,Notification.CarExtender.Builder setReadPendingIntent(PendingIntent pendingIntent), Sets the pending intent that will be sent once the messages in this notification are read.
android.app.Notification.CarExtender.Builder,"Notification.CarExtender.Builder setReplyAction(PendingIntent pendingIntent, RemoteInput remoteInput)", Sets the pending intent and remote input which will convey the reply to this notification.
android.app.Notification.CarExtender,Notification.Builder extend(Notification.Builder builder), Apply car extensions to a notification that is being built.
android.app.Notification.CarExtender,int getColor(), Gets the accent color.
android.app.Notification.CarExtender,Bitmap getLargeIcon()," Gets the large icon used in this car notification, or null if no icon has been set."
android.app.Notification.CarExtender,Notification.CarExtender.UnreadConversation getUnreadConversation(), Returns the unread conversation conveyed by this notification.
android.app.Notification.CarExtender,Notification.CarExtender setColor(int color), Sets the accent color to use when Android Auto presents the notification.
android.app.Notification.CarExtender,Notification.CarExtender setLargeIcon(Bitmap largeIcon), Sets the large icon of the car notification.
android.app.Notification.CarExtender,Notification.CarExtender setUnreadConversation(Notification.CarExtender.UnreadConversation unreadConversation), Sets the unread conversation in a message notification.
android.app.Notification.CarExtender.UnreadConversation,long getLatestTimestamp(), Gets the timestamp of the conversation.
android.app.Notification.CarExtender.UnreadConversation,String[] getMessages(), Gets the list of messages conveyed by this notification.
android.app.Notification.CarExtender.UnreadConversation,String getParticipant(), Gets the firs participant in the conversation.
android.app.Notification.CarExtender.UnreadConversation,String[] getParticipants(), Gets the participants in the conversation.
android.app.Notification.CarExtender.UnreadConversation,PendingIntent getReadPendingIntent(), Gets the pending intent that Android Auto will send after it reads aloud all messages in this object's message list.
android.app.Notification.CarExtender.UnreadConversation,RemoteInput getRemoteInput()," Gets the remote input that will be used to convey the response to a message list, or null if no such remote input exists."
android.app.Notification.CarExtender.UnreadConversation,PendingIntent getReplyPendingIntent(), Gets the pending intent that will be triggered when the user replies to this notification.
android.app.Notification.DecoratedCustomViewStyle,Notification build(), Calls build() on the Builder this Style is attached to.
android.app.Notification.DecoratedCustomViewStyle,void checkBuilder(),
android.app.Notification.DecoratedCustomViewStyle,RemoteViews getStandardView(int layoutId),
android.app.Notification.DecoratedCustomViewStyle,void internalSetBigContentTitle(CharSequence title), Overrides ContentTitle in the big form of the template.
android.app.Notification.DecoratedCustomViewStyle,void internalSetSummaryText(CharSequence cs), Set the first line of text after the detail section in the big form of the template.
android.app.Notification.DecoratedCustomViewStyle,void setBuilder(Notification.Builder builder),
android.app.Notification.DecoratedCustomViewStyle,Object clone(), Creates and returns a copy of this object.
android.app.Notification.DecoratedCustomViewStyle,boolean equals(Object obj)," Indicates whether some other object is ""equal to"" this one."
android.app.Notification.DecoratedCustomViewStyle,void finalize(), Called by the garbage collector on an object when garbage collection determines that there are no more references to the object.
android.app.Notification.DecoratedCustomViewStyle,final Class<?> getClass(), Returns the runtime class of this Object.
android.app.Notification.DecoratedCustomViewStyle,int hashCode(), Returns a hash code value for the object.
android.app.Notification.DecoratedCustomViewStyle,final void notify(), Wakes up a single thread that is waiting on this object's monitor.
android.app.Notification.DecoratedCustomViewStyle,final void notifyAll(), Wakes up all threads that are waiting on this object's monitor.
android.app.Notification.DecoratedCustomViewStyle,String toString(), Returns a string representation of the object.
android.app.Notification.DecoratedCustomViewStyle,"final void wait(long millis, int nanos)"," Causes the current thread to wait until another thread invokes the notify() method or the notifyAll() method for this object, or some other thread interrupts the current thread, or a certain amount of real time has elapsed."
android.app.Notification.DecoratedCustomViewStyle,final void wait(long millis)," Causes the current thread to wait until either another thread invokes the notify() method or the notifyAll() method for this object, or a specified amount of time has elapsed."
android.app.Notification.DecoratedCustomViewStyle,final void wait(), Causes the current thread to wait until another thread invokes the notify() method or the notifyAll() method for this object.
android.app.Notification.DecoratedMediaCustomViewStyle,Notification.MediaStyle setMediaSession(MediaSession.Token token), Attach a MediaSession.Token to this Notification to provide additional playback information and control to the SystemUI.
android.app.Notification.DecoratedMediaCustomViewStyle,Notification.MediaStyle setShowActionsInCompactView(int... actions), Request up to 3 actions (by index in the order of addition) to be shown in the compact notification view.
android.app.Notification.DecoratedMediaCustomViewStyle,Notification build(), Calls build() on the Builder this Style is attached to.
android.app.Notification.DecoratedMediaCustomViewStyle,void checkBuilder(),
android.app.Notification.DecoratedMediaCustomViewStyle,RemoteViews getStandardView(int layoutId),
android.app.Notification.DecoratedMediaCustomViewStyle,void internalSetBigContentTitle(CharSequence title), Overrides ContentTitle in the big form of the template.
android.app.Notification.DecoratedMediaCustomViewStyle,void internalSetSummaryText(CharSequence cs), Set the first line of text after the detail section in the big form of the template.
android.app.Notification.DecoratedMediaCustomViewStyle,void setBuilder(Notification.Builder builder),
android.app.Notification.DecoratedMediaCustomViewStyle,Object clone(), Creates and returns a copy of this object.
android.app.Notification.DecoratedMediaCustomViewStyle,boolean equals(Object obj)," Indicates whether some other object is ""equal to"" this one."
android.app.Notification.DecoratedMediaCustomViewStyle,void finalize(), Called by the garbage collector on an object when garbage collection determines that there are no more references to the object.
android.app.Notification.DecoratedMediaCustomViewStyle,final Class<?> getClass(), Returns the runtime class of this Object.
android.app.Notification.DecoratedMediaCustomViewStyle,int hashCode(), Returns a hash code value for the object.
android.app.Notification.DecoratedMediaCustomViewStyle,final void notify(), Wakes up a single thread that is waiting on this object's monitor.
android.app.Notification.DecoratedMediaCustomViewStyle,final void notifyAll(), Wakes up all threads that are waiting on this object's monitor.
android.app.Notification.DecoratedMediaCustomViewStyle,String toString(), Returns a string representation of the object.
android.app.Notification.DecoratedMediaCustomViewStyle,"final void wait(long millis, int nanos)"," Causes the current thread to wait until another thread invokes the notify() method or the notifyAll() method for this object, or some other thread interrupts the current thread, or a certain amount of real time has elapsed."
android.app.Notification.DecoratedMediaCustomViewStyle,final void wait(long millis)," Causes the current thread to wait until either another thread invokes the notify() method or the notifyAll() method for this object, or a specified amount of time has elapsed."
android.app.Notification.DecoratedMediaCustomViewStyle,final void wait(), Causes the current thread to wait until another thread invokes the notify() method or the notifyAll() method for this object.
android.app.Notification.Extender,abstract Notification.Builder extend(Notification.Builder builder), Apply this extender to a notification builder.
android.app.Notification.InboxStyle,Notification.InboxStyle addLine(CharSequence cs), Append a line to the digest section of the Inbox notification.
android.app.Notification.InboxStyle,Notification.InboxStyle setBigContentTitle(CharSequence title), Overrides ContentTitle in the big form of the template.
android.app.Notification.InboxStyle,Notification.InboxStyle setSummaryText(CharSequence cs), Set the first line of text after the detail section in the big form of the template.
android.app.Notification.MediaStyle,Notification.MediaStyle setMediaSession(MediaSession.Token token), Attach a MediaSession.Token to this Notification to provide additional playback information and control to the SystemUI.
android.app.Notification.MediaStyle,Notification.MediaStyle setShowActionsInCompactView(int... actions), Request up to 3 actions (by index in the order of addition) to be shown in the compact notification view.
android.app.Notification.MessagingStyle.Message,String getDataMimeType(), Get the MIME type of the data pointed to by the Uri
android.app.Notification.MessagingStyle.Message,Uri getDataUri(), Get the the Uri pointing to the content of the message.
android.app.Notification.MessagingStyle.Message,Bundle getExtras(), Get the extras Bundle for this message.
android.app.Notification.MessagingStyle.Message,CharSequence getSender(), This method was deprecated in API level P. use getSenderPerson()
android.app.Notification.MessagingStyle.Message,Notification.Person getSenderPerson(), Get the sender associated with this message.
android.app.Notification.MessagingStyle.Message,CharSequence getText()," Get the text to be used for this message, or the fallback text if a type and content Uri have been set"
android.app.Notification.MessagingStyle.Message,long getTimestamp(), Get the time at which this message arrived
android.app.Notification.MessagingStyle.Message,"Notification.MessagingStyle.Message setData(String dataMimeType, Uri dataUri)", Sets a binary blob of data and an associated MIME type for a message.
android.app.Notification.MessagingStyle,Notification.MessagingStyle addHistoricMessage(Notification.MessagingStyle.Message message), Adds a Notification.MessagingStyle.Message for historic context in this notification.
android.app.Notification.MessagingStyle,"Notification.MessagingStyle addMessage(CharSequence text, long timestamp, CharSequence sender)"," This method was deprecated in API level P. use addMessage(CharSequence, long, Person)"
android.app.Notification.MessagingStyle,"Notification.MessagingStyle addMessage(CharSequence text, long timestamp, Notification.Person sender)", Adds a message for display by this notification.
android.app.Notification.MessagingStyle,Notification.MessagingStyle addMessage(Notification.MessagingStyle.Message message), Adds a Notification.MessagingStyle.Message for display in this notification.
android.app.Notification.MessagingStyle,CharSequence getConversationTitle(), Return the title to be displayed on this conversation.
android.app.Notification.MessagingStyle,List<Notification.MessagingStyle.Message> getHistoricMessages(), Gets the list of historic Messages in the notification.
android.app.Notification.MessagingStyle,List<Notification.MessagingStyle.Message> getMessages(), Gets the list of Message objects that represent the notification
android.app.Notification.MessagingStyle,Notification.Person getUser(),
android.app.Notification.MessagingStyle,CharSequence getUserDisplayName(), This method was deprecated in API level P. use getUser() instead
android.app.Notification.MessagingStyle,boolean isGroupConversation()," Returns true if this notification represents a group conversation, otherwise false."
android.app.Notification.MessagingStyle,Notification.MessagingStyle setConversationTitle(CharSequence conversationTitle), Sets the title to be displayed on this conversation.
android.app.Notification.MessagingStyle,Notification.MessagingStyle setGroupConversation(boolean isGroupConversation), Sets whether this conversation notification represents a group.
android.app.Notification.Person,int describeContents(), Describe the kinds of special objects contained in this Parcelable instance's marshaled representation.
android.app.Notification.Person,Icon getIcon(),
android.app.Notification.Person,String getKey(),
android.app.Notification.Person,CharSequence getName(),
android.app.Notification.Person,String getUri(),
android.app.Notification.Person,Notification.Person setIcon(Icon icon), Add an icon for this person.
android.app.Notification.Person,Notification.Person setKey(String key), Add a key to this person in order to uniquely identify it.
android.app.Notification.Person,Notification.Person setName(CharSequence name), Give this person a name.
android.app.Notification.Person,Notification.Person setUri(String uri), Set a URI associated with this person.
android.app.Notification.Person,"void writeToParcel(Parcel dest, int flags)", Flatten this object in to a Parcel.
android.app.Notification.Style,Notification build(), Calls build() on the Builder this Style is attached to.
android.app.Notification.Style,void setBuilder(Notification.Builder builder),
android.app.Notification,Notification clone(), Creates and returns a copy of this object.
android.app.Notification,int describeContents(), Describe the kinds of special objects contained in this Parcelable instance's marshaled representation.
android.app.Notification,int getBadgeIconType(), Returns what icon should be shown for this notification if it is being displayed in a Launcher that supports badging.
android.app.Notification,String getChannelId(), Returns the id of the channel this notification posts to.
android.app.Notification,String getGroup(), Get the key used to group this notification into a cluster or stack with other notifications on devices which support such rendering.
android.app.Notification,int getGroupAlertBehavior(), Returns which type of notifications in a group are responsible for audibly alerting the user.
android.app.Notification,Icon getLargeIcon(), The large icon shown in this notification's content view.
android.app.Notification,CharSequence getSettingsText(), Returns the settings text provided to setSettingsText(CharSequence).
android.app.Notification,String getShortcutId()," Returns the id that this notification supersedes, if any."
android.app.Notification,Icon getSmallIcon(), The small icon representing this notification in the status bar and content view.
android.app.Notification,String getSortKey(), Get a sort key that orders this notification among other notifications from the same package.
android.app.Notification,long getTimeoutAfter()," Returns the duration from posting after which this notification should be canceled by the system, if it's not canceled already."
android.app.Notification,String toString(), Returns a string representation of the object.
android.app.Notification,"void writeToParcel(Parcel parcel, int flags)", Flatten this notification into a parcel.
android.app.Notification.WearableExtender,Notification.WearableExtender addAction(Notification.Action action), Add a wearable action to this notification.
android.app.Notification.WearableExtender,Notification.WearableExtender addActions(List<Notification.Action> actions), Adds wearable actions to this notification.
android.app.Notification.WearableExtender,Notification.WearableExtender addPage(Notification page), Add an additional page of content to display with this notification.
android.app.Notification.WearableExtender,Notification.WearableExtender addPages(List<Notification> pages), Add additional pages of content to display with this notification.
android.app.Notification.WearableExtender,Notification.WearableExtender clearActions(), Clear all wearable actions present on this builder.
android.app.Notification.WearableExtender,Notification.WearableExtender clearPages(), Clear all additional pages present on this builder.
android.app.Notification.WearableExtender,Notification.WearableExtender clone(), Creates and returns a copy of this object.
android.app.Notification.WearableExtender,Notification.Builder extend(Notification.Builder builder), Apply wearable extensions to a notification that is being built.
android.app.Notification.WearableExtender,List<Notification.Action> getActions(), Get the wearable actions present on this notification.
android.app.Notification.WearableExtender,Bitmap getBackground(), Get a background image to be displayed behind the notification content.
android.app.Notification.WearableExtender,String getBridgeTag(), Returns the bridge tag of the notification.
android.app.Notification.WearableExtender,int getContentAction()," Get the index of the notification action, if any, that was specified as being clickable with the content of this notification."
android.app.Notification.WearableExtender,int getContentIcon(), Get an icon that goes with the content of this notification.
android.app.Notification.WearableExtender,int getContentIconGravity(), Get the gravity that the content icon should have within the notification display.
android.app.Notification.WearableExtender,boolean getContentIntentAvailableOffline(), Get whether the content intent is available when the wearable device is not connected to a companion device.
android.app.Notification.WearableExtender,int getCustomContentHeight(), Get the custom height in pixels for the display of this notification's content.
android.app.Notification.WearableExtender,int getCustomSizePreset()," Get the custom size preset for the display of this notification out of the available presets found in Notification.WearableExtender, e.g."
android.app.Notification.WearableExtender,String getDismissalId(), Returns the dismissal id of the notification.
android.app.Notification.WearableExtender,PendingIntent getDisplayIntent(), Get the intent to launch inside of an activity view when displaying this notification.
android.app.Notification.WearableExtender,int getGravity(), Get the gravity that this notification should have within the available viewport space.
android.app.Notification.WearableExtender,boolean getHintAmbientBigPicture()," Get a hint that this notification's Notification.BigPictureStyle (if present) should be converted to low-bit and displayed in ambient mode, especially useful for barcodes and qr codes, as well as other simple black-and-white tickets."
android.app.Notification.WearableExtender,boolean getHintAvoidBackgroundClipping()," Get a hint that this notification's background should not be clipped if possible, and should instead be resized to fully display on the screen, retaining the aspect ratio of the image."
android.app.Notification.WearableExtender,boolean getHintContentIntentLaunchesActivity()," Get a hint that this notification's content intent will launch an Activity directly, telling the platform that it can generate the appropriate transitions"
android.app.Notification.WearableExtender,boolean getHintHideIcon(), Get a hint that this notification's icon should not be displayed.
android.app.Notification.WearableExtender,int getHintScreenTimeout()," Get the duration, in milliseconds, that the screen should remain on for when this notification is displayed."
android.app.Notification.WearableExtender,boolean getHintShowBackgroundOnly()," Get a visual hint that only the background image of this notification should be displayed, and other semantic content should be hidden."
android.app.Notification.WearableExtender,List<Notification> getPages(), Get the array of additional pages of content for displaying this notification.
android.app.Notification.WearableExtender,boolean getStartScrollBottom(), Get whether the scrolling position for the contents of this notification should start at the bottom of the contents instead of the top when the contents are too long to display within the screen.
android.app.Notification.WearableExtender,Notification.WearableExtender setBackground(Bitmap background), Set a background image to be displayed behind the notification content.
android.app.Notification.WearableExtender,Notification.WearableExtender setBridgeTag(String bridgeTag), Sets a bridge tag for this notification.
android.app.Notification.WearableExtender,Notification.WearableExtender setContentAction(int actionIndex), Set an action from this notification's actions to be clickable with the content of this notification.
android.app.Notification.WearableExtender,Notification.WearableExtender setContentIcon(int icon), Set an icon that goes with the content of this notification.
android.app.Notification.WearableExtender,Notification.WearableExtender setContentIconGravity(int contentIconGravity), Set the gravity that the content icon should have within the notification display.
android.app.Notification.WearableExtender,Notification.WearableExtender setContentIntentAvailableOffline(boolean contentIntentAvailableOffline), Set whether the content intent is available when the wearable device is not connected to a companion device.
android.app.Notification.WearableExtender,Notification.WearableExtender setCustomContentHeight(int height), Set the custom height in pixels for the display of this notification's content.
android.app.Notification.WearableExtender,Notification.WearableExtender setCustomSizePreset(int sizePreset)," Set the custom size preset for the display of this notification out of the available presets found in Notification.WearableExtender, e.g."
android.app.Notification.WearableExtender,Notification.WearableExtender setDismissalId(String dismissalId), Sets the dismissal id for this notification.
android.app.Notification.WearableExtender,Notification.WearableExtender setDisplayIntent(PendingIntent intent), Set an intent to launch inside of an activity view when displaying this notification.
android.app.Notification.WearableExtender,Notification.WearableExtender setGravity(int gravity), Set the gravity that this notification should have within the available viewport space.
android.app.Notification.WearableExtender,Notification.WearableExtender setHintAmbientBigPicture(boolean hintAmbientBigPicture)," Set a hint that this notification's Notification.BigPictureStyle (if present) should be converted to low-bit and displayed in ambient mode, especially useful for barcodes and qr codes, as well as other simple black-and-white tickets."
android.app.Notification.WearableExtender,Notification.WearableExtender setHintAvoidBackgroundClipping(boolean hintAvoidBackgroundClipping)," Set a hint that this notification's background should not be clipped if possible, and should instead be resized to fully display on the screen, retaining the aspect ratio of the image."
android.app.Notification.WearableExtender,Notification.WearableExtender setHintContentIntentLaunchesActivity(boolean hintContentIntentLaunchesActivity)," Set a hint that this notification's content intent will launch an Activity directly, telling the platform that it can generate the appropriate transitions."
android.app.Notification.WearableExtender,Notification.WearableExtender setHintHideIcon(boolean hintHideIcon), Set a hint that this notification's icon should not be displayed.
android.app.Notification.WearableExtender,Notification.WearableExtender setHintScreenTimeout(int timeout), Set a hint that the screen should remain on for at least this duration when this notification is displayed on the screen.
android.app.Notification.WearableExtender,Notification.WearableExtender setHintShowBackgroundOnly(boolean hintShowBackgroundOnly)," Set a visual hint that only the background image of this notification should be displayed, and other semantic content should be hidden."
android.app.Notification.WearableExtender,Notification.WearableExtender setStartScrollBottom(boolean startScrollBottom), Set whether the scrolling position for the contents of this notification should start at the bottom of the contents instead of the top when the contents are too long to display within the screen.
android.app.NotificationChannel,boolean canBypassDnd(), Whether or not notifications posted to this channel can bypass the Do Not Disturb INTERRUPTION_FILTER_PRIORITY mode.
android.app.NotificationChannel,boolean canShowBadge(), Returns whether notifications posted to this channel can appear as badges in a Launcher application.
android.app.NotificationChannel,int describeContents(), Describe the kinds of special objects contained in this Parcelable instance's marshaled representation.
android.app.NotificationChannel,void enableLights(boolean lights)," Sets whether notifications posted to this channel should display notification lights, on devices that support that feature."
android.app.NotificationChannel,void enableVibration(boolean vibration), Sets whether notification posted to this channel should vibrate.
android.app.NotificationChannel,boolean equals(Object o)," Indicates whether some other object is ""equal to"" this one."
android.app.NotificationChannel,AudioAttributes getAudioAttributes(), Returns the audio attributes for sound played by notifications posted to this channel.
android.app.NotificationChannel,String getDescription(), Returns the user visible description of this channel.
android.app.NotificationChannel,String getGroup(), Returns what group this channel belongs to.
android.app.NotificationChannel,String getId(), Returns the id of this channel.
android.app.NotificationChannel,int getImportance(), Returns the user specified importance e.g.
android.app.NotificationChannel,int getLightColor(), Returns the notification light color for notifications posted to this channel.
android.app.NotificationChannel,int getLockscreenVisibility(), Returns whether or not notifications posted to this channel are shown on the lockscreen in full or redacted form.
android.app.NotificationChannel,CharSequence getName(), Returns the user visible name of this channel.
android.app.NotificationChannel,Uri getSound(), Returns the notification sound for this channel.
android.app.NotificationChannel,long[] getVibrationPattern(), Returns the vibration pattern for notifications posted to this channel.
android.app.NotificationChannel,int hashCode(), Returns a hash code value for the object.
android.app.NotificationChannel,void setBypassDnd(boolean bypassDnd), Sets whether or not notifications posted to this channel can interrupt the user in INTERRUPTION_FILTER_PRIORITY mode.
android.app.NotificationChannel,void setDescription(String description), Sets the user visible description of this channel.
android.app.NotificationChannel,void setGroup(String groupId), Sets what group this channel belongs to.
android.app.NotificationChannel,void setImportance(int importance), Sets the level of interruption of this notification channel.
android.app.NotificationChannel,void setLightColor(int argb)," Sets the notification light color for notifications posted to this channel, if lights are enabled on this channel and the device supports that feature."
android.app.NotificationChannel,void setLockscreenVisibility(int lockscreenVisibility)," Sets whether notifications posted to this channel appear on the lockscreen or not, and if so, whether they appear in a redacted form."
android.app.NotificationChannel,void setName(CharSequence name), Sets the user visible name of this channel.
android.app.NotificationChannel,void setShowBadge(boolean showBadge), Sets whether notifications posted to this channel can appear as application icon badges in a Launcher.
android.app.NotificationChannel,"void setSound(Uri sound, AudioAttributes audioAttributes)", Sets the sound that should be played for notifications posted to this channel and its audio attributes.
android.app.NotificationChannel,void setVibrationPattern(long[] vibrationPattern), Sets the vibration pattern for notifications posted to this channel.
android.app.NotificationChannel,boolean shouldShowLights(), Returns whether notifications posted to this channel trigger notification lights.
android.app.NotificationChannel,boolean shouldVibrate(), Returns whether notifications posted to this channel always vibrate.
android.app.NotificationChannel,String toString(), Returns a string representation of the object.
android.app.NotificationChannel,"void writeToParcel(Parcel dest, int flags)", Flatten this object in to a Parcel.
android.app.NotificationChannelGroup,NotificationChannelGroup clone(), Creates and returns a copy of this object.
android.app.NotificationChannelGroup,int describeContents(), Describe the kinds of special objects contained in this Parcelable instance's marshaled representation.
android.app.NotificationChannelGroup,boolean equals(Object o)," Indicates whether some other object is ""equal to"" this one."
android.app.NotificationChannelGroup,List<NotificationChannel> getChannels(), Returns the list of channels that belong to this group
android.app.NotificationChannelGroup,String getDescription(), Returns the user visible description of this group.
android.app.NotificationChannelGroup,String getId(), Returns the id of this group.
android.app.NotificationChannelGroup,CharSequence getName(), Returns the user visible name of this group.
android.app.NotificationChannelGroup,int hashCode(), Returns a hash code value for the object.
android.app.NotificationChannelGroup,boolean isBlocked(), Returns whether or not notifications posted to channels belonging to this group are blocked.
android.app.NotificationChannelGroup,void setDescription(String description), Sets the user visible description of this group.
android.app.NotificationChannelGroup,String toString(), Returns a string representation of the object.
android.app.NotificationChannelGroup,"void writeToParcel(Parcel dest, int flags)", Flatten this object in to a Parcel.
android.media.AsyncPlayer,"void play(Context context, Uri uri, boolean looping, int stream)"," This method was deprecated in API level 23. use play(Context, Uri, boolean, AudioAttributes) instead"
android.media.AsyncPlayer,"void play(Context context, Uri uri, boolean looping, AudioAttributes attributes)", Start playing the sound.
android.media.AsyncPlayer,void stop(), Stop a previously played sound.
android.media.AudioAttributes.Builder,AudioAttributes build(), Combines all of the attributes that have been set and return a new AudioAttributes object.
android.media.AudioAttributes.Builder,AudioAttributes.Builder setContentType(int contentType)," Sets the attribute describing the content type of the audio signal, such as speech, or music."
android.media.AudioAttributes.Builder,AudioAttributes.Builder setFlags(int flags), Sets the combination of flags.
android.media.AudioAttributes.Builder,AudioAttributes.Builder setLegacyStreamType(int streamType), Sets attributes as inferred from the legacy stream types.
android.media.AudioAttributes.Builder,AudioAttributes.Builder setUsage(int usage)," Sets the attribute describing what is the intended use of the the audio signal, such as alarm or ringtone."
android.media.AudioAttributes,int describeContents(), Describe the kinds of special objects contained in this Parcelable instance's marshaled representation.
android.media.AudioAttributes,boolean equals(Object o)," Indicates whether some other object is ""equal to"" this one."
android.media.AudioAttributes,int getContentType(), Return the content type.
android.media.AudioAttributes,int getFlags(), Return the flags.
android.media.AudioAttributes,int getUsage(), Return the usage.
android.media.AudioAttributes,int getVolumeControlStream(), Returns the stream type matching this AudioAttributes instance for volume control.
android.media.AudioAttributes,int hashCode(), Returns a hash code value for the object.
android.media.AudioAttributes,String toString(), Returns a string representation of the object.
android.media.AudioAttributes,"void writeToParcel(Parcel dest, int flags)", Flatten this object in to a Parcel.
android.media.AudioDeviceCallback,void onAudioDevicesAdded(AudioDeviceInfo[] addedDevices), Called by the AudioManager to indicate that one or more audio devices have been connected.
android.media.AudioDeviceCallback,void onAudioDevicesRemoved(AudioDeviceInfo[] removedDevices), Called by the AudioManager to indicate that one or more audio devices have been disconnected.
android.media.AudioDeviceInfo,boolean equals(Object o)," Indicates whether some other object is ""equal to"" this one."
android.media.AudioDeviceInfo,int[] getChannelCounts(),
android.media.AudioDeviceInfo,int[] getChannelIndexMasks(),
android.media.AudioDeviceInfo,int[] getChannelMasks(),
android.media.AudioDeviceInfo,int[] getEncodings(),
android.media.AudioDeviceInfo,int getId(),
android.media.AudioDeviceInfo,CharSequence getProductName(),
android.media.AudioDeviceInfo,int[] getSampleRates(),
android.media.AudioDeviceInfo,int getType(),
android.media.AudioDeviceInfo,int hashCode(), Returns a hash code value for the object.
android.media.AudioDeviceInfo,boolean isSink(),
android.media.AudioDeviceInfo,boolean isSource(),
android.media.AudioFocusRequest.Builder,AudioFocusRequest build(), Builds a new AudioFocusRequest instance combining all the information gathered by this Builder's configuration methods.
android.media.AudioFocusRequest.Builder,AudioFocusRequest.Builder setAcceptsDelayedFocusGain(boolean acceptsDelayedFocusGain), Marks this focus request as compatible with delayed focus.
android.media.AudioFocusRequest.Builder,AudioFocusRequest.Builder setAudioAttributes(AudioAttributes attributes)," Sets the AudioAttributes to be associated with the focus request, and which describe the use case for which focus is requested."
android.media.AudioFocusRequest.Builder,AudioFocusRequest.Builder setFocusGain(int focusGain), Sets the type of focus gain that will be requested.
android.media.AudioFocusRequest.Builder,AudioFocusRequest.Builder setForceDucking(boolean forceDucking)," Marks this focus request as forcing ducking, regardless of the conditions in which the system would or would not enforce ducking."
android.media.AudioFocusRequest.Builder,AudioFocusRequest.Builder setOnAudioFocusChangeListener(AudioManager.OnAudioFocusChangeListener listener)," Sets the listener called when audio focus changes after being requested with requestAudioFocus(AudioFocusRequest), and until being abandoned with abandonAudioFocusRequest(AudioFocusRequest)."
android.media.AudioFocusRequest.Builder,"AudioFocusRequest.Builder setOnAudioFocusChangeListener(AudioManager.OnAudioFocusChangeListener listener, Handler handler)"," Sets the listener called when audio focus changes after being requested with requestAudioFocus(AudioFocusRequest), and until being abandoned with abandonAudioFocusRequest(AudioFocusRequest)."
android.media.AudioFocusRequest.Builder,AudioFocusRequest.Builder setWillPauseWhenDucked(boolean pauseOnDuck), Declare the intended behavior of the application with regards to audio ducking.
android.media.AudioFocusRequest,boolean acceptsDelayedFocusGain(), Returns whether the application that would use this AudioFocusRequest supports a focus gain granted after a temporary request failure.
android.media.AudioFocusRequest,AudioAttributes getAudioAttributes()," Returns the AudioAttributes set for this AudioFocusRequest, or the default attributes if none were set."
android.media.AudioFocusRequest,int getFocusGain(), Returns the type of audio focus request configured for this AudioFocusRequest.
android.media.AudioFocusRequest,boolean willPauseWhenDucked(), Returns whether the application that would use this AudioFocusRequest would pause when it is requested to duck.
android.media.AudioFormat.Builder,AudioFormat build(), Combines all of the format characteristics that have been set and return a new AudioFormat object.
android.media.AudioFormat.Builder,AudioFormat.Builder setChannelIndexMask(int channelIndexMask), Sets the channel index mask.
android.media.AudioFormat.Builder,AudioFormat.Builder setChannelMask(int channelMask), Sets the channel position mask.
android.media.AudioFormat.Builder,AudioFormat.Builder setEncoding(int encoding), Sets the data encoding format.
android.media.AudioFormat.Builder,AudioFormat.Builder setSampleRate(int sampleRate), Sets the sample rate.
android.media.AudioFormat,int describeContents(), Describe the kinds of special objects contained in this Parcelable instance's marshaled representation.
android.media.AudioFormat,boolean equals(Object o)," Indicates whether some other object is ""equal to"" this one."
android.media.AudioFormat,int getChannelCount(), Return the channel count.
android.media.AudioFormat,int getChannelIndexMask(), Return the channel index mask.
android.media.AudioFormat,int getChannelMask(), Return the channel mask.
android.media.AudioFormat,int getEncoding(), Return the encoding.
android.media.AudioFormat,int getSampleRate(), Return the sample rate.
android.media.AudioFormat,int hashCode(), Returns a hash code value for the object.
android.media.AudioFormat,String toString(), Returns a string representation of the object.
android.media.AudioFormat,"void writeToParcel(Parcel dest, int flags)", Flatten this object in to a Parcel.
android.media.audiofx.AcousticEchoCanceler,static AcousticEchoCanceler create(int audioSession), Creates an AcousticEchoCanceler and attaches it to the AudioRecord on the audio session specified.
android.media.audiofx.AcousticEchoCanceler,static boolean isAvailable(), Checks if the device implements acoustic echo cancellation.
android.media.audiofx.AudioEffect.Descriptor,Object clone(), Creates and returns a copy of this object.
android.media.audiofx.AudioEffect.Descriptor,boolean equals(Object obj)," Indicates whether some other object is ""equal to"" this one."
android.media.audiofx.AudioEffect.Descriptor,void finalize(), Called by the garbage collector on an object when garbage collection determines that there are no more references to the object.
android.media.audiofx.AudioEffect.Descriptor,final Class<?> getClass(), Returns the runtime class of this Object.
android.media.audiofx.AudioEffect.Descriptor,int hashCode(), Returns a hash code value for the object.
android.media.audiofx.AudioEffect.Descriptor,final void notify(), Wakes up a single thread that is waiting on this object's monitor.
android.media.audiofx.AudioEffect.Descriptor,final void notifyAll(), Wakes up all threads that are waiting on this object's monitor.
android.media.audiofx.AudioEffect.Descriptor,String toString(), Returns a string representation of the object.
android.media.audiofx.AudioEffect.Descriptor,"final void wait(long millis, int nanos)"," Causes the current thread to wait until another thread invokes the notify() method or the notifyAll() method for this object, or some other thread interrupts the current thread, or a certain amount of real time has elapsed."
android.media.audiofx.AudioEffect.Descriptor,final void wait(long millis)," Causes the current thread to wait until either another thread invokes the notify() method or the notifyAll() method for this object, or a specified amount of time has elapsed."
android.media.audiofx.AudioEffect.Descriptor,final void wait(), Causes the current thread to wait until another thread invokes the notify() method or the notifyAll() method for this object.
android.media.audiofx.AudioEffect.OnControlStatusChangeListener,"abstract void onControlStatusChange(AudioEffect effect, boolean controlGranted)", Called on the listener to notify it that the effect engine control has been taken or returned.
android.media.audiofx.AudioEffect.OnEnableStatusChangeListener,"abstract void onEnableStatusChange(AudioEffect effect, boolean enabled)", Called on the listener to notify it that the effect engine has been enabled or disabled.
android.media.audiofx.AudioEffect,AudioEffect.Descriptor getDescriptor(), Get the effect descriptor.
android.media.audiofx.AudioEffect,boolean getEnabled(), Returns effect enabled state
android.media.audiofx.AudioEffect,int getId(), Returns effect unique identifier.
android.media.audiofx.AudioEffect,boolean hasControl(), Checks if this AudioEffect object is controlling the effect engine.
android.media.audiofx.AudioEffect,static Descriptor[] queryEffects(), Query all effects available on the platform.
android.media.audiofx.AudioEffect,void release(), Releases the native AudioEffect resources.
android.media.audiofx.AudioEffect,void setControlStatusListener(AudioEffect.OnControlStatusChangeListener listener), Sets the listener AudioEffect notifies when the effect engine control is taken or returned.
android.media.audiofx.AudioEffect,void setEnableStatusListener(AudioEffect.OnEnableStatusChangeListener listener), Sets the listener AudioEffect notifies when the effect engine is enabled or disabled.
android.media.audiofx.AudioEffect,int setEnabled(boolean enabled), Enable or disable the effect.
android.media.audiofx.AutomaticGainControl,static AutomaticGainControl create(int audioSession), Creates an AutomaticGainControl and attaches it to the AudioRecord on the audio session specified.
android.media.audiofx.AutomaticGainControl,static boolean isAvailable(), Checks if the device implements automatic gain control.
android.media.audiofx.BassBoost.OnParameterChangeListener,"abstract void onParameterChange(BassBoost effect, int status, int param, short value)", Method called when a parameter value has changed.
android.media.audiofx.BassBoost.Settings,String toString(), Returns a string representation of the object.
android.media.audiofx.BassBoost,BassBoost.Settings getProperties(), Gets the bass boost properties.
android.media.audiofx.BassBoost,short getRoundedStrength(), Gets the current strength of the effect.
android.media.audiofx.BassBoost,boolean getStrengthSupported(), Indicates whether setting strength is supported.
android.media.audiofx.BassBoost,void setParameterListener(BassBoost.OnParameterChangeListener listener), Registers an OnParameterChangeListener interface.
android.media.audiofx.BassBoost,void setProperties(BassBoost.Settings settings), Sets the bass boost properties.
android.media.audiofx.BassBoost,void setStrength(short strength), Sets the strength of the bass boost effect.
android.media.audiofx.EnvironmentalReverb.OnParameterChangeListener,"abstract void onParameterChange(EnvironmentalReverb effect, int status, int param, int value)", Method called when a parameter value has changed.
android.media.audiofx.EnvironmentalReverb.Settings,String toString(), Returns a string representation of the object.
android.media.audiofx.EnvironmentalReverb,short getDecayHFRatio(), Gets the ratio of high frequency decay time (at 5 kHz) relative to low frequencies.
android.media.audiofx.EnvironmentalReverb,int getDecayTime(), Gets the decay time.
android.media.audiofx.EnvironmentalReverb,short getDensity(), Gets the density level.
android.media.audiofx.EnvironmentalReverb,short getDiffusion(), Gets diffusion level.
android.media.audiofx.EnvironmentalReverb,EnvironmentalReverb.Settings getProperties(), Gets the environmental reverb properties.
android.media.audiofx.EnvironmentalReverb,int getReflectionsDelay(), Gets the reflections delay.
android.media.audiofx.EnvironmentalReverb,short getReflectionsLevel(), Gets the volume level of the early reflections.
android.media.audiofx.EnvironmentalReverb,int getReverbDelay(), Gets the reverb delay.
android.media.audiofx.EnvironmentalReverb,short getReverbLevel(), Gets the reverb level.
android.media.audiofx.EnvironmentalReverb,short getRoomHFLevel(), Gets the room HF level.
android.media.audiofx.EnvironmentalReverb,short getRoomLevel(), Gets the master volume level of the environmental reverb effect.
android.media.audiofx.EnvironmentalReverb,void setDecayHFRatio(short decayHFRatio), Sets the ratio of high frequency decay time (at 5 kHz) relative to the decay time at low frequencies.
android.media.audiofx.EnvironmentalReverb,void setDecayTime(int decayTime), Sets the time taken for the level of reverberation to decay by 60 dB.
android.media.audiofx.EnvironmentalReverb,void setDensity(short density), Controls the modal density of the late reverberation decay.
android.media.audiofx.EnvironmentalReverb,void setDiffusion(short diffusion), Sets the echo density in the late reverberation decay.
android.media.audiofx.EnvironmentalReverb,void setParameterListener(EnvironmentalReverb.OnParameterChangeListener listener), Registers an OnParameterChangeListener interface.
android.media.audiofx.EnvironmentalReverb,void setProperties(EnvironmentalReverb.Settings settings), Sets the environmental reverb properties.
android.media.audiofx.EnvironmentalReverb,void setReflectionsDelay(int reflectionsDelay), Sets the delay time for the early reflections.
android.media.audiofx.EnvironmentalReverb,void setReflectionsLevel(short reflectionsLevel), Sets the volume level of the early reflections.
android.media.audiofx.EnvironmentalReverb,void setReverbDelay(int reverbDelay), Sets the time between the first reflection and the reverberation.
android.media.audiofx.EnvironmentalReverb,void setReverbLevel(short reverbLevel), Sets the volume level of the late reverberation.
android.media.audiofx.EnvironmentalReverb,void setRoomHFLevel(short roomHF), Sets the volume level at 5 kHz relative to the volume level at low frequencies of the overall reverb effect.
android.media.audiofx.EnvironmentalReverb,void setRoomLevel(short room), Sets the master volume level of the environmental reverb effect.
android.media.audiofx.Equalizer.OnParameterChangeListener,"abstract void onParameterChange(Equalizer effect, int status, int param1, int param2, int value)", Method called when a parameter value has changed.
android.media.audiofx.Equalizer.Settings,String toString(), Returns a string representation of the object.
android.media.audiofx.Equalizer,short getBand(int frequency), Gets the band that has the most effect on the given frequency.
android.media.audiofx.Equalizer,int[] getBandFreqRange(short band), Gets the frequency range of the given frequency band.
android.media.audiofx.Equalizer,short getBandLevel(short band), Gets the gain set for the given equalizer band.
android.media.audiofx.Equalizer,short[] getBandLevelRange()," Gets the level range for use by setBandLevel(short, short)."
android.media.audiofx.Equalizer,int getCenterFreq(short band), Gets the center frequency of the given band.
android.media.audiofx.Equalizer,short getCurrentPreset(), Gets current preset.
android.media.audiofx.Equalizer,short getNumberOfBands(), Gets the number of frequency bands supported by the Equalizer engine.
android.media.audiofx.Equalizer,short getNumberOfPresets(), Gets the total number of presets the equalizer supports.
android.media.audiofx.Equalizer,String getPresetName(short preset), Gets the preset name based on the index.
android.media.audiofx.Equalizer,Equalizer.Settings getProperties(), Gets the equalizer properties.
android.media.audiofx.Equalizer,"void setBandLevel(short band, short level)", Sets the given equalizer band to the given gain value.
android.media.audiofx.Equalizer,void setParameterListener(Equalizer.OnParameterChangeListener listener), Registers an OnParameterChangeListener interface.
android.media.audiofx.Equalizer,void setProperties(Equalizer.Settings settings), Sets the equalizer properties.
android.media.audiofx.Equalizer,void usePreset(short preset), Sets the equalizer according to the given preset.
android.media.audiofx.LoudnessEnhancer,float getTargetGain(), Return the target gain.
android.media.audiofx.LoudnessEnhancer,void setTargetGain(int gainmB), Set the target gain for the audio effect.
android.media.audiofx.NoiseSuppressor,static NoiseSuppressor create(int audioSession), Creates a NoiseSuppressor and attaches it to the AudioRecord on the audio session specified.
android.media.audiofx.NoiseSuppressor,static boolean isAvailable(), Checks if the device implements noise suppression.
android.media.audiofx.PresetReverb.OnParameterChangeListener,"abstract void onParameterChange(PresetReverb effect, int status, int param, short value)", Method called when a parameter value has changed.
android.media.audiofx.PresetReverb.Settings,String toString(), Returns a string representation of the object.
android.media.audiofx.PresetReverb,short getPreset(), Gets current reverb preset.
android.media.audiofx.PresetReverb,PresetReverb.Settings getProperties(), Gets the preset reverb properties.
android.media.audiofx.PresetReverb,void setParameterListener(PresetReverb.OnParameterChangeListener listener), Registers an OnParameterChangeListener interface.
android.media.audiofx.PresetReverb,void setPreset(short preset), Enables a preset on the reverb.
android.media.audiofx.PresetReverb,void setProperties(PresetReverb.Settings settings), Sets the preset reverb properties.
android.media.audiofx.Virtualizer.OnParameterChangeListener,"abstract void onParameterChange(Virtualizer effect, int status, int param, short value)", Method called when a parameter value has changed.
android.media.audiofx.Virtualizer.Settings,String toString(), Returns a string representation of the object.
android.media.audiofx.Virtualizer,"boolean canVirtualize(int inputChannelMask, int virtualizationMode)", Checks if the combination of a channel mask and virtualization mode is supported by this virtualizer.
android.media.audiofx.Virtualizer,boolean forceVirtualizationMode(int virtualizationMode), Forces the virtualizer effect to use the given processing mode.
android.media.audiofx.Virtualizer,Virtualizer.Settings getProperties(), Gets the virtualizer properties.
android.media.audiofx.Virtualizer,short getRoundedStrength(), Gets the current strength of the effect.
android.media.audiofx.Virtualizer,"boolean getSpeakerAngles(int inputChannelMask, int virtualizationMode, int[] angles)", Queries the virtual speaker angles (azimuth and elevation) for a combination of a channel mask and virtualization mode.
android.media.audiofx.Virtualizer,boolean getStrengthSupported(), Indicates whether setting strength is supported.
android.media.audiofx.Virtualizer,int getVirtualizationMode()," Return the virtualization mode being used, if any."
android.media.audiofx.Virtualizer,void setParameterListener(Virtualizer.OnParameterChangeListener listener), Registers an OnParameterChangeListener interface.
android.media.audiofx.Virtualizer,void setProperties(Virtualizer.Settings settings), Sets the virtualizer properties.
android.media.audiofx.Virtualizer,void setStrength(short strength), Sets the strength of the virtualizer effect.
android.media.audiofx.Visualizer.MeasurementPeakRms,Object clone(), Creates and returns a copy of this object.
android.media.audiofx.Visualizer.MeasurementPeakRms,boolean equals(Object obj)," Indicates whether some other object is ""equal to"" this one."
android.media.audiofx.Visualizer.MeasurementPeakRms,void finalize(), Called by the garbage collector on an object when garbage collection determines that there are no more references to the object.
android.media.audiofx.Visualizer.MeasurementPeakRms,final Class<?> getClass(), Returns the runtime class of this Object.
android.media.audiofx.Visualizer.MeasurementPeakRms,int hashCode(), Returns a hash code value for the object.
android.media.audiofx.Visualizer.MeasurementPeakRms,final void notify(), Wakes up a single thread that is waiting on this object's monitor.
android.media.audiofx.Visualizer.MeasurementPeakRms,final void notifyAll(), Wakes up all threads that are waiting on this object's monitor.
android.media.audiofx.Visualizer.MeasurementPeakRms,String toString(), Returns a string representation of the object.
android.media.audiofx.Visualizer.MeasurementPeakRms,"final void wait(long millis, int nanos)"," Causes the current thread to wait until another thread invokes the notify() method or the notifyAll() method for this object, or some other thread interrupts the current thread, or a certain amount of real time has elapsed."
android.media.audiofx.Visualizer.MeasurementPeakRms,final void wait(long millis)," Causes the current thread to wait until either another thread invokes the notify() method or the notifyAll() method for this object, or a specified amount of time has elapsed."
android.media.audiofx.Visualizer.MeasurementPeakRms,final void wait(), Causes the current thread to wait until another thread invokes the notify() method or the notifyAll() method for this object.
android.media.audiofx.Visualizer.OnDataCaptureListener,"abstract void onFftDataCapture(Visualizer visualizer, byte[] fft, int samplingRate)", Method called when a new frequency capture is available.
android.media.audiofx.Visualizer.OnDataCaptureListener,"abstract void onWaveFormDataCapture(Visualizer visualizer, byte[] waveform, int samplingRate)", Method called when a new waveform capture is available.
android.media.audiofx.Visualizer,int getCaptureSize(), Returns current capture size.
android.media.audiofx.Visualizer,static int[] getCaptureSizeRange(), Returns the capture size range.
android.media.audiofx.Visualizer,boolean getEnabled(), Get current activation state of the visualizer.
android.media.audiofx.Visualizer,int getFft(byte[] fft), Returns a frequency capture of currently playing audio content.
android.media.audiofx.Visualizer,static int getMaxCaptureRate(), Returns the maximum capture rate for the callback capture method.
android.media.audiofx.Visualizer,int getMeasurementMode(), Returns the current measurement modes performed by this audio effect
android.media.audiofx.Visualizer,int getMeasurementPeakRms(Visualizer.MeasurementPeakRms measurement), Retrieves the latest peak and RMS measurement.
android.media.audiofx.Visualizer,int getSamplingRate(), Returns the sampling rate of the captured audio.
android.media.audiofx.Visualizer,int getScalingMode(), Returns the current scaling mode on the captured visualization data.
android.media.audiofx.Visualizer,int getWaveForm(byte[] waveform), Returns a waveform capture of currently playing audio content.
android.media.audiofx.Visualizer,void release(), Releases the native Visualizer resources.
android.media.audiofx.Visualizer,int setCaptureSize(int size)," Sets the capture size, i.e."
android.media.audiofx.Visualizer,"int setDataCaptureListener(Visualizer.OnDataCaptureListener listener, int rate, boolean waveform, boolean fft)", Registers an OnDataCaptureListener interface and specifies the rate at which the capture should be updated as well as the type of capture requested.
android.media.audiofx.Visualizer,int setEnabled(boolean enabled), Enable or disable the visualization engine.
android.media.audiofx.Visualizer,int setMeasurementMode(int mode), Sets the combination of measurement modes to be performed by this audio effect.
android.media.audiofx.Visualizer,int setScalingMode(int mode), Set the type of scaling applied on the captured visualization data.
android.media.AudioManager.AudioPlaybackCallback,void onPlaybackConfigChanged(List<AudioPlaybackConfiguration> configs), Called whenever the playback activity and configuration has changed.
android.media.AudioManager.AudioRecordingCallback,void onRecordingConfigChanged(List<AudioRecordingConfiguration> configs), Called whenever the device recording configuration has changed.
android.media.AudioManager.OnAudioFocusChangeListener,abstract void onAudioFocusChange(int focusChange), Called on the listener to notify it the audio focus for this listener has been changed.
android.media.AudioManager,int abandonAudioFocus(AudioManager.OnAudioFocusChangeListener l), This method was deprecated in API level 26. use abandonAudioFocusRequest(AudioFocusRequest)
android.media.AudioManager,int abandonAudioFocusRequest(AudioFocusRequest focusRequest), Abandon audio focus.
android.media.AudioManager,"void adjustStreamVolume(int streamType, int direction, int flags)", Adjusts the volume of a particular stream by one step in a direction.
android.media.AudioManager,"void adjustSuggestedStreamVolume(int direction, int suggestedStreamType, int flags)"," Adjusts the volume of the most relevant stream, or the given fallback stream."
android.media.AudioManager,"void adjustVolume(int direction, int flags)", Adjusts the volume of the most relevant stream.
android.media.AudioManager,void dispatchMediaKeyEvent(KeyEvent keyEvent), Sends a simulated key event for a media button.
android.media.AudioManager,int generateAudioSessionId(), Return a new audio session identifier not associated with any player or effect.
android.media.AudioManager,List<AudioPlaybackConfiguration> getActivePlaybackConfigurations(), Returns the current active audio playback configurations of the device
android.media.AudioManager,List<AudioRecordingConfiguration> getActiveRecordingConfigurations(), Returns the current active audio recording configurations of the device.
android.media.AudioManager,AudioDeviceInfo[] getDevices(int flags), Returns an array of AudioDeviceInfo objects corresponding to the audio devices currently connected to the system and meeting the criteria specified in the flags parameter.
android.media.AudioManager,List<MicrophoneInfo> getMicrophones(), Returns a list of MicrophoneInfo that corresponds to the characteristics of all available microphones.
android.media.AudioManager,int getMode(), Returns the current audio mode.
android.media.AudioManager,String getParameters(String keys), Gets a variable number of parameter values from audio hardware.
android.media.AudioManager,String getProperty(String key), Returns the value of the property with the specified key.
android.media.AudioManager,int getRingerMode(), Returns the current ringtone mode.
android.media.AudioManager,int getRouting(int mode)," This method was deprecated in API level 4. Do not query audio routing directly, use isSpeakerphoneOn(), isBluetoothScoOn(), isBluetoothA2dpOn() and isWiredHeadsetOn() methods instead."
android.media.AudioManager,int getStreamMaxVolume(int streamType), Returns the maximum volume index for a particular stream.
android.media.AudioManager,int getStreamMinVolume(int streamType), Returns the minimum volume index for a particular stream.
android.media.AudioManager,int getStreamVolume(int streamType), Returns the current volume index for a particular stream.
android.media.AudioManager,"float getStreamVolumeDb(int streamType, int index, int deviceType)"," Returns the volume in dB (decibel) for the given stream type at the given volume index, on the given type of audio output device."
android.media.AudioManager,int getVibrateSetting(int vibrateType), This method was deprecated in API level 16. Applications should maintain their own vibrate policy based on current ringer mode that can be queried via getRingerMode().
android.media.AudioManager,boolean isBluetoothA2dpOn(), This method was deprecated in API level 26. Use getDevices(int) instead to list available audio devices.
android.media.AudioManager,boolean isBluetoothScoAvailableOffCall(), Indicates if current platform supports use of SCO for off call use cases.
android.media.AudioManager,boolean isBluetoothScoOn(), Checks whether communications use Bluetooth SCO.
android.media.AudioManager,boolean isMicrophoneMute(), Checks whether the microphone mute is on or off.
android.media.AudioManager,boolean isMusicActive(), Checks whether any music is active.
android.media.AudioManager,boolean isOffloadedPlaybackSupported(AudioFormat format), Returns whether offloaded playback of an audio format is supported on the device.
android.media.AudioManager,boolean isSpeakerphoneOn(), Checks whether the speakerphone is on or off.
android.media.AudioManager,boolean isStreamMute(int streamType), Returns the current mute state for a particular stream.
android.media.AudioManager,boolean isVolumeFixed(), Indicates if the device implements a fixed volume policy.
android.media.AudioManager,boolean isWiredHeadsetOn(), This method was deprecated in API level 14. Use getDevices(int) instead to list available audio devices.
android.media.AudioManager,void loadSoundEffects(), Load Sound effects.
android.media.AudioManager,void playSoundEffect(int effectType)," Plays a sound effect (Key clicks, lid open/close...)"
android.media.AudioManager,"void playSoundEffect(int effectType, float volume)"," Plays a sound effect (Key clicks, lid open/close...)"
android.media.AudioManager,"void registerAudioDeviceCallback(AudioDeviceCallback callback, Handler handler)", Registers an AudioDeviceCallback object to receive notifications of changes to the set of connected audio devices.
android.media.AudioManager,"void registerAudioPlaybackCallback(AudioManager.AudioPlaybackCallback cb, Handler handler)", Register a callback to be notified of audio playback changes through AudioManager.AudioPlaybackCallback
android.media.AudioManager,"void registerAudioRecordingCallback(AudioManager.AudioRecordingCallback cb, Handler handler)", Register a callback to be notified of audio recording changes through AudioManager.AudioRecordingCallback
android.media.AudioManager,void registerMediaButtonEventReceiver(ComponentName eventReceiver), This method was deprecated in API level 21. Use setMediaButtonReceiver(PendingIntent) instead.
android.media.AudioManager,void registerMediaButtonEventReceiver(PendingIntent eventReceiver), This method was deprecated in API level 21. Use setMediaButtonReceiver(PendingIntent) instead.
android.media.AudioManager,void registerRemoteControlClient(RemoteControlClient rcClient), This method was deprecated in API level 21. Use MediaSession instead.
android.media.AudioManager,boolean registerRemoteController(RemoteController rctlr)," This method was deprecated in API level 21. Use addOnActiveSessionsChangedListener(android.media.session.MediaSessionManager.OnActiveSessionsChangedListener, ComponentName) and MediaController instead."
android.media.AudioManager,int requestAudioFocus(AudioFocusRequest focusRequest), Request audio focus.
android.media.AudioManager,"int requestAudioFocus(AudioManager.OnAudioFocusChangeListener l, int streamType, int durationHint)", This method was deprecated in API level 26. use requestAudioFocus(AudioFocusRequest)
android.media.AudioManager,void setBluetoothA2dpOn(boolean on), This method was deprecated in API level 5. Do not use.
android.media.AudioManager,void setBluetoothScoOn(boolean on), Request use of Bluetooth SCO headset for communications.
android.media.AudioManager,void setMicrophoneMute(boolean on), Sets the microphone mute on or off.
android.media.AudioManager,void setMode(int mode), Sets the audio mode.
android.media.AudioManager,void setParameters(String keyValuePairs), Sets a variable number of parameter values to audio hardware.
android.media.AudioManager,void setRingerMode(int ringerMode), Sets the ringer mode.
android.media.AudioManager,"void setRouting(int mode, int routes, int mask)"," This method was deprecated in API level 4. Do not set audio routing directly, use setSpeakerphoneOn(), setBluetoothScoOn() methods instead."
android.media.AudioManager,void setSpeakerphoneOn(boolean on), Sets the speakerphone on or off.
android.media.AudioManager,"void setStreamMute(int streamType, boolean state)"," This method was deprecated in API level 23. Use adjustStreamVolume(int, int, int) with ADJUST_MUTE or ADJUST_UNMUTE instead."
android.media.AudioManager,"void setStreamSolo(int streamType, boolean state)", This method was deprecated in API level 23. Do not use. If you need exclusive audio playback use requestAudioFocus(AudioFocusRequest).
android.media.AudioManager,"void setStreamVolume(int streamType, int index, int flags)", Sets the volume index for a particular stream.
android.media.AudioManager,"void setVibrateSetting(int vibrateType, int vibrateSetting)", This method was deprecated in API level 16. Applications should maintain their own vibrate policy based on current ringer mode that can be queried via getRingerMode().
android.media.AudioManager,void setWiredHeadsetOn(boolean on), This method was deprecated in API level 5. Do not use.
android.media.AudioManager,boolean shouldVibrate(int vibrateType), This method was deprecated in API level 16. Applications should maintain their own vibrate policy based on current ringer mode that can be queried via getRingerMode().
android.media.AudioManager,void startBluetoothSco(), Start bluetooth SCO audio connection.
android.media.AudioManager,void stopBluetoothSco(), Stop bluetooth SCO audio connection.
android.media.AudioManager,void unloadSoundEffects(), Unload Sound effects.
android.media.AudioManager,void unregisterAudioDeviceCallback(AudioDeviceCallback callback), Unregisters an AudioDeviceCallback object which has been previously registered to receive notifications of changes to the set of connected audio devices.
android.media.AudioManager,void unregisterAudioPlaybackCallback(AudioManager.AudioPlaybackCallback cb)," Unregister an audio playback callback previously registered with registerAudioPlaybackCallback(AudioPlaybackCallback, Handler)."
android.media.AudioManager,void unregisterAudioRecordingCallback(AudioManager.AudioRecordingCallback cb)," Unregister an audio recording callback previously registered with registerAudioRecordingCallback(AudioRecordingCallback, Handler)."
android.media.AudioManager,void unregisterMediaButtonEventReceiver(PendingIntent eventReceiver), This method was deprecated in API level 21. Use MediaSession instead.
android.media.AudioManager,void unregisterMediaButtonEventReceiver(ComponentName eventReceiver), This method was deprecated in API level 21. Use MediaSession instead.
android.media.AudioManager,void unregisterRemoteControlClient(RemoteControlClient rcClient), This method was deprecated in API level 21. Use MediaSession instead.
android.media.AudioManager,void unregisterRemoteController(RemoteController rctlr), This method was deprecated in API level 21. Use removeOnActiveSessionsChangedListener(android.media.session.MediaSessionManager.OnActiveSessionsChangedListener) instead.
android.media.AudioPlaybackConfiguration,int describeContents(), Describe the kinds of special objects contained in this Parcelable instance's marshaled representation.
android.media.AudioPlaybackConfiguration,boolean equals(Object o)," Indicates whether some other object is ""equal to"" this one."
android.media.AudioPlaybackConfiguration,AudioAttributes getAudioAttributes(), Return the AudioAttributes of the corresponding player.
android.media.AudioPlaybackConfiguration,int hashCode(), Returns a hash code value for the object.
android.media.AudioPlaybackConfiguration,"void writeToParcel(Parcel dest, int flags)", Flatten this object in to a Parcel.
android.media.AudioPresentation,"Map<Locale,String> getLabels()",
android.media.AudioPresentation,Locale getLocale(),
android.media.AudioPresentation,int getMasteringIndication(),
android.media.AudioPresentation,boolean hasAudioDescription(), Indicates whether an audio description for the visually impaired is available.
android.media.AudioPresentation,boolean hasDialogueEnhancement(), Indicates whether dialogue enhancement is available.
android.media.AudioPresentation,boolean hasSpokenSubtitles(), Indicates whether spoken subtitles for the visually impaired are available.
android.media.AudioRecord.Builder,AudioRecord build(),
android.media.AudioRecord.Builder,AudioRecord.Builder setAudioFormat(AudioFormat format), Sets the format of the audio data to be captured.
android.media.AudioRecord.Builder,AudioRecord.Builder setAudioSource(int source),
android.media.AudioRecord.Builder,AudioRecord.Builder setBufferSizeInBytes(int bufferSizeInBytes), Sets the total size (in bytes) of the buffer where audio data is written during the recording.
android.media.AudioRecord.MetricsConstants,Object clone(), Creates and returns a copy of this object.
android.media.AudioRecord.MetricsConstants,boolean equals(Object obj)," Indicates whether some other object is ""equal to"" this one."
android.media.AudioRecord.MetricsConstants,void finalize(), Called by the garbage collector on an object when garbage collection determines that there are no more references to the object.
android.media.AudioRecord.MetricsConstants,final Class<?> getClass(), Returns the runtime class of this Object.
android.media.AudioRecord.MetricsConstants,int hashCode(), Returns a hash code value for the object.
android.media.AudioRecord.MetricsConstants,final void notify(), Wakes up a single thread that is waiting on this object's monitor.
android.media.AudioRecord.MetricsConstants,final void notifyAll(), Wakes up all threads that are waiting on this object's monitor.
android.media.AudioRecord.MetricsConstants,String toString(), Returns a string representation of the object.
android.media.AudioRecord.MetricsConstants,"final void wait(long millis, int nanos)"," Causes the current thread to wait until another thread invokes the notify() method or the notifyAll() method for this object, or some other thread interrupts the current thread, or a certain amount of real time has elapsed."
android.media.AudioRecord.MetricsConstants,final void wait(long millis)," Causes the current thread to wait until either another thread invokes the notify() method or the notifyAll() method for this object, or a specified amount of time has elapsed."
android.media.AudioRecord.MetricsConstants,final void wait(), Causes the current thread to wait until another thread invokes the notify() method or the notifyAll() method for this object.
android.media.AudioRecord.OnRecordPositionUpdateListener,abstract void onMarkerReached(AudioRecord recorder), Called on the listener to notify it that the previously set marker has been reached by the recording head.
android.media.AudioRecord.OnRecordPositionUpdateListener,abstract void onPeriodicNotification(AudioRecord recorder), Called on the listener to periodically notify it that the record head has reached a multiple of the notification period.
android.media.AudioRecord.OnRoutingChangedListener,default void onRoutingChanged(AudioRouting router),
android.media.AudioRecord.OnRoutingChangedListener,abstract void onRoutingChanged(AudioRecord audioRecord), Called when the routing of an AudioRecord changes from either and explicit or policy rerouting.
android.media.AudioRecord,"void addOnRoutingChangedListener(AudioRecord.OnRoutingChangedListener listener, Handler handler)", This method was deprecated in API level 24. users should switch to the general purpose AudioRouting.OnRoutingChangedListener class instead.
android.media.AudioRecord,"void addOnRoutingChangedListener(AudioRouting.OnRoutingChangedListener listener, Handler handler)", Adds an AudioRouting.OnRoutingChangedListener to receive notifications of routing changes on this AudioRecord.
android.media.AudioRecord,List<MicrophoneInfo> getActiveMicrophones(), Returns a lists of MicrophoneInfo representing the active microphones.
android.media.AudioRecord,int getAudioFormat(), Returns the configured audio data encoding.
android.media.AudioRecord,int getAudioSessionId(), Returns the audio session ID.
android.media.AudioRecord,int getAudioSource(), Returns the audio recording source.
android.media.AudioRecord,int getBufferSizeInFrames(), Returns the frame count of the native AudioRecord buffer.
android.media.AudioRecord,int getChannelConfiguration(), Returns the configured channel position mask.
android.media.AudioRecord,int getChannelCount(), Returns the configured number of channels.
android.media.AudioRecord,AudioFormat getFormat(), Returns the configured AudioRecord format.
android.media.AudioRecord,PersistableBundle getMetrics(), Return Metrics data about the current AudioTrack instance.
android.media.AudioRecord,"static int getMinBufferSize(int sampleRateInHz, int channelConfig, int audioFormat)"," Returns the minimum buffer size required for the successful creation of an AudioRecord object, in byte units."
android.media.AudioRecord,int getNotificationMarkerPosition(), Returns the notification marker position expressed in frames.
android.media.AudioRecord,int getPositionNotificationPeriod(), Returns the notification update period expressed in frames.
android.media.AudioRecord,AudioDeviceInfo getPreferredDevice(), Returns the selected input specified by setPreferredDevice(AudioDeviceInfo).
android.media.AudioRecord,int getRecordingState(), Returns the recording state of the AudioRecord instance.
android.media.AudioRecord,AudioDeviceInfo getRoutedDevice(), Returns an AudioDeviceInfo identifying the current routing of this AudioRecord.
android.media.AudioRecord,int getSampleRate(), Returns the configured audio sink sample rate in Hz.
android.media.AudioRecord,int getState(), Returns the state of the AudioRecord instance.
android.media.AudioRecord,"int getTimestamp(AudioTimestamp outTimestamp, int timebase)", Poll for an AudioTimestamp on demand.
android.media.AudioRecord,"int read(short[] audioData, int offsetInShorts, int sizeInShorts, int readMode)", Reads audio data from the audio hardware for recording into a short array.
android.media.AudioRecord,"int read(ByteBuffer audioBuffer, int sizeInBytes, int readMode)", Reads audio data from the audio hardware for recording into a direct buffer.
android.media.AudioRecord,"int read(short[] audioData, int offsetInShorts, int sizeInShorts)", Reads audio data from the audio hardware for recording into a short array.
android.media.AudioRecord,"int read(float[] audioData, int offsetInFloats, int sizeInFloats, int readMode)", Reads audio data from the audio hardware for recording into a float array.
android.media.AudioRecord,"int read(byte[] audioData, int offsetInBytes, int sizeInBytes, int readMode)", Reads audio data from the audio hardware for recording into a byte array.
android.media.AudioRecord,"int read(ByteBuffer audioBuffer, int sizeInBytes)", Reads audio data from the audio hardware for recording into a direct buffer.
android.media.AudioRecord,"int read(byte[] audioData, int offsetInBytes, int sizeInBytes)", Reads audio data from the audio hardware for recording into a byte array.
android.media.AudioRecord,void release(), Releases the native AudioRecord resources.
android.media.AudioRecord,void removeOnRoutingChangedListener(AudioRecord.OnRoutingChangedListener listener), This method was deprecated in API level 24. users should switch to the general purpose AudioRouting.OnRoutingChangedListener class instead.
android.media.AudioRecord,void removeOnRoutingChangedListener(AudioRouting.OnRoutingChangedListener listener), Removes an AudioRouting.OnRoutingChangedListener which has been previously added to receive rerouting notifications.
android.media.AudioRecord,int setNotificationMarkerPosition(int markerInFrames)," Sets the marker position at which the listener is called, if set with setRecordPositionUpdateListener(OnRecordPositionUpdateListener) or setRecordPositionUpdateListener(OnRecordPositionUpdateListener, Handler)."
android.media.AudioRecord,int setPositionNotificationPeriod(int periodInFrames)," Sets the period at which the listener is called, if set with setRecordPositionUpdateListener(OnRecordPositionUpdateListener) or setRecordPositionUpdateListener(OnRecordPositionUpdateListener, Handler)."
android.media.AudioRecord,boolean setPreferredDevice(AudioDeviceInfo deviceInfo), Specifies an audio device (via an AudioDeviceInfo object) to route the input to this AudioRecord.
android.media.AudioRecord,void setRecordPositionUpdateListener(AudioRecord.OnRecordPositionUpdateListener listener), Sets the listener the AudioRecord notifies when a previously set marker is reached or for each periodic record head position update.
android.media.AudioRecord,"void setRecordPositionUpdateListener(AudioRecord.OnRecordPositionUpdateListener listener, Handler handler)", Sets the listener the AudioRecord notifies when a previously set marker is reached or for each periodic record head position update.
android.media.AudioRecord,void startRecording(MediaSyncEvent syncEvent), Starts recording from the AudioRecord instance when the specified synchronization event occurs on the specified audio session.
android.media.AudioRecord,void startRecording(), Starts recording from the AudioRecord instance.
android.media.AudioRecord,void stop(), Stops recording.
android.media.AudioRecordingConfiguration,int describeContents(), Describe the kinds of special objects contained in this Parcelable instance's marshaled representation.
android.media.AudioRecordingConfiguration,boolean equals(Object o)," Indicates whether some other object is ""equal to"" this one."
android.media.AudioRecordingConfiguration,AudioDeviceInfo getAudioDevice(), Returns information about the audio input device used for this recording.
android.media.AudioRecordingConfiguration,int getClientAudioSessionId()," Returns the session number of the recording, see getAudioSessionId()."
android.media.AudioRecordingConfiguration,int getClientAudioSource(), Returns the audio source being used for the recording.
android.media.AudioRecordingConfiguration,AudioFormat getClientFormat(), Returns the audio format at which the client application is recording audio.
android.media.AudioRecordingConfiguration,AudioFormat getFormat(), Returns the audio format at which audio is recorded on this Android device.
android.media.AudioRecordingConfiguration,int hashCode(), Returns a hash code value for the object.
android.media.AudioRecordingConfiguration,"void writeToParcel(Parcel dest, int flags)", Flatten this object in to a Parcel.
android.media.AudioRouting.OnRoutingChangedListener,abstract void onRoutingChanged(AudioRouting router),
android.media.AudioRouting,"abstract void addOnRoutingChangedListener(AudioRouting.OnRoutingChangedListener listener, Handler handler)", Adds an AudioRouting.OnRoutingChangedListener to receive notifications of routing changes on this AudioTrack/AudioRecord.
android.media.AudioRouting,abstract AudioDeviceInfo getPreferredDevice(), Returns the selected output/input specified by setPreferredDevice(AudioDeviceInfo).
android.media.AudioRouting,abstract AudioDeviceInfo getRoutedDevice(), Returns an AudioDeviceInfo identifying the current routing of this AudioTrack/AudioRecord.
android.media.AudioRouting,abstract void removeOnRoutingChangedListener(AudioRouting.OnRoutingChangedListener listener), Removes an AudioRouting.OnRoutingChangedListener which has been previously added to receive rerouting notifications.
android.media.AudioRouting,abstract boolean setPreferredDevice(AudioDeviceInfo deviceInfo), Specifies an audio device (via an AudioDeviceInfo object) to route the output/input to/from.
android.media.AudioTimestamp,Object clone(), Creates and returns a copy of this object.
android.media.AudioTimestamp,boolean equals(Object obj)," Indicates whether some other object is ""equal to"" this one."
android.media.AudioTimestamp,void finalize(), Called by the garbage collector on an object when garbage collection determines that there are no more references to the object.
android.media.AudioTimestamp,final Class<?> getClass(), Returns the runtime class of this Object.
android.media.AudioTimestamp,int hashCode(), Returns a hash code value for the object.
android.media.AudioTimestamp,final void notify(), Wakes up a single thread that is waiting on this object's monitor.
android.media.AudioTimestamp,final void notifyAll(), Wakes up all threads that are waiting on this object's monitor.
android.media.AudioTimestamp,String toString(), Returns a string representation of the object.
android.media.AudioTimestamp,"final void wait(long millis, int nanos)"," Causes the current thread to wait until another thread invokes the notify() method or the notifyAll() method for this object, or some other thread interrupts the current thread, or a certain amount of real time has elapsed."
android.media.AudioTimestamp,final void wait(long millis)," Causes the current thread to wait until either another thread invokes the notify() method or the notifyAll() method for this object, or a specified amount of time has elapsed."
android.media.AudioTimestamp,final void wait(), Causes the current thread to wait until another thread invokes the notify() method or the notifyAll() method for this object.
android.media.AudioTrack.Builder,AudioTrack build(), Builds an AudioTrack instance initialized with all the parameters set on this Builder.
android.media.AudioTrack.Builder,AudioTrack.Builder setAudioAttributes(AudioAttributes attributes), Sets the AudioAttributes.
android.media.AudioTrack.Builder,AudioTrack.Builder setAudioFormat(AudioFormat format), Sets the format of the audio data to be played by the AudioTrack.
android.media.AudioTrack.Builder,AudioTrack.Builder setBufferSizeInBytes(int bufferSizeInBytes), Sets the total size (in bytes) of the buffer where audio data is read from for playback.
android.media.AudioTrack.Builder,AudioTrack.Builder setOffloadedPlayback(boolean offload), Sets whether this track will play through the offloaded audio path.
android.media.AudioTrack.Builder,AudioTrack.Builder setPerformanceMode(int performanceMode), Sets the AudioTrack performance mode.
android.media.AudioTrack.Builder,AudioTrack.Builder setSessionId(int sessionId), Sets the session ID the AudioTrack will be attached to.
android.media.AudioTrack.Builder,AudioTrack.Builder setTransferMode(int mode), Sets the mode under which buffers of audio data are transferred from the AudioTrack to the framework.
android.media.AudioTrack.MetricsConstants,Object clone(), Creates and returns a copy of this object.
android.media.AudioTrack.MetricsConstants,boolean equals(Object obj)," Indicates whether some other object is ""equal to"" this one."
android.media.AudioTrack.MetricsConstants,void finalize(), Called by the garbage collector on an object when garbage collection determines that there are no more references to the object.
android.media.AudioTrack.MetricsConstants,final Class<?> getClass(), Returns the runtime class of this Object.
android.media.AudioTrack.MetricsConstants,int hashCode(), Returns a hash code value for the object.
android.media.AudioTrack.MetricsConstants,final void notify(), Wakes up a single thread that is waiting on this object's monitor.
android.media.AudioTrack.MetricsConstants,final void notifyAll(), Wakes up all threads that are waiting on this object's monitor.
android.media.AudioTrack.MetricsConstants,String toString(), Returns a string representation of the object.
android.media.AudioTrack.MetricsConstants,"final void wait(long millis, int nanos)"," Causes the current thread to wait until another thread invokes the notify() method or the notifyAll() method for this object, or some other thread interrupts the current thread, or a certain amount of real time has elapsed."
android.media.AudioTrack.MetricsConstants,final void wait(long millis)," Causes the current thread to wait until either another thread invokes the notify() method or the notifyAll() method for this object, or a specified amount of time has elapsed."
android.media.AudioTrack.MetricsConstants,final void wait(), Causes the current thread to wait until another thread invokes the notify() method or the notifyAll() method for this object.
android.media.AudioTrack.OnPlaybackPositionUpdateListener,abstract void onMarkerReached(AudioTrack track), Called on the listener to notify it that the previously set marker has been reached by the playback head.
android.media.AudioTrack.OnPlaybackPositionUpdateListener,abstract void onPeriodicNotification(AudioTrack track), Called on the listener to periodically notify it that the playback head has reached a multiple of the notification period.
android.media.AudioTrack.OnRoutingChangedListener,abstract void onRoutingChanged(AudioTrack audioTrack), Called when the routing of an AudioTrack changes from either and explicit or policy rerouting.
android.media.AudioTrack.OnRoutingChangedListener,default void onRoutingChanged(AudioRouting router),
android.media.AudioTrack.StreamEventCallback,void onStreamDataRequest(AudioTrack track), Called when more audio data can be written without blocking on an offloaded track.
android.media.AudioTrack.StreamEventCallback,void onStreamPresentationEnd(AudioTrack track), Called when all the buffers of an offloaded track that were queued in the audio system (e.g.
android.media.AudioTrack.StreamEventCallback,void onTearDown(AudioTrack track), Called when an offloaded track is no longer valid and has been discarded by the system.
android.media.AudioTrack,"void addOnRoutingChangedListener(AudioTrack.OnRoutingChangedListener listener, Handler handler)", This method was deprecated in API level 24. users should switch to the general purpose AudioRouting.OnRoutingChangedListener class instead.
android.media.AudioTrack,"void addOnRoutingChangedListener(AudioRouting.OnRoutingChangedListener listener, Handler handler)", Adds an AudioRouting.OnRoutingChangedListener to receive notifications of routing changes on this AudioTrack.
android.media.AudioTrack,int attachAuxEffect(int effectId), Attaches an auxiliary effect to the audio track.
android.media.AudioTrack,VolumeShaper createVolumeShaper(VolumeShaper.Configuration configuration), Returns a VolumeShaper object that can be used modify the volume envelope of the player or track.
android.media.AudioTrack,void flush(), Flushes the audio data currently queued for playback.
android.media.AudioTrack,int getAudioFormat(), Returns the configured audio data encoding.
android.media.AudioTrack,int getAudioSessionId(), Returns the audio session ID.
android.media.AudioTrack,int getBufferCapacityInFrames(), Returns the maximum size of the AudioTrack buffer in frames.
android.media.AudioTrack,int getBufferSizeInFrames(), Returns the effective size of the AudioTrack buffer that the application writes to.
android.media.AudioTrack,int getChannelConfiguration(), Returns the configured channel position mask.
android.media.AudioTrack,int getChannelCount(), Returns the configured number of channels.
android.media.AudioTrack,AudioFormat getFormat(), Returns the configured AudioTrack format.
android.media.AudioTrack,static float getMaxVolume()," Returns the maximum gain value, which is greater than or equal to 1.0."
android.media.AudioTrack,PersistableBundle getMetrics(), Return Metrics data about the current AudioTrack instance.
android.media.AudioTrack,"static int getMinBufferSize(int sampleRateInHz, int channelConfig, int audioFormat)", Returns the estimated minimum buffer size required for an AudioTrack object to be created in the MODE_STREAM mode.
android.media.AudioTrack,static float getMinVolume()," Returns the minimum gain value, which is the constant 0.0."
android.media.AudioTrack,static int getNativeOutputSampleRate(int streamType), Returns the output sample rate in Hz for the specified stream type.
android.media.AudioTrack,int getNotificationMarkerPosition(), Returns marker position expressed in frames.
android.media.AudioTrack,int getPerformanceMode(), Returns the current performance mode of the AudioTrack.
android.media.AudioTrack,int getPlayState(), Returns the playback state of the AudioTrack instance.
android.media.AudioTrack,int getPlaybackHeadPosition(), Returns the playback head position expressed in frames.
android.media.AudioTrack,PlaybackParams getPlaybackParams(), Returns the current playback parameters.
android.media.AudioTrack,int getPlaybackRate(), Returns the current playback sample rate rate in Hz.
android.media.AudioTrack,int getPositionNotificationPeriod(), Returns the notification update period expressed in frames.
android.media.AudioTrack,AudioDeviceInfo getPreferredDevice(), Returns the selected output specified by setPreferredDevice(AudioDeviceInfo).
android.media.AudioTrack,AudioDeviceInfo getRoutedDevice(), Returns an AudioDeviceInfo identifying the current routing of this AudioTrack.
android.media.AudioTrack,int getSampleRate(), Returns the configured audio source sample rate in Hz.
android.media.AudioTrack,int getState(), Returns the state of the AudioTrack instance.
android.media.AudioTrack,int getStreamType(), Returns the volume stream type of this AudioTrack.
android.media.AudioTrack,boolean getTimestamp(AudioTimestamp timestamp), Poll for a timestamp on demand.
android.media.AudioTrack,int getUnderrunCount(), Returns the number of underrun occurrences in the application-level write buffer since the AudioTrack was created.
android.media.AudioTrack,void pause(), Pauses the playback of the audio data.
android.media.AudioTrack,void play(), Starts playing an AudioTrack.
android.media.AudioTrack,void release(), Releases the native AudioTrack resources.
android.media.AudioTrack,int reloadStaticData()," Sets the playback head position within the static buffer to zero, that is it rewinds to start of static buffer."
android.media.AudioTrack,void removeOnRoutingChangedListener(AudioTrack.OnRoutingChangedListener listener), This method was deprecated in API level 24. users should switch to the general purpose AudioRouting.OnRoutingChangedListener class instead.
android.media.AudioTrack,void removeOnRoutingChangedListener(AudioRouting.OnRoutingChangedListener listener), Removes an AudioRouting.OnRoutingChangedListener which has been previously added to receive rerouting notifications.
android.media.AudioTrack,void removeStreamEventCallback()," Unregisters the callback for notification of stream events, previously set by setStreamEventCallback(Executor, StreamEventCallback)."
android.media.AudioTrack,int setAuxEffectSendLevel(float level), Sets the send level of the audio track to the attached auxiliary effect attachAuxEffect(int).
android.media.AudioTrack,int setBufferSizeInFrames(int bufferSizeInFrames), Limits the effective size of the AudioTrack buffer that the application writes to.
android.media.AudioTrack,"int setLoopPoints(int startInFrames, int endInFrames, int loopCount)", Sets the loop points and the loop count.
android.media.AudioTrack,int setNotificationMarkerPosition(int markerInFrames), Sets the position of the notification marker.
android.media.AudioTrack,int setPlaybackHeadPosition(int positionInFrames), Sets the playback head position within the static buffer.
android.media.AudioTrack,void setPlaybackParams(PlaybackParams params), Sets the playback parameters.
android.media.AudioTrack,"void setPlaybackPositionUpdateListener(AudioTrack.OnPlaybackPositionUpdateListener listener, Handler handler)", Sets the listener the AudioTrack notifies when a previously set marker is reached or for each periodic playback head position update.
android.media.AudioTrack,void setPlaybackPositionUpdateListener(AudioTrack.OnPlaybackPositionUpdateListener listener), Sets the listener the AudioTrack notifies when a previously set marker is reached or for each periodic playback head position update.
android.media.AudioTrack,int setPlaybackRate(int sampleRateInHz), Sets the playback sample rate for this track.
android.media.AudioTrack,int setPositionNotificationPeriod(int periodInFrames), Sets the period for the periodic notification event.
android.media.AudioTrack,boolean setPreferredDevice(AudioDeviceInfo deviceInfo), Specifies an audio device (via an AudioDeviceInfo object) to route the output from this AudioTrack.
android.media.AudioTrack,int setPresentation(AudioPresentation presentation), Sets the audio presentation.
android.media.AudioTrack,"int setStereoVolume(float leftGain, float rightGain)"," This method was deprecated in API level 21. Applications should use setVolume(float) instead, as it more gracefully scales down to mono, and up to multi-channel content beyond stereo."
android.media.AudioTrack,"void setStreamEventCallback(Executor executor, AudioTrack.StreamEventCallback eventCallback)", Sets the callback for the notification of stream events.
android.media.AudioTrack,int setVolume(float gain), Sets the specified output gain value on all channels of this track.
android.media.AudioTrack,void stop(), Stops playing the audio data.
android.media.AudioTrack,"int write(float[] audioData, int offsetInFloats, int sizeInFloats, int writeMode)"," Writes the audio data to the audio sink for playback (streaming mode), or copies audio data for later playback (static buffer mode)."
android.media.AudioTrack,"int write(short[] audioData, int offsetInShorts, int sizeInShorts)"," Writes the audio data to the audio sink for playback (streaming mode), or copies audio data for later playback (static buffer mode)."
android.media.AudioTrack,"int write(byte[] audioData, int offsetInBytes, int sizeInBytes)"," Writes the audio data to the audio sink for playback (streaming mode), or copies audio data for later playback (static buffer mode)."
android.media.AudioTrack,"int write(ByteBuffer audioData, int sizeInBytes, int writeMode)"," Writes the audio data to the audio sink for playback (streaming mode), or copies audio data for later playback (static buffer mode)."
android.media.AudioTrack,"int write(ByteBuffer audioData, int sizeInBytes, int writeMode, long timestamp)", Writes the audio data to the audio sink for playback in streaming mode on a HW_AV_SYNC track.
android.media.AudioTrack,"int write(short[] audioData, int offsetInShorts, int sizeInShorts, int writeMode)"," Writes the audio data to the audio sink for playback (streaming mode), or copies audio data for later playback (static buffer mode)."
android.media.AudioTrack,"int write(byte[] audioData, int offsetInBytes, int sizeInBytes, int writeMode)"," Writes the audio data to the audio sink for playback (streaming mode), or copies audio data for later playback (static buffer mode)."
android.media.browse.MediaBrowser.ConnectionCallback,void onConnected(), Invoked after connect() when the request has successfully completed.
android.media.browse.MediaBrowser.ConnectionCallback,void onConnectionFailed(), Invoked when the connection to the media browser failed.
android.media.browse.MediaBrowser.ConnectionCallback,void onConnectionSuspended(), Invoked when the client is disconnected from the media browser.
android.media.browse.MediaBrowser.ItemCallback,void onError(String mediaId)," Called there was an error retrieving it or the connected service doesn't support getItem(String, MediaBrowser.ItemCallback)."
android.media.browse.MediaBrowser.ItemCallback,void onItemLoaded(MediaBrowser.MediaItem item), Called when the item has been returned by the connected service.
android.media.browse.MediaBrowser.MediaItem,int describeContents(), Describe the kinds of special objects contained in this Parcelable instance's marshaled representation.
android.media.browse.MediaBrowser.MediaItem,MediaDescription getDescription(), Returns the description of the media.
android.media.browse.MediaBrowser.MediaItem,int getFlags(), Gets the flags of the item.
android.media.browse.MediaBrowser.MediaItem,String getMediaId(), Returns the media id in the MediaDescription for this item.
android.media.browse.MediaBrowser.MediaItem,boolean isBrowsable(), Returns whether this item is browsable.
android.media.browse.MediaBrowser.MediaItem,boolean isPlayable(), Returns whether this item is playable.
android.media.browse.MediaBrowser.MediaItem,String toString(), Returns a string representation of the object.
android.media.browse.MediaBrowser.MediaItem,"void writeToParcel(Parcel out, int flags)", Flatten this object in to a Parcel.
android.media.browse.MediaBrowser.SubscriptionCallback,"void onChildrenLoaded(String parentId, List<MediaBrowser.MediaItem> children)", Called when the list of children is loaded or updated.
android.media.browse.MediaBrowser.SubscriptionCallback,"void onChildrenLoaded(String parentId, List<MediaBrowser.MediaItem> children, Bundle options)", Called when the list of children is loaded or updated.
android.media.browse.MediaBrowser.SubscriptionCallback,void onError(String parentId), Called when the id doesn't exist or other errors in subscribing.
android.media.browse.MediaBrowser.SubscriptionCallback,"void onError(String parentId, Bundle options)", Called when the id doesn't exist or other errors in subscribing.
android.media.browse.MediaBrowser,void connect(), Connects to the media browser service.
android.media.browse.MediaBrowser,void disconnect(), Disconnects from the media browser service.
android.media.browse.MediaBrowser,Bundle getExtras(), Gets any extras for the media service.
android.media.browse.MediaBrowser,"void getItem(String mediaId, MediaBrowser.ItemCallback cb)", Retrieves a specific MediaBrowser.MediaItem from the connected service.
android.media.browse.MediaBrowser,String getRoot(), Gets the root id.
android.media.browse.MediaBrowser,ComponentName getServiceComponent(), Gets the service component that the media browser is connected to.
android.media.browse.MediaBrowser,MediaSession.Token getSessionToken(), Gets the media session token associated with the media browser.
android.media.browse.MediaBrowser,boolean isConnected(), Returns whether the browser is connected to the service.
android.media.browse.MediaBrowser,"void subscribe(String parentId, Bundle options, MediaBrowser.SubscriptionCallback callback)", Queries with service-specific arguments for information about the media items that are contained within the specified id and subscribes to receive updates when they change.
android.media.browse.MediaBrowser,"void subscribe(String parentId, MediaBrowser.SubscriptionCallback callback)", Queries for information about the media items that are contained within the specified id and subscribes to receive updates when they change.
android.media.browse.MediaBrowser,void unsubscribe(String parentId), Unsubscribes for changes to the children of the specified media id.
android.media.browse.MediaBrowser,"void unsubscribe(String parentId, MediaBrowser.SubscriptionCallback callback)", Unsubscribes for changes to the children of the specified media id through a callback.
android.media.CamcorderProfile,static CamcorderProfile get(int quality), Returns the camcorder profile for the first back-facing camera on the device at the given quality level.
android.media.CamcorderProfile,"static CamcorderProfile get(int cameraId, int quality)", Returns the camcorder profile for the given camera at the given quality level.
android.media.CamcorderProfile,"static boolean hasProfile(int cameraId, int quality)", Returns true if camcorder profile exists for the given camera at the given quality level.
android.media.CamcorderProfile,static boolean hasProfile(int quality), Returns true if camcorder profile exists for the first back-facing camera at the given quality level.
android.media.CameraProfile,static int getJpegEncodingQualityParameter(int quality), Returns a pre-defined still image capture (jpeg) quality level used for the given quality level in the Camera application for the first back-facing camera on the device.
android.media.CameraProfile,"static int getJpegEncodingQualityParameter(int cameraId, int quality)", Returns a pre-defined still image capture (jpeg) quality level used for the given quality level in the Camera application for the specified camera.
android.media.DataSourceDesc.Builder,DataSourceDesc build(), Combines all of the fields that have been set and return a new DataSourceDesc object.
android.media.DataSourceDesc.Builder,DataSourceDesc.Builder setDataSource(FileDescriptor fd), Sets the data source (FileDescriptor) to use.
android.media.DataSourceDesc.Builder,DataSourceDesc.Builder setDataSource(Media2DataSource m2ds), Sets the data source (Media2DataSource) to use.
android.media.DataSourceDesc.Builder,"DataSourceDesc.Builder setDataSource(FileDescriptor fd, long offset, long length)", Sets the data source (FileDescriptor) to use.
android.media.DataSourceDesc.Builder,"DataSourceDesc.Builder setDataSource(Context context, Uri uri, Map<String,String> headers, List<HttpCookie> cookies)", Sets the data source as a content Uri.
android.media.DataSourceDesc.Builder,"DataSourceDesc.Builder setDataSource(Context context, Uri uri)", Sets the data source as a content Uri.
android.media.DataSourceDesc.Builder,DataSourceDesc.Builder setEndPosition(long position), Sets the end position in milliseconds at which the playback will end.
android.media.DataSourceDesc.Builder,DataSourceDesc.Builder setId(long id), Sets the Id of this data source.
android.media.DataSourceDesc.Builder,DataSourceDesc.Builder setStartPosition(long position), Sets the start position in milliseconds at which the playback will start.
android.media.DataSourceDesc,long getEndPosition(), Return the position in milliseconds at which the playback will end.
android.media.DataSourceDesc,FileDescriptor getFileDescriptor(), Return the FileDescriptor of this data source.
android.media.DataSourceDesc,long getFileDescriptorLength(), Return the content length associated with the FileDescriptor of this data source.
android.media.DataSourceDesc,long getFileDescriptorOffset(), Return the offset associated with the FileDescriptor of this data source.
android.media.DataSourceDesc,long getId(), Return the Id of data source.
android.media.DataSourceDesc,Media2DataSource getMedia2DataSource(), Return the Media2DataSource of this data source.
android.media.DataSourceDesc,long getStartPosition(), Return the position in milliseconds at which the playback will start.
android.media.DataSourceDesc,int getType(), Return the type of data source.
android.media.DataSourceDesc,Uri getUri(), Return the Uri of this data source.
android.media.DataSourceDesc,Context getUriContext(), Return the Context used for resolving the Uri of this data source.
android.media.DataSourceDesc,List<HttpCookie> getUriCookies(), Return the Uri cookies of this data source.
android.media.DataSourceDesc,"Map<String,String> getUriHeaders()", Return the Uri headers of this data source.
android.media.DeniedByServerException,final void addSuppressed(Throwable exception), Appends the specified exception to the exceptions that were suppressed in order to deliver this exception.
android.media.DeniedByServerException,Throwable fillInStackTrace(), Fills in the execution stack trace.
android.media.DeniedByServerException,Throwable getCause(), Returns the cause of this throwable or null if the cause is nonexistent or unknown.
android.media.DeniedByServerException,String getLocalizedMessage(), Creates a localized description of this throwable.
android.media.DeniedByServerException,String getMessage(), Returns the detail message string of this throwable.
android.media.DeniedByServerException,StackTraceElement[] getStackTrace(), Provides programmatic access to the stack trace information printed by printStackTrace().
android.media.DeniedByServerException,final Throwable[] getSuppressed()," Returns an array containing all of the exceptions that were suppressed, typically by the try-with-resources statement, in order to deliver this exception."
android.media.DeniedByServerException,Throwable initCause(Throwable cause), Initializes the cause of this throwable to the specified value.
android.media.DeniedByServerException,void printStackTrace(), Prints this throwable and its backtrace to the standard error stream.
android.media.DeniedByServerException,void printStackTrace(PrintWriter s), Prints this throwable and its backtrace to the specified print writer.
android.media.DeniedByServerException,void printStackTrace(PrintStream s), Prints this throwable and its backtrace to the specified print stream.
android.media.DeniedByServerException,void setStackTrace(StackTraceElement[] stackTrace), Sets the stack trace elements that will be returned by getStackTrace() and printed by printStackTrace() and related methods.
android.media.DeniedByServerException,String toString(), Returns a short description of this throwable.
android.media.DeniedByServerException,Object clone(), Creates and returns a copy of this object.
android.media.DeniedByServerException,boolean equals(Object obj)," Indicates whether some other object is ""equal to"" this one."
android.media.DeniedByServerException,void finalize(), Called by the garbage collector on an object when garbage collection determines that there are no more references to the object.
android.media.DeniedByServerException,final Class<?> getClass(), Returns the runtime class of this Object.
android.media.DeniedByServerException,int hashCode(), Returns a hash code value for the object.
android.media.DeniedByServerException,final void notify(), Wakes up a single thread that is waiting on this object's monitor.
android.media.DeniedByServerException,final void notifyAll(), Wakes up all threads that are waiting on this object's monitor.
android.media.DeniedByServerException,String toString(), Returns a string representation of the object.
android.media.DeniedByServerException,"final void wait(long millis, int nanos)"," Causes the current thread to wait until another thread invokes the notify() method or the notifyAll() method for this object, or some other thread interrupts the current thread, or a certain amount of real time has elapsed."
android.media.DeniedByServerException,final void wait(long millis)," Causes the current thread to wait until either another thread invokes the notify() method or the notifyAll() method for this object, or a specified amount of time has elapsed."
android.media.DeniedByServerException,final void wait(), Causes the current thread to wait until another thread invokes the notify() method or the notifyAll() method for this object.
android.media.DrmInitData.SchemeInitData,boolean equals(Object obj)," Indicates whether some other object is ""equal to"" this one."
android.media.DrmInitData.SchemeInitData,int hashCode(), Returns a hash code value for the object.
android.media.DrmInitData,abstract DrmInitData.SchemeInitData get(UUID schemeUuid)," Retrieves initialization data for a given DRM scheme, specified by its UUID."
android.media.effect.Effect,"abstract void apply(int inputTexId, int width, int height, int outputTexId)", Apply an effect to GL textures.
android.media.effect.Effect,abstract String getName(), Get the effect name.
android.media.effect.Effect,abstract void release(), Release an effect.
android.media.effect.Effect,"abstract void setParameter(String parameterKey, Object value)", Set a filter parameter.
android.media.effect.Effect,void setUpdateListener(EffectUpdateListener listener), Set an effect listener.
android.media.effect.EffectContext,static EffectContext createWithCurrentGlContext(), Creates a context within the current GL context.
android.media.effect.EffectContext,EffectFactory getFactory(), Returns the EffectFactory for this context.
android.media.effect.EffectContext,void release(), Releases the context.
android.media.effect.EffectFactory,Effect createEffect(String effectName), Instantiate a new effect with the given effect name.
android.media.effect.EffectFactory,static boolean isEffectSupported(String effectName), Check if an effect is supported on this platform.
android.media.effect.EffectUpdateListener,"abstract void onEffectUpdated(Effect effect, Object info)", Called when the effect state is updated.
android.media.ExifInterface,double getAltitude(double defaultValue), Return the altitude in meters.
android.media.ExifInterface,String getAttribute(String tag), Returns the value of the specified tag or null if there is no such tag in the image file.
android.media.ExifInterface,"double getAttributeDouble(String tag, double defaultValue)", Returns the double value of the tag that is specified as rational or contains a double-formatted value.
android.media.ExifInterface,"int getAttributeInt(String tag, int defaultValue)", Returns the integer value of the specified tag.
android.media.ExifInterface,boolean getLatLong(float[] output), Stores the latitude and longitude value in a float array.
android.media.ExifInterface,byte[] getThumbnail()," Returns the JPEG compressed thumbnail inside the image file, or null if there is no JPEG compressed thumbnail."
android.media.ExifInterface,Bitmap getThumbnailBitmap()," Creates and returns a Bitmap object of the thumbnail image based on the byte array and the thumbnail compression value, or null if the compression type is unsupported."
android.media.ExifInterface,byte[] getThumbnailBytes()," Returns the thumbnail bytes inside the image file, regardless of the compression type of the thumbnail image."
android.media.ExifInterface,long[] getThumbnailRange()," Returns the offset and length of thumbnail inside the image file, or null if there is no thumbnail."
android.media.ExifInterface,boolean hasThumbnail(), Returns true if the image file has a thumbnail.
android.media.ExifInterface,boolean isThumbnailCompressed()," Returns true if thumbnail image is JPEG Compressed, or false if either thumbnail image does not exist or thumbnail image is uncompressed."
android.media.ExifInterface,void saveAttributes(), Save the tag data into the original image file.
android.media.ExifInterface,"void setAttribute(String tag, String value)", Set the value of the specified tag.
android.media.FaceDetector.Face,float confidence(), Returns a confidence factor between 0 and 1.
android.media.FaceDetector.Face,float eyesDistance(), Returns the distance between the eyes.
android.media.FaceDetector.Face,void getMidPoint(PointF point), Sets the position of the mid-point between the eyes.
android.media.FaceDetector.Face,float pose(int euler), Returns the face's pose.
android.media.FaceDetector,"int findFaces(Bitmap bitmap, Face[] faces)", Finds all the faces found in a given Bitmap.
android.media.Image.Plane,abstract ByteBuffer getBuffer(), Get a direct ByteBuffer containing the frame data.
android.media.Image.Plane,abstract int getPixelStride()," The distance between adjacent pixel samples, in bytes."
android.media.Image.Plane,abstract int getRowStride()," The row stride for this color plane, in bytes."
android.media.Image,abstract void close(), Free up this frame for reuse.
android.media.Image,Rect getCropRect(), Get the crop rectangle associated with this frame.
android.media.Image,abstract int getFormat(), Get the format for this image.
android.media.Image,abstract int getHeight(), The height of the image in pixels.
android.media.Image,abstract Plane[] getPlanes(), Get the array of pixel planes for this Image.
android.media.Image,abstract long getTimestamp(), Get the timestamp associated with this frame.
android.media.Image,abstract int getWidth(), The width of the image in pixels.
android.media.Image,void setCropRect(Rect cropRect), Set the crop rectangle associated with this frame.
android.media.Image,void setTimestamp(long timestamp), Set the timestamp associated with this frame.
android.media.ImageReader.OnImageAvailableListener,abstract void onImageAvailable(ImageReader reader), Callback that is called when a new image is available from ImageReader.
android.media.ImageReader,Image acquireLatestImage()," Acquire the latest Image from the ImageReader's queue, dropping older images."
android.media.ImageReader,Image acquireNextImage(), Acquire the next Image from the ImageReader's queue.
android.media.ImageReader,void close(), Free up all the resources associated with this ImageReader.
android.media.ImageReader,void discardFreeBuffers(), Discard any free buffers owned by this ImageReader.
android.media.ImageReader,int getHeight()," The default height of Images, in pixels."
android.media.ImageReader,int getImageFormat(), The default image format of Images.
android.media.ImageReader,int getMaxImages()," Maximum number of images that can be acquired from the ImageReader by any time (for example, with acquireNextImage())."
android.media.ImageReader,Surface getSurface(), Get a Surface that can be used to produce Images for this ImageReader.
android.media.ImageReader,int getWidth()," The default width of Images, in pixels."
android.media.ImageReader,"static ImageReader newInstance(int width, int height, int format, int maxImages)", Create a new reader for images of the desired size and format.
android.media.ImageReader,"void setOnImageAvailableListener(ImageReader.OnImageAvailableListener listener, Handler handler)", Register a listener to be invoked when a new image becomes available from the ImageReader.
android.media.ImageWriter.OnImageReleasedListener,abstract void onImageReleased(ImageWriter writer), Callback that is called when an input Image is released back to ImageWriter after the data consumption.
android.media.ImageWriter,void close(), Free up all the resources associated with this ImageWriter.
android.media.ImageWriter,Image dequeueInputImage(), Dequeue the next available input Image for the application to produce data into.
android.media.ImageWriter,int getFormat(), Get the ImageWriter format.
android.media.ImageWriter,int getMaxImages()," Maximum number of Images that can be dequeued from the ImageWriter simultaneously (for example, with dequeueInputImage())."
android.media.ImageWriter,"static ImageWriter newInstance(Surface surface, int maxImages)", Create a new ImageWriter.
android.media.ImageWriter,void queueInputImage(Image image), Queue an input Image back to ImageWriter for the downstream consumer to access.
android.media.ImageWriter,"void setOnImageReleasedListener(ImageWriter.OnImageReleasedListener listener, Handler handler)", Register a listener to be invoked when an input Image is returned to the ImageWriter.
android.media.JetPlayer.OnJetEventListener,"abstract void onJetEvent(JetPlayer player, short segment, byte track, byte channel, byte controller, byte value)", Callback for when the JET engine generates a new event.
android.media.JetPlayer.OnJetEventListener,"abstract void onJetNumQueuedSegmentUpdate(JetPlayer player, int nbSegments)", Callback for when JET's number of queued segments is updated.
android.media.JetPlayer.OnJetEventListener,"abstract void onJetPauseUpdate(JetPlayer player, int paused)", Callback for when JET pause state is updated.
android.media.JetPlayer.OnJetEventListener,"abstract void onJetUserIdUpdate(JetPlayer player, int userId, int repeatCount)", Callback for when JET's currently playing segment's userID is updated.
android.media.JetPlayer,boolean clearQueue()," Empties the segment queue, and clears all clips that are scheduled for playback."
android.media.JetPlayer,Object clone(), Cloning a JetPlayer instance is not supported.
android.media.JetPlayer,boolean closeJetFile(), Closes the resource containing the JET content.
android.media.JetPlayer,static JetPlayer getJetPlayer(), Factory method for the JetPlayer class.
android.media.JetPlayer,static int getMaxTracks(), Returns the maximum number of simultaneous MIDI tracks supported by JetPlayer
android.media.JetPlayer,boolean loadJetFile(String path), Loads a .jet file from a given path.
android.media.JetPlayer,boolean loadJetFile(AssetFileDescriptor afd), Loads a .jet file from an asset file descriptor.
android.media.JetPlayer,boolean pause(), Pauses the playback of the JET segment queue.
android.media.JetPlayer,boolean play(), Starts playing the JET segment queue.
android.media.JetPlayer,"boolean queueJetSegment(int segmentNum, int libNum, int repeatCount, int transpose, int muteFlags, byte userID)", Queues the specified segment in the JET queue.
android.media.JetPlayer,"boolean queueJetSegmentMuteArray(int segmentNum, int libNum, int repeatCount, int transpose, boolean[] muteArray, byte userID)", Queues the specified segment in the JET queue.
android.media.JetPlayer,void release()," Stops the current JET playback, and releases all associated native resources."
android.media.JetPlayer,void setEventListener(JetPlayer.OnJetEventListener listener), Sets the listener JetPlayer notifies when a JET event is generated by the rendering and playback engine.
android.media.JetPlayer,"void setEventListener(JetPlayer.OnJetEventListener listener, Handler handler)", Sets the listener JetPlayer notifies when a JET event is generated by the rendering and playback engine.
android.media.JetPlayer,"boolean setMuteArray(boolean[] muteArray, boolean sync)", Modifies the mute flags for the current active segment.
android.media.JetPlayer,"boolean setMuteFlag(int trackId, boolean muteFlag, boolean sync)", Mutes or unmutes a single track.
android.media.JetPlayer,"boolean setMuteFlags(int muteFlags, boolean sync)", Modifies the mute flags.
android.media.JetPlayer,boolean triggerClip(int clipId), Schedules the playback of a clip.
android.media.Media2DataSource,abstract long getSize(), Called to get the size of the data source.
android.media.Media2DataSource,"abstract int readAt(long position, byte[] buffer, int offset, int size)", Called to request data from the given position.
android.media.MediaActionSound,void load(int soundName), Preload a predefined platform sound to minimize latency when the sound is played later by play(int).
android.media.MediaActionSound,void play(int soundName), Play one of the predefined platform sounds for media actions.
android.media.MediaActionSound,void release(), Free up all audio resources used by this MediaActionSound instance.
android.media.MediaCas.EventListener,"abstract void onEvent(MediaCas MediaCas, int event, int arg, byte[] data)", Notify the listener of a scheme-specific event from the CA system.
android.media.MediaCas.PluginDescriptor,String getName(),
android.media.MediaCas.PluginDescriptor,int getSystemId(),
android.media.MediaCas.PluginDescriptor,String toString(), Returns a string representation of the object.
android.media.MediaCas.Session,void close(), Close the session.
android.media.MediaCas.Session,void processEcm(byte[] data), Send a received ECM packet to the specified session of the CA system.
android.media.MediaCas.Session,"void processEcm(byte[] data, int offset, int length)", Send a received ECM packet to the specified session of the CA system.
android.media.MediaCas.Session,void setPrivateData(byte[] data), Set the private data for a session.
android.media.MediaCas,void close()," Closes this resource, relinquishing any underlying resources."
android.media.MediaCas,static PluginDescriptor[] enumeratePlugins(), List all available CA plugins on the device.
android.media.MediaCas,static boolean isSystemIdSupported(int CA_system_id), Query if a certain CA system is supported on this device.
android.media.MediaCas,MediaCas.Session openSession(), Open a session to descramble one or more streams scrambled by the conditional access system.
android.media.MediaCas,void processEmm(byte[] data), Send a received EMM packet to the CA system.
android.media.MediaCas,"void processEmm(byte[] data, int offset, int length)", Send a received EMM packet to the CA system.
android.media.MediaCas,void provision(String provisionString), Initiate a provisioning operation for a CA system.
android.media.MediaCas,"void refreshEntitlements(int refreshType, byte[] refreshData)", Notify the CA system to refresh entitlement keys.
android.media.MediaCas,"void sendEvent(int event, int arg, byte[] data)", Send an event to a CA system.
android.media.MediaCas,"void setEventListener(MediaCas.EventListener listener, Handler handler)", Set an event listener to receive notifications from the MediaCas instance.
android.media.MediaCas,void setPrivateData(byte[] data), Send the private data for the CA system.
android.media.MediaCasException.DeniedByServerException,final void addSuppressed(Throwable exception), Appends the specified exception to the exceptions that were suppressed in order to deliver this exception.
android.media.MediaCasException.DeniedByServerException,Throwable fillInStackTrace(), Fills in the execution stack trace.
android.media.MediaCasException.DeniedByServerException,Throwable getCause(), Returns the cause of this throwable or null if the cause is nonexistent or unknown.
android.media.MediaCasException.DeniedByServerException,String getLocalizedMessage(), Creates a localized description of this throwable.
android.media.MediaCasException.DeniedByServerException,String getMessage(), Returns the detail message string of this throwable.
android.media.MediaCasException.DeniedByServerException,StackTraceElement[] getStackTrace(), Provides programmatic access to the stack trace information printed by printStackTrace().
android.media.MediaCasException.DeniedByServerException,final Throwable[] getSuppressed()," Returns an array containing all of the exceptions that were suppressed, typically by the try-with-resources statement, in order to deliver this exception."
android.media.MediaCasException.DeniedByServerException,Throwable initCause(Throwable cause), Initializes the cause of this throwable to the specified value.
android.media.MediaCasException.DeniedByServerException,void printStackTrace(), Prints this throwable and its backtrace to the standard error stream.
android.media.MediaCasException.DeniedByServerException,void printStackTrace(PrintWriter s), Prints this throwable and its backtrace to the specified print writer.
android.media.MediaCasException.DeniedByServerException,void printStackTrace(PrintStream s), Prints this throwable and its backtrace to the specified print stream.
android.media.MediaCasException.DeniedByServerException,void setStackTrace(StackTraceElement[] stackTrace), Sets the stack trace elements that will be returned by getStackTrace() and printed by printStackTrace() and related methods.
android.media.MediaCasException.DeniedByServerException,String toString(), Returns a short description of this throwable.
android.media.MediaCasException.DeniedByServerException,Object clone(), Creates and returns a copy of this object.
android.media.MediaCasException.DeniedByServerException,boolean equals(Object obj)," Indicates whether some other object is ""equal to"" this one."
android.media.MediaCasException.DeniedByServerException,void finalize(), Called by the garbage collector on an object when garbage collection determines that there are no more references to the object.
android.media.MediaCasException.DeniedByServerException,final Class<?> getClass(), Returns the runtime class of this Object.
android.media.MediaCasException.DeniedByServerException,int hashCode(), Returns a hash code value for the object.
android.media.MediaCasException.DeniedByServerException,final void notify(), Wakes up a single thread that is waiting on this object's monitor.
android.media.MediaCasException.DeniedByServerException,final void notifyAll(), Wakes up all threads that are waiting on this object's monitor.
android.media.MediaCasException.DeniedByServerException,String toString(), Returns a string representation of the object.
android.media.MediaCasException.DeniedByServerException,"final void wait(long millis, int nanos)"," Causes the current thread to wait until another thread invokes the notify() method or the notifyAll() method for this object, or some other thread interrupts the current thread, or a certain amount of real time has elapsed."
android.media.MediaCasException.DeniedByServerException,final void wait(long millis)," Causes the current thread to wait until either another thread invokes the notify() method or the notifyAll() method for this object, or a specified amount of time has elapsed."
android.media.MediaCasException.DeniedByServerException,final void wait(), Causes the current thread to wait until another thread invokes the notify() method or the notifyAll() method for this object.
android.media.MediaCasException.NotProvisionedException,final void addSuppressed(Throwable exception), Appends the specified exception to the exceptions that were suppressed in order to deliver this exception.
android.media.MediaCasException.NotProvisionedException,Throwable fillInStackTrace(), Fills in the execution stack trace.
android.media.MediaCasException.NotProvisionedException,Throwable getCause(), Returns the cause of this throwable or null if the cause is nonexistent or unknown.
android.media.MediaCasException.NotProvisionedException,String getLocalizedMessage(), Creates a localized description of this throwable.
android.media.MediaCasException.NotProvisionedException,String getMessage(), Returns the detail message string of this throwable.
android.media.MediaCasException.NotProvisionedException,StackTraceElement[] getStackTrace(), Provides programmatic access to the stack trace information printed by printStackTrace().
android.media.MediaCasException.NotProvisionedException,final Throwable[] getSuppressed()," Returns an array containing all of the exceptions that were suppressed, typically by the try-with-resources statement, in order to deliver this exception."
android.media.MediaCasException.NotProvisionedException,Throwable initCause(Throwable cause), Initializes the cause of this throwable to the specified value.
android.media.MediaCasException.NotProvisionedException,void printStackTrace(), Prints this throwable and its backtrace to the standard error stream.
android.media.MediaCasException.NotProvisionedException,void printStackTrace(PrintWriter s), Prints this throwable and its backtrace to the specified print writer.
android.media.MediaCasException.NotProvisionedException,void printStackTrace(PrintStream s), Prints this throwable and its backtrace to the specified print stream.
android.media.MediaCasException.NotProvisionedException,void setStackTrace(StackTraceElement[] stackTrace), Sets the stack trace elements that will be returned by getStackTrace() and printed by printStackTrace() and related methods.
android.media.MediaCasException.NotProvisionedException,String toString(), Returns a short description of this throwable.
android.media.MediaCasException.NotProvisionedException,Object clone(), Creates and returns a copy of this object.
android.media.MediaCasException.NotProvisionedException,boolean equals(Object obj)," Indicates whether some other object is ""equal to"" this one."
android.media.MediaCasException.NotProvisionedException,void finalize(), Called by the garbage collector on an object when garbage collection determines that there are no more references to the object.
android.media.MediaCasException.NotProvisionedException,final Class<?> getClass(), Returns the runtime class of this Object.
android.media.MediaCasException.NotProvisionedException,int hashCode(), Returns a hash code value for the object.
android.media.MediaCasException.NotProvisionedException,final void notify(), Wakes up a single thread that is waiting on this object's monitor.
android.media.MediaCasException.NotProvisionedException,final void notifyAll(), Wakes up all threads that are waiting on this object's monitor.
android.media.MediaCasException.NotProvisionedException,String toString(), Returns a string representation of the object.
android.media.MediaCasException.NotProvisionedException,"final void wait(long millis, int nanos)"," Causes the current thread to wait until another thread invokes the notify() method or the notifyAll() method for this object, or some other thread interrupts the current thread, or a certain amount of real time has elapsed."
android.media.MediaCasException.NotProvisionedException,final void wait(long millis)," Causes the current thread to wait until either another thread invokes the notify() method or the notifyAll() method for this object, or a specified amount of time has elapsed."
android.media.MediaCasException.NotProvisionedException,final void wait(), Causes the current thread to wait until another thread invokes the notify() method or the notifyAll() method for this object.
android.media.MediaCasException.ResourceBusyException,final void addSuppressed(Throwable exception), Appends the specified exception to the exceptions that were suppressed in order to deliver this exception.
android.media.MediaCasException.ResourceBusyException,Throwable fillInStackTrace(), Fills in the execution stack trace.
android.media.MediaCasException.ResourceBusyException,Throwable getCause(), Returns the cause of this throwable or null if the cause is nonexistent or unknown.
android.media.MediaCasException.ResourceBusyException,String getLocalizedMessage(), Creates a localized description of this throwable.
android.media.MediaCasException.ResourceBusyException,String getMessage(), Returns the detail message string of this throwable.
android.media.MediaCasException.ResourceBusyException,StackTraceElement[] getStackTrace(), Provides programmatic access to the stack trace information printed by printStackTrace().
android.media.MediaCasException.ResourceBusyException,final Throwable[] getSuppressed()," Returns an array containing all of the exceptions that were suppressed, typically by the try-with-resources statement, in order to deliver this exception."
android.media.MediaCasException.ResourceBusyException,Throwable initCause(Throwable cause), Initializes the cause of this throwable to the specified value.
android.media.MediaCasException.ResourceBusyException,void printStackTrace(), Prints this throwable and its backtrace to the standard error stream.
android.media.MediaCasException.ResourceBusyException,void printStackTrace(PrintWriter s), Prints this throwable and its backtrace to the specified print writer.
android.media.MediaCasException.ResourceBusyException,void printStackTrace(PrintStream s), Prints this throwable and its backtrace to the specified print stream.
android.media.MediaCasException.ResourceBusyException,void setStackTrace(StackTraceElement[] stackTrace), Sets the stack trace elements that will be returned by getStackTrace() and printed by printStackTrace() and related methods.
android.media.MediaCasException.ResourceBusyException,String toString(), Returns a short description of this throwable.
android.media.MediaCasException.ResourceBusyException,Object clone(), Creates and returns a copy of this object.
android.media.MediaCasException.ResourceBusyException,boolean equals(Object obj)," Indicates whether some other object is ""equal to"" this one."
android.media.MediaCasException.ResourceBusyException,void finalize(), Called by the garbage collector on an object when garbage collection determines that there are no more references to the object.
android.media.MediaCasException.ResourceBusyException,final Class<?> getClass(), Returns the runtime class of this Object.
android.media.MediaCasException.ResourceBusyException,int hashCode(), Returns a hash code value for the object.
android.media.MediaCasException.ResourceBusyException,final void notify(), Wakes up a single thread that is waiting on this object's monitor.
android.media.MediaCasException.ResourceBusyException,final void notifyAll(), Wakes up all threads that are waiting on this object's monitor.
android.media.MediaCasException.ResourceBusyException,String toString(), Returns a string representation of the object.
android.media.MediaCasException.ResourceBusyException,"final void wait(long millis, int nanos)"," Causes the current thread to wait until another thread invokes the notify() method or the notifyAll() method for this object, or some other thread interrupts the current thread, or a certain amount of real time has elapsed."
android.media.MediaCasException.ResourceBusyException,final void wait(long millis)," Causes the current thread to wait until either another thread invokes the notify() method or the notifyAll() method for this object, or a specified amount of time has elapsed."
android.media.MediaCasException.ResourceBusyException,final void wait(), Causes the current thread to wait until another thread invokes the notify() method or the notifyAll() method for this object.
android.media.MediaCasException,final void addSuppressed(Throwable exception), Appends the specified exception to the exceptions that were suppressed in order to deliver this exception.
android.media.MediaCasException,Throwable fillInStackTrace(), Fills in the execution stack trace.
android.media.MediaCasException,Throwable getCause(), Returns the cause of this throwable or null if the cause is nonexistent or unknown.
android.media.MediaCasException,String getLocalizedMessage(), Creates a localized description of this throwable.
android.media.MediaCasException,String getMessage(), Returns the detail message string of this throwable.
android.media.MediaCasException,StackTraceElement[] getStackTrace(), Provides programmatic access to the stack trace information printed by printStackTrace().
android.media.MediaCasException,final Throwable[] getSuppressed()," Returns an array containing all of the exceptions that were suppressed, typically by the try-with-resources statement, in order to deliver this exception."
android.media.MediaCasException,Throwable initCause(Throwable cause), Initializes the cause of this throwable to the specified value.
android.media.MediaCasException,void printStackTrace(), Prints this throwable and its backtrace to the standard error stream.
android.media.MediaCasException,void printStackTrace(PrintWriter s), Prints this throwable and its backtrace to the specified print writer.
android.media.MediaCasException,void printStackTrace(PrintStream s), Prints this throwable and its backtrace to the specified print stream.
android.media.MediaCasException,void setStackTrace(StackTraceElement[] stackTrace), Sets the stack trace elements that will be returned by getStackTrace() and printed by printStackTrace() and related methods.
android.media.MediaCasException,String toString(), Returns a short description of this throwable.
android.media.MediaCasException,Object clone(), Creates and returns a copy of this object.
android.media.MediaCasException,boolean equals(Object obj)," Indicates whether some other object is ""equal to"" this one."
android.media.MediaCasException,void finalize(), Called by the garbage collector on an object when garbage collection determines that there are no more references to the object.
android.media.MediaCasException,final Class<?> getClass(), Returns the runtime class of this Object.
android.media.MediaCasException,int hashCode(), Returns a hash code value for the object.
android.media.MediaCasException,final void notify(), Wakes up a single thread that is waiting on this object's monitor.
android.media.MediaCasException,final void notifyAll(), Wakes up all threads that are waiting on this object's monitor.
android.media.MediaCasException,String toString(), Returns a string representation of the object.
android.media.MediaCasException,"final void wait(long millis, int nanos)"," Causes the current thread to wait until another thread invokes the notify() method or the notifyAll() method for this object, or some other thread interrupts the current thread, or a certain amount of real time has elapsed."
android.media.MediaCasException,final void wait(long millis)," Causes the current thread to wait until either another thread invokes the notify() method or the notifyAll() method for this object, or a specified amount of time has elapsed."
android.media.MediaCasException,final void wait(), Causes the current thread to wait until another thread invokes the notify() method or the notifyAll() method for this object.
android.media.MediaCasException.UnsupportedCasException,final void addSuppressed(Throwable exception), Appends the specified exception to the exceptions that were suppressed in order to deliver this exception.
android.media.MediaCasException.UnsupportedCasException,Throwable fillInStackTrace(), Fills in the execution stack trace.
android.media.MediaCasException.UnsupportedCasException,Throwable getCause(), Returns the cause of this throwable or null if the cause is nonexistent or unknown.
android.media.MediaCasException.UnsupportedCasException,String getLocalizedMessage(), Creates a localized description of this throwable.
android.media.MediaCasException.UnsupportedCasException,String getMessage(), Returns the detail message string of this throwable.
android.media.MediaCasException.UnsupportedCasException,StackTraceElement[] getStackTrace(), Provides programmatic access to the stack trace information printed by printStackTrace().
android.media.MediaCasException.UnsupportedCasException,final Throwable[] getSuppressed()," Returns an array containing all of the exceptions that were suppressed, typically by the try-with-resources statement, in order to deliver this exception."
android.media.MediaCasException.UnsupportedCasException,Throwable initCause(Throwable cause), Initializes the cause of this throwable to the specified value.
android.media.MediaCasException.UnsupportedCasException,void printStackTrace(), Prints this throwable and its backtrace to the standard error stream.
android.media.MediaCasException.UnsupportedCasException,void printStackTrace(PrintWriter s), Prints this throwable and its backtrace to the specified print writer.
android.media.MediaCasException.UnsupportedCasException,void printStackTrace(PrintStream s), Prints this throwable and its backtrace to the specified print stream.
android.media.MediaCasException.UnsupportedCasException,void setStackTrace(StackTraceElement[] stackTrace), Sets the stack trace elements that will be returned by getStackTrace() and printed by printStackTrace() and related methods.
android.media.MediaCasException.UnsupportedCasException,String toString(), Returns a short description of this throwable.
android.media.MediaCasException.UnsupportedCasException,Object clone(), Creates and returns a copy of this object.
android.media.MediaCasException.UnsupportedCasException,boolean equals(Object obj)," Indicates whether some other object is ""equal to"" this one."
android.media.MediaCasException.UnsupportedCasException,void finalize(), Called by the garbage collector on an object when garbage collection determines that there are no more references to the object.
android.media.MediaCasException.UnsupportedCasException,final Class<?> getClass(), Returns the runtime class of this Object.
android.media.MediaCasException.UnsupportedCasException,int hashCode(), Returns a hash code value for the object.
android.media.MediaCasException.UnsupportedCasException,final void notify(), Wakes up a single thread that is waiting on this object's monitor.
android.media.MediaCasException.UnsupportedCasException,final void notifyAll(), Wakes up all threads that are waiting on this object's monitor.
android.media.MediaCasException.UnsupportedCasException,String toString(), Returns a string representation of the object.
android.media.MediaCasException.UnsupportedCasException,"final void wait(long millis, int nanos)"," Causes the current thread to wait until another thread invokes the notify() method or the notifyAll() method for this object, or some other thread interrupts the current thread, or a certain amount of real time has elapsed."
android.media.MediaCasException.UnsupportedCasException,final void wait(long millis)," Causes the current thread to wait until either another thread invokes the notify() method or the notifyAll() method for this object, or a specified amount of time has elapsed."
android.media.MediaCasException.UnsupportedCasException,final void wait(), Causes the current thread to wait until another thread invokes the notify() method or the notifyAll() method for this object.
android.media.MediaCasStateException,String getDiagnosticInfo(), Retrieve a developer-readable diagnostic information string associated with the exception.
android.media.MediaCodec.BufferInfo,"void set(int newOffset, int newSize, long newTimeUs, int newFlags)", Update the buffer metadata information.
android.media.MediaCodec.Callback,"abstract void onError(MediaCodec codec, MediaCodec.CodecException e)", Called when the MediaCodec encountered an error
android.media.MediaCodec.Callback,"abstract void onInputBufferAvailable(MediaCodec codec, int index)", Called when an input buffer becomes available.
android.media.MediaCodec.Callback,"abstract void onOutputBufferAvailable(MediaCodec codec, int index, MediaCodec.BufferInfo info)", Called when an output buffer becomes available.
android.media.MediaCodec.Callback,"abstract void onOutputFormatChanged(MediaCodec codec, MediaFormat format)", Called when the output format has changed
android.media.MediaCodec.CodecException,String getDiagnosticInfo(), Retrieve a developer-readable diagnostic information string associated with the exception.
android.media.MediaCodec.CodecException,int getErrorCode(), Retrieve the error code associated with a CodecException
android.media.MediaCodec.CodecException,boolean isRecoverable()," Returns true if the codec cannot proceed further, but can be recovered by stopping, configuring, and starting again."
android.media.MediaCodec.CodecException,boolean isTransient()," Returns true if the codec exception is a transient issue, perhaps due to resource constraints, and that the method (or encoding/decoding) may be retried at a later time."
android.media.MediaCodec.CryptoException,int getErrorCode(), Retrieve the error code associated with a CryptoException
android.media.MediaCodec.CryptoInfo.Pattern,int getEncryptBlocks(), Return the number of blocks to encrypt in a sample encryption pattern.
android.media.MediaCodec.CryptoInfo.Pattern,int getSkipBlocks(), Return the number of blocks to skip in a sample encryption pattern.
android.media.MediaCodec.CryptoInfo.Pattern,"void set(int blocksToEncrypt, int blocksToSkip)", Set the number of blocks to encrypt and skip in a sample encryption pattern.
android.media.MediaCodec.CryptoInfo,"void set(int newNumSubSamples, int[] newNumBytesOfClearData, int[] newNumBytesOfEncryptedData, byte[] newKey, byte[] newIV, int newMode)"," Set the subsample count, clear/encrypted sizes, key, IV and mode fields of a MediaCodec.CryptoInfo instance."
android.media.MediaCodec.CryptoInfo,void setPattern(MediaCodec.CryptoInfo.Pattern newPattern), Set the encryption pattern on a MediaCodec.CryptoInfo instance.
android.media.MediaCodec.CryptoInfo,String toString(), Returns a string representation of the object.
android.media.MediaCodec.MetricsConstants,Object clone(), Creates and returns a copy of this object.
android.media.MediaCodec.MetricsConstants,boolean equals(Object obj)," Indicates whether some other object is ""equal to"" this one."
android.media.MediaCodec.MetricsConstants,void finalize(), Called by the garbage collector on an object when garbage collection determines that there are no more references to the object.
android.media.MediaCodec.MetricsConstants,final Class<?> getClass(), Returns the runtime class of this Object.
android.media.MediaCodec.MetricsConstants,int hashCode(), Returns a hash code value for the object.
android.media.MediaCodec.MetricsConstants,final void notify(), Wakes up a single thread that is waiting on this object's monitor.
android.media.MediaCodec.MetricsConstants,final void notifyAll(), Wakes up all threads that are waiting on this object's monitor.
android.media.MediaCodec.MetricsConstants,String toString(), Returns a string representation of the object.
android.media.MediaCodec.MetricsConstants,"final void wait(long millis, int nanos)"," Causes the current thread to wait until another thread invokes the notify() method or the notifyAll() method for this object, or some other thread interrupts the current thread, or a certain amount of real time has elapsed."
android.media.MediaCodec.MetricsConstants,final void wait(long millis)," Causes the current thread to wait until either another thread invokes the notify() method or the notifyAll() method for this object, or a specified amount of time has elapsed."
android.media.MediaCodec.MetricsConstants,final void wait(), Causes the current thread to wait until another thread invokes the notify() method or the notifyAll() method for this object.
android.media.MediaCodec.OnFrameRenderedListener,"abstract void onFrameRendered(MediaCodec codec, long presentationTimeUs, long nanoTime)", Called when an output frame has rendered on the output surface.
android.media.MediaCodec,"void configure(MediaFormat format, Surface surface, MediaCrypto crypto, int flags)", Configures a component.
android.media.MediaCodec,"void configure(MediaFormat format, Surface surface, int flags, MediaDescrambler descrambler)", Configure a component to be used with a descrambler.
android.media.MediaCodec,static MediaCodec createByCodecName(String name), If you know the exact name of the component you want to instantiate use this method to instantiate it.
android.media.MediaCodec,static MediaCodec createDecoderByType(String type), Instantiate the preferred decoder supporting input data of the given mime type.
android.media.MediaCodec,static MediaCodec createEncoderByType(String type), Instantiate the preferred encoder supporting output data of the given mime type.
android.media.MediaCodec,Surface createInputSurface()," Requests a Surface to use as the input to an encoder, in place of input buffers."
android.media.MediaCodec,static Surface createPersistentInputSurface()," Create a persistent input surface that can be used with codecs that normally have an input surface, such as video encoders."
android.media.MediaCodec,int dequeueInputBuffer(long timeoutUs), Returns the index of an input buffer to be filled with valid data or -1 if no such buffer is currently available.
android.media.MediaCodec,"int dequeueOutputBuffer(MediaCodec.BufferInfo info, long timeoutUs)"," Dequeue an output buffer, block at most ""timeoutUs"" microseconds."
android.media.MediaCodec,void flush(), Flush both input and output ports of the component.
android.media.MediaCodec,MediaCodecInfo getCodecInfo(), Get the codec info.
android.media.MediaCodec,ByteBuffer getInputBuffer(int index)," Returns a cleared, writable ByteBuffer object for a dequeued input buffer index to contain the input data."
android.media.MediaCodec,ByteBuffer[] getInputBuffers()," This method was deprecated in API level 21. Use the new getInputBuffer(int) method instead each time an input buffer is dequeued. Note: As of API 21, dequeued input buffers are automatically cleared. Do not use this method if using an input surface."
android.media.MediaCodec,MediaFormat getInputFormat()," Call this after configure(MediaFormat, Surface, MediaCrypto, int) returns successfully to get the input format accepted by the codec."
android.media.MediaCodec,Image getInputImage(int index), Returns a writable Image object for a dequeued input buffer index to contain the raw input video frame.
android.media.MediaCodec,PersistableBundle getMetrics(), Return Metrics data about the current codec instance.
android.media.MediaCodec,String getName(), Get the component name.
android.media.MediaCodec,ByteBuffer getOutputBuffer(int index), Returns a read-only ByteBuffer for a dequeued output buffer index.
android.media.MediaCodec,ByteBuffer[] getOutputBuffers()," This method was deprecated in API level 21. Use the new getOutputBuffer(int) method instead each time an output buffer is dequeued. This method is not supported if codec is configured in asynchronous mode. Note: As of API 21, the position and limit of output buffers that are dequeued will be set to the valid data range. Do not use this method if using an output surface."
android.media.MediaCodec,MediaFormat getOutputFormat(int index), Returns the output format for a specific output buffer.
android.media.MediaCodec,MediaFormat getOutputFormat(), Call this after dequeueOutputBuffer signals a format change by returning INFO_OUTPUT_FORMAT_CHANGED.
android.media.MediaCodec,Image getOutputImage(int index), Returns a read-only Image object for a dequeued output buffer index that contains the raw video frame.
android.media.MediaCodec,"void queueInputBuffer(int index, int offset, int size, long presentationTimeUs, int flags)", After filling a range of the input buffer at the specified index submit it to the component.
android.media.MediaCodec,"void queueSecureInputBuffer(int index, int offset, MediaCodec.CryptoInfo info, long presentationTimeUs, int flags)", Similar to queueInputBuffer but submits a buffer that is potentially encrypted.
android.media.MediaCodec,void release(), Free up resources used by the codec instance.
android.media.MediaCodec,"void releaseOutputBuffer(int index, boolean render)"," If you are done with a buffer, use this call to return the buffer to the codec or to render it on the output surface."
android.media.MediaCodec,"void releaseOutputBuffer(int index, long renderTimestampNs)"," If you are done with a buffer, use this call to update its surface timestamp and return it to the codec to render it on the output surface."
android.media.MediaCodec,void reset(), Returns the codec to its initial (Uninitialized) state.
android.media.MediaCodec,"void setCallback(MediaCodec.Callback cb, Handler handler)", Sets an asynchronous callback for actionable MediaCodec events.
android.media.MediaCodec,void setCallback(MediaCodec.Callback cb), Sets an asynchronous callback for actionable MediaCodec events on the default looper.
android.media.MediaCodec,void setInputSurface(Surface surface), Configures the codec (e.g.
android.media.MediaCodec,"void setOnFrameRenderedListener(MediaCodec.OnFrameRenderedListener listener, Handler handler)", Registers a callback to be invoked when an output frame is rendered on the output surface.
android.media.MediaCodec,void setOutputSurface(Surface surface), Dynamically sets the output surface of a codec.
android.media.MediaCodec,void setParameters(Bundle params), Communicate additional parameter changes to the component instance.
android.media.MediaCodec,void setVideoScalingMode(int mode)," If a surface has been specified in a previous call to configure(MediaFormat, Surface, MediaCrypto, int) specifies the scaling mode to use."
android.media.MediaCodec,void signalEndOfInputStream(), Signals end-of-stream on input.
android.media.MediaCodec,void start()," After successfully configuring the component, call start."
android.media.MediaCodec,void stop()," Finish the decode/encode session, note that the codec instance remains active and ready to be start()ed again."
android.media.MediaCodecInfo.AudioCapabilities,Range<Integer> getBitrateRange(), Returns the range of supported bitrates in bits/second.
android.media.MediaCodecInfo.AudioCapabilities,int getMaxInputChannelCount(), Returns the maximum number of input channels supported.
android.media.MediaCodecInfo.AudioCapabilities,Range[]<Integer> getSupportedSampleRateRanges(), Returns the array of supported sample rate ranges.
android.media.MediaCodecInfo.AudioCapabilities,int[] getSupportedSampleRates(), Returns the array of supported sample rates if the codec supports only discrete values.
android.media.MediaCodecInfo.AudioCapabilities,boolean isSampleRateSupported(int sampleRate), Query whether the sample rate is supported by the codec.
android.media.MediaCodecInfo.CodecCapabilities,"static MediaCodecInfo.CodecCapabilities createFromProfileLevel(String mime, int profile, int level)"," Retrieve the codec capabilities for a certain mime type, profile and level."
android.media.MediaCodecInfo.CodecCapabilities,MediaCodecInfo.AudioCapabilities getAudioCapabilities(), Returns the audio capabilities or null if this is not an audio codec.
android.media.MediaCodecInfo.CodecCapabilities,MediaFormat getDefaultFormat(), Returns a MediaFormat object with default values for configurations that have defaults.
android.media.MediaCodecInfo.CodecCapabilities,MediaCodecInfo.EncoderCapabilities getEncoderCapabilities(), Returns the encoding capabilities or null if this is not an encoder.
android.media.MediaCodecInfo.CodecCapabilities,int getMaxSupportedInstances(), Returns the max number of the supported concurrent codec instances.
android.media.MediaCodecInfo.CodecCapabilities,String getMimeType(), Returns the mime type for which this codec-capability object was created.
android.media.MediaCodecInfo.CodecCapabilities,MediaCodecInfo.VideoCapabilities getVideoCapabilities(), Returns the video capabilities or null if this is not a video codec.
android.media.MediaCodecInfo.CodecCapabilities,boolean isFeatureRequired(String name), Query codec feature requirements.
android.media.MediaCodecInfo.CodecCapabilities,boolean isFeatureSupported(String name), Query codec feature capabilities.
android.media.MediaCodecInfo.CodecCapabilities,boolean isFormatSupported(MediaFormat format), Query whether codec supports a given MediaFormat.
android.media.MediaCodecInfo.CodecProfileLevel,Object clone(), Creates and returns a copy of this object.
android.media.MediaCodecInfo.CodecProfileLevel,boolean equals(Object obj)," Indicates whether some other object is ""equal to"" this one."
android.media.MediaCodecInfo.CodecProfileLevel,void finalize(), Called by the garbage collector on an object when garbage collection determines that there are no more references to the object.
android.media.MediaCodecInfo.CodecProfileLevel,final Class<?> getClass(), Returns the runtime class of this Object.
android.media.MediaCodecInfo.CodecProfileLevel,int hashCode(), Returns a hash code value for the object.
android.media.MediaCodecInfo.CodecProfileLevel,final void notify(), Wakes up a single thread that is waiting on this object's monitor.
android.media.MediaCodecInfo.CodecProfileLevel,final void notifyAll(), Wakes up all threads that are waiting on this object's monitor.
android.media.MediaCodecInfo.CodecProfileLevel,String toString(), Returns a string representation of the object.
android.media.MediaCodecInfo.CodecProfileLevel,"final void wait(long millis, int nanos)"," Causes the current thread to wait until another thread invokes the notify() method or the notifyAll() method for this object, or some other thread interrupts the current thread, or a certain amount of real time has elapsed."
android.media.MediaCodecInfo.CodecProfileLevel,final void wait(long millis)," Causes the current thread to wait until either another thread invokes the notify() method or the notifyAll() method for this object, or a specified amount of time has elapsed."
android.media.MediaCodecInfo.CodecProfileLevel,final void wait(), Causes the current thread to wait until another thread invokes the notify() method or the notifyAll() method for this object.
android.media.MediaCodecInfo.EncoderCapabilities,Range<Integer> getComplexityRange(), Returns the supported range of encoder complexity values.
android.media.MediaCodecInfo.EncoderCapabilities,Range<Integer> getQualityRange(), Returns the supported range of quality values.
android.media.MediaCodecInfo.EncoderCapabilities,boolean isBitrateModeSupported(int mode), Query whether a bitrate mode is supported.
android.media.MediaCodecInfo,MediaCodecInfo.CodecCapabilities getCapabilitiesForType(String type), Enumerates the capabilities of the codec component.
android.media.MediaCodecInfo,String getName(), Retrieve the codec name.
android.media.MediaCodecInfo,String[] getSupportedTypes(), Query the media types supported by the codec.
android.media.MediaCodecInfo,boolean isEncoder(), Query if the codec is an encoder.
android.media.MediaCodecInfo.VideoCapabilities,"boolean areSizeAndRateSupported(int width, int height, double frameRate)", Returns whether a given video size (width and height) and frameRate combination is supported.
android.media.MediaCodecInfo.VideoCapabilities,"Range<Double> getAchievableFrameRatesFor(int width, int height)", Returns the range of achievable video frame rates for a video size.
android.media.MediaCodecInfo.VideoCapabilities,Range<Integer> getBitrateRange(), Returns the range of supported bitrates in bits/second.
android.media.MediaCodecInfo.VideoCapabilities,int getHeightAlignment(), Returns the alignment requirement for video height (in pixels).
android.media.MediaCodecInfo.VideoCapabilities,Range<Integer> getSupportedFrameRates(), Returns the range of supported frame rates.
android.media.MediaCodecInfo.VideoCapabilities,"Range<Double> getSupportedFrameRatesFor(int width, int height)", Returns the range of supported video frame rates for a video size.
android.media.MediaCodecInfo.VideoCapabilities,Range<Integer> getSupportedHeights(), Returns the range of supported video heights.
android.media.MediaCodecInfo.VideoCapabilities,Range<Integer> getSupportedHeightsFor(int width), Returns the range of supported video heights for a video width
android.media.MediaCodecInfo.VideoCapabilities,Range<Integer> getSupportedWidths(), Returns the range of supported video widths.
android.media.MediaCodecInfo.VideoCapabilities,Range<Integer> getSupportedWidthsFor(int height), Returns the range of supported video widths for a video height.
android.media.MediaCodecInfo.VideoCapabilities,int getWidthAlignment(), Returns the alignment requirement for video width (in pixels).
android.media.MediaCodecInfo.VideoCapabilities,"boolean isSizeSupported(int width, int height)", Returns whether a given video size (width and height) is supported.
android.media.MediaCodecList,String findDecoderForFormat(MediaFormat format), Find a decoder supporting a given MediaFormat in the list of media-codecs.
android.media.MediaCodecList,String findEncoderForFormat(MediaFormat format), Find an encoder supporting a given MediaFormat in the list of media-codecs.
android.media.MediaCodecList,static int getCodecCount(), This method was deprecated in API level 21. Use getCodecInfos() instead.
android.media.MediaCodecList,static MediaCodecInfo getCodecInfoAt(int index), This method was deprecated in API level 21. Use getCodecInfos() instead.
android.media.MediaCodecList,MediaCodecInfo[] getCodecInfos(), Returns the list of MediaCodecInfo objects for the list of media-codecs.
android.media.MediaCrypto,static boolean isCryptoSchemeSupported(UUID uuid), Query if the given scheme identified by its UUID is supported on this device.
android.media.MediaCrypto,void release(),
android.media.MediaCrypto,boolean requiresSecureDecoderComponent(String mime), Query if the crypto scheme requires the use of a secure decoder to decode data of the given mime type.
android.media.MediaCrypto,void setMediaDrmSession(byte[] sessionId), Associate a MediaDrm session with this MediaCrypto instance.
android.media.MediaCryptoException,final void addSuppressed(Throwable exception), Appends the specified exception to the exceptions that were suppressed in order to deliver this exception.
android.media.MediaCryptoException,Throwable fillInStackTrace(), Fills in the execution stack trace.
android.media.MediaCryptoException,Throwable getCause(), Returns the cause of this throwable or null if the cause is nonexistent or unknown.
android.media.MediaCryptoException,String getLocalizedMessage(), Creates a localized description of this throwable.
android.media.MediaCryptoException,String getMessage(), Returns the detail message string of this throwable.
android.media.MediaCryptoException,StackTraceElement[] getStackTrace(), Provides programmatic access to the stack trace information printed by printStackTrace().
android.media.MediaCryptoException,final Throwable[] getSuppressed()," Returns an array containing all of the exceptions that were suppressed, typically by the try-with-resources statement, in order to deliver this exception."
android.media.MediaCryptoException,Throwable initCause(Throwable cause), Initializes the cause of this throwable to the specified value.
android.media.MediaCryptoException,void printStackTrace(), Prints this throwable and its backtrace to the standard error stream.
android.media.MediaCryptoException,void printStackTrace(PrintWriter s), Prints this throwable and its backtrace to the specified print writer.
android.media.MediaCryptoException,void printStackTrace(PrintStream s), Prints this throwable and its backtrace to the specified print stream.
android.media.MediaCryptoException,void setStackTrace(StackTraceElement[] stackTrace), Sets the stack trace elements that will be returned by getStackTrace() and printed by printStackTrace() and related methods.
android.media.MediaCryptoException,String toString(), Returns a short description of this throwable.
android.media.MediaCryptoException,Object clone(), Creates and returns a copy of this object.
android.media.MediaCryptoException,boolean equals(Object obj)," Indicates whether some other object is ""equal to"" this one."
android.media.MediaCryptoException,void finalize(), Called by the garbage collector on an object when garbage collection determines that there are no more references to the object.
android.media.MediaCryptoException,final Class<?> getClass(), Returns the runtime class of this Object.
android.media.MediaCryptoException,int hashCode(), Returns a hash code value for the object.
android.media.MediaCryptoException,final void notify(), Wakes up a single thread that is waiting on this object's monitor.
android.media.MediaCryptoException,final void notifyAll(), Wakes up all threads that are waiting on this object's monitor.
android.media.MediaCryptoException,String toString(), Returns a string representation of the object.
android.media.MediaCryptoException,"final void wait(long millis, int nanos)"," Causes the current thread to wait until another thread invokes the notify() method or the notifyAll() method for this object, or some other thread interrupts the current thread, or a certain amount of real time has elapsed."
android.media.MediaCryptoException,final void wait(long millis)," Causes the current thread to wait until either another thread invokes the notify() method or the notifyAll() method for this object, or a specified amount of time has elapsed."
android.media.MediaCryptoException,final void wait(), Causes the current thread to wait until another thread invokes the notify() method or the notifyAll() method for this object.
android.media.MediaDataSource,abstract long getSize(), Called to get the size of the data source.
android.media.MediaDataSource,"abstract int readAt(long position, byte[] buffer, int offset, int size)", Called to request data from the given position.
android.media.MediaDescrambler,void close()," Closes this resource, relinquishing any underlying resources."
android.media.MediaDescrambler,"int descramble(ByteBuffer srcBuf, ByteBuffer dstBuf, MediaCodec.CryptoInfo cryptoInfo)", Descramble a ByteBuffer of data described by a MediaCodec.CryptoInfo structure.
android.media.MediaDescrambler,boolean requiresSecureDecoderComponent(String mime), Query if the scrambling scheme requires the use of a secure decoder to decode data of the given mime type.
android.media.MediaDescrambler,void setMediaCasSession(MediaCas.Session session), Associate a MediaCas session with this MediaDescrambler instance.
android.media.MediaDescription.Builder,MediaDescription build(),
android.media.MediaDescription.Builder,MediaDescription.Builder setDescription(CharSequence description), Sets the description.
android.media.MediaDescription.Builder,MediaDescription.Builder setExtras(Bundle extras), Sets a bundle of extras.
android.media.MediaDescription.Builder,MediaDescription.Builder setIconBitmap(Bitmap icon), Sets the icon.
android.media.MediaDescription.Builder,MediaDescription.Builder setIconUri(Uri iconUri), Sets the icon uri.
android.media.MediaDescription.Builder,MediaDescription.Builder setMediaId(String mediaId), Sets the media id.
android.media.MediaDescription.Builder,MediaDescription.Builder setMediaUri(Uri mediaUri), Sets the media uri.
android.media.MediaDescription.Builder,MediaDescription.Builder setSubtitle(CharSequence subtitle), Sets the subtitle.
android.media.MediaDescription.Builder,MediaDescription.Builder setTitle(CharSequence title), Sets the title.
android.media.MediaDescription,int describeContents(), Describe the kinds of special objects contained in this Parcelable instance's marshaled representation.
android.media.MediaDescription,boolean equals(Object o)," Indicates whether some other object is ""equal to"" this one."
android.media.MediaDescription,CharSequence getDescription(), Returns a description suitable for display or null.
android.media.MediaDescription,Bundle getExtras(), Returns any extras that were added to the description.
android.media.MediaDescription,Bitmap getIconBitmap(), Returns a bitmap icon suitable for display or null.
android.media.MediaDescription,Uri getIconUri(), Returns a Uri for an icon suitable for display or null.
android.media.MediaDescription,String getMediaId(), Returns the media id or null.
android.media.MediaDescription,Uri getMediaUri(), Returns a Uri representing this content or null.
android.media.MediaDescription,CharSequence getSubtitle(), Returns a subtitle suitable for display or null.
android.media.MediaDescription,CharSequence getTitle(), Returns a title suitable for display or null.
android.media.MediaDescription,String toString(), Returns a string representation of the object.
android.media.MediaDescription,"void writeToParcel(Parcel dest, int flags)", Flatten this object in to a Parcel.
android.media.MediaDrm.CryptoSession,"byte[] decrypt(byte[] keyid, byte[] input, byte[] iv)", Decrypt data using the CryptoSessions's cipher algorithm
android.media.MediaDrm.CryptoSession,"byte[] encrypt(byte[] keyid, byte[] input, byte[] iv)", Encrypt data using the CryptoSession's cipher algorithm
android.media.MediaDrm.CryptoSession,"byte[] sign(byte[] keyid, byte[] message)", Sign data using the CryptoSessions's mac algorithm.
android.media.MediaDrm.CryptoSession,"boolean verify(byte[] keyid, byte[] message, byte[] signature)", Verify a signature using the CryptoSessions's mac algorithm.
android.media.MediaDrm.HdcpLevel,abstract Class<?extendsAnnotation> annotationType(), Returns the annotation type of this annotation.
android.media.MediaDrm.HdcpLevel,abstract boolean equals(Object obj), Returns true if the specified object represents an annotation that is logically equivalent to this one.
android.media.MediaDrm.HdcpLevel,abstract int hashCode()," Returns the hash code of this annotation, as defined below: The hash code of an annotation is the sum of the hash codes of its members (including those with default values), as defined below: The hash code of an annotation member is (127 times the hash code of the member-name as computed by hashCode()) XOR the hash code of the member-value, as defined below: The hash code of a member-value depends on its type: The hash code of a primitive value v is equal to WrapperType.valueOf(v).hashCode(), where WrapperType is the wrapper type corresponding to the primitive type of v (Byte, Character, Double, Float, Integer, Long, Short, or Boolean)."
android.media.MediaDrm.HdcpLevel,abstract String toString(), Returns a string representation of this annotation.
android.media.MediaDrm.KeyRequest,byte[] getData(), Get the opaque message data
android.media.MediaDrm.KeyRequest,String getDefaultUrl()," Get the default URL to use when sending the key request message to a server, if known."
android.media.MediaDrm.KeyRequest,int getRequestType(), Get the type of the request
android.media.MediaDrm.KeyStatus,byte[] getKeyId(), Returns the id for the key
android.media.MediaDrm.KeyStatus,int getStatusCode(), Returns the status code for the key
android.media.MediaDrm.MediaDrmStateException,String getDiagnosticInfo(), Retrieve a developer-readable diagnostic information string associated with the exception.
android.media.MediaDrm.MetricsConstants,Object clone(), Creates and returns a copy of this object.
android.media.MediaDrm.MetricsConstants,boolean equals(Object obj)," Indicates whether some other object is ""equal to"" this one."
android.media.MediaDrm.MetricsConstants,void finalize(), Called by the garbage collector on an object when garbage collection determines that there are no more references to the object.
android.media.MediaDrm.MetricsConstants,final Class<?> getClass(), Returns the runtime class of this Object.
android.media.MediaDrm.MetricsConstants,int hashCode(), Returns a hash code value for the object.
android.media.MediaDrm.MetricsConstants,final void notify(), Wakes up a single thread that is waiting on this object's monitor.
android.media.MediaDrm.MetricsConstants,final void notifyAll(), Wakes up all threads that are waiting on this object's monitor.
android.media.MediaDrm.MetricsConstants,String toString(), Returns a string representation of the object.
android.media.MediaDrm.MetricsConstants,"final void wait(long millis, int nanos)"," Causes the current thread to wait until another thread invokes the notify() method or the notifyAll() method for this object, or some other thread interrupts the current thread, or a certain amount of real time has elapsed."
android.media.MediaDrm.MetricsConstants,final void wait(long millis)," Causes the current thread to wait until either another thread invokes the notify() method or the notifyAll() method for this object, or a specified amount of time has elapsed."
android.media.MediaDrm.MetricsConstants,final void wait(), Causes the current thread to wait until another thread invokes the notify() method or the notifyAll() method for this object.
android.media.MediaDrm.OnEventListener,"abstract void onEvent(MediaDrm md, byte[] sessionId, int event, int extra, byte[] data)", Called when an event occurs that requires the app to be notified
android.media.MediaDrm.OnExpirationUpdateListener,"abstract void onExpirationUpdate(MediaDrm md, byte[] sessionId, long expirationTime)"," Called when a session expiration update occurs, to inform the app about the change in expiration time"
android.media.MediaDrm.OnKeyStatusChangeListener,"abstract void onKeyStatusChange(MediaDrm md, byte[] sessionId, List<MediaDrm.KeyStatus> keyInformation, boolean hasNewUsableKey)"," Called when the keys in a session change status, such as when the license is renewed or expires."
android.media.MediaDrm.ProvisionRequest,byte[] getData(), Get the opaque message data
android.media.MediaDrm.ProvisionRequest,String getDefaultUrl()," Get the default URL to use when sending the provision request message to a server, if known."
android.media.MediaDrm.SecurityLevel,abstract Class<?extendsAnnotation> annotationType(), Returns the annotation type of this annotation.
android.media.MediaDrm.SecurityLevel,abstract boolean equals(Object obj), Returns true if the specified object represents an annotation that is logically equivalent to this one.
android.media.MediaDrm.SecurityLevel,abstract int hashCode()," Returns the hash code of this annotation, as defined below: The hash code of an annotation is the sum of the hash codes of its members (including those with default values), as defined below: The hash code of an annotation member is (127 times the hash code of the member-name as computed by hashCode()) XOR the hash code of the member-value, as defined below: The hash code of a member-value depends on its type: The hash code of a primitive value v is equal to WrapperType.valueOf(v).hashCode(), where WrapperType is the wrapper type corresponding to the primitive type of v (Byte, Character, Double, Float, Integer, Long, Short, or Boolean)."
android.media.MediaDrm.SecurityLevel,abstract String toString(), Returns a string representation of this annotation.
android.media.MediaDrm,void close(), Releases resources associated with the current session of MediaDrm.
android.media.MediaDrm,void closeSession(byte[] sessionId), Close a session on the MediaDrm object that was previously opened with openSession().
android.media.MediaDrm,int getConnectedHdcpLevel(), Return the HDCP level negotiated with downstream receivers the device is connected to.
android.media.MediaDrm,"MediaDrm.CryptoSession getCryptoSession(byte[] sessionId, String cipherAlgorithm, String macAlgorithm)"," Obtain a CryptoSession object which can be used to encrypt, decrypt, sign and verify messages or data using the session keys established for the session using methods getKeyRequest(byte[], byte[], String, int, HashMap) and provideKeyResponse(byte[], byte[]) using a session key server."
android.media.MediaDrm,"MediaDrm.KeyRequest getKeyRequest(byte[] scope, byte[] init, String mimeType, int keyType, HashMap<String,String> optionalParameters)", A key request/response exchange occurs between the app and a license server to obtain or release keys used to decrypt encrypted content.
android.media.MediaDrm,int getMaxHdcpLevel(), Return the maximum supported HDCP level.
android.media.MediaDrm,int getMaxSessionCount(), Return the maximum number of MediaDrm sessions that may be opened simultaneosly among all MediaDrm instances for the active DRM scheme.
android.media.MediaDrm,PersistableBundle getMetrics(), Return Metrics data about the current MediaDrm instance.
android.media.MediaDrm,int getOpenSessionCount(), Return the number of MediaDrm sessions that are currently opened simultaneously among all MediaDrm instances for the active DRM scheme.
android.media.MediaDrm,byte[] getPropertyByteArray(String propertyName)," Read a MediaDrm byte array property value, given the property name string."
android.media.MediaDrm,String getPropertyString(String propertyName)," Read a MediaDrm String property value, given the property name string."
android.media.MediaDrm,MediaDrm.ProvisionRequest getProvisionRequest(), A provision request/response exchange occurs between the app and a provisioning server to retrieve a device certificate.
android.media.MediaDrm,byte[] getSecureStop(byte[] ssid), Access a specific secure stop given its secure stop ID.
android.media.MediaDrm,List<byte[]> getSecureStopIds(), Return a list of all secure stop IDs currently in persistent memory.
android.media.MediaDrm,List<byte[]> getSecureStops(), Secure stops are a way to enforce limits on the number of concurrent streams per subscriber across devices.
android.media.MediaDrm,int getSecurityLevel(byte[] sessionId), Return the current security level of a session.
android.media.MediaDrm,"static boolean isCryptoSchemeSupported(UUID uuid, String mimeType)"," Query if the given scheme identified by its UUID is supported on this device, and whether the DRM plugin is able to handle the media container format specified by mimeType."
android.media.MediaDrm,static boolean isCryptoSchemeSupported(UUID uuid), Query if the given scheme identified by its UUID is supported on this device.
android.media.MediaDrm,byte[] openSession(), Open a new session with the MediaDrm object.
android.media.MediaDrm,"byte[] provideKeyResponse(byte[] scope, byte[] response)"," A key response is received from the license server by the app, then it is provided to the MediaDrm instance using provideKeyResponse."
android.media.MediaDrm,void provideProvisionResponse(byte[] response)," After a provision response is received by the app, it is provided to the MediaDrm instance using this method."
android.media.MediaDrm,"HashMap<String,String> queryKeyStatus(byte[] sessionId)", Request an informative description of the key status for the session.
android.media.MediaDrm,void release(), This method was deprecated in API level P. replaced by close().
android.media.MediaDrm,void releaseAllSecureStops(), This method was deprecated in API level P. Remove all secure stops using removeAllSecureStops() instead.
android.media.MediaDrm,void releaseSecureStops(byte[] ssRelease), Process the secure stop server response message ssRelease.
android.media.MediaDrm,void removeAllSecureStops(), Remove all secure stops without requiring a secure stop release message from the license server.
android.media.MediaDrm,void removeKeys(byte[] sessionId), Remove the current keys from a session.
android.media.MediaDrm,void removeSecureStop(byte[] ssid), Remove a specific secure stop without requiring a secure stop release message from the license server.
android.media.MediaDrm,"void restoreKeys(byte[] sessionId, byte[] keySetId)", Restore persisted offline keys into a new session.
android.media.MediaDrm,void setOnEventListener(MediaDrm.OnEventListener listener), Register a callback to be invoked when an event occurs
android.media.MediaDrm,"void setOnExpirationUpdateListener(MediaDrm.OnExpirationUpdateListener listener, Handler handler)", Register a callback to be invoked when a session expiration update occurs.
android.media.MediaDrm,"void setOnKeyStatusChangeListener(MediaDrm.OnKeyStatusChangeListener listener, Handler handler)"," Register a callback to be invoked when the state of keys in a session change, e.g."
android.media.MediaDrm,"void setPropertyByteArray(String propertyName, byte[] value)"," Set a MediaDrm byte array property value, given the property name string and new value for the property."
android.media.MediaDrm,"void setPropertyString(String propertyName, String value)"," Set a MediaDrm String property value, given the property name string and new value for the property."
android.media.MediaDrm,"void setSecurityLevel(byte[] sessionId, int level)", Set the security level of a session.
android.media.MediaDrmException,final void addSuppressed(Throwable exception), Appends the specified exception to the exceptions that were suppressed in order to deliver this exception.
android.media.MediaDrmException,Throwable fillInStackTrace(), Fills in the execution stack trace.
android.media.MediaDrmException,Throwable getCause(), Returns the cause of this throwable or null if the cause is nonexistent or unknown.
android.media.MediaDrmException,String getLocalizedMessage(), Creates a localized description of this throwable.
android.media.MediaDrmException,String getMessage(), Returns the detail message string of this throwable.
android.media.MediaDrmException,StackTraceElement[] getStackTrace(), Provides programmatic access to the stack trace information printed by printStackTrace().
android.media.MediaDrmException,final Throwable[] getSuppressed()," Returns an array containing all of the exceptions that were suppressed, typically by the try-with-resources statement, in order to deliver this exception."
android.media.MediaDrmException,Throwable initCause(Throwable cause), Initializes the cause of this throwable to the specified value.
android.media.MediaDrmException,void printStackTrace(), Prints this throwable and its backtrace to the standard error stream.
android.media.MediaDrmException,void printStackTrace(PrintWriter s), Prints this throwable and its backtrace to the specified print writer.
android.media.MediaDrmException,void printStackTrace(PrintStream s), Prints this throwable and its backtrace to the specified print stream.
android.media.MediaDrmException,void setStackTrace(StackTraceElement[] stackTrace), Sets the stack trace elements that will be returned by getStackTrace() and printed by printStackTrace() and related methods.
android.media.MediaDrmException,String toString(), Returns a short description of this throwable.
android.media.MediaDrmException,Object clone(), Creates and returns a copy of this object.
android.media.MediaDrmException,boolean equals(Object obj)," Indicates whether some other object is ""equal to"" this one."
android.media.MediaDrmException,void finalize(), Called by the garbage collector on an object when garbage collection determines that there are no more references to the object.
android.media.MediaDrmException,final Class<?> getClass(), Returns the runtime class of this Object.
android.media.MediaDrmException,int hashCode(), Returns a hash code value for the object.
android.media.MediaDrmException,final void notify(), Wakes up a single thread that is waiting on this object's monitor.
android.media.MediaDrmException,final void notifyAll(), Wakes up all threads that are waiting on this object's monitor.
android.media.MediaDrmException,String toString(), Returns a string representation of the object.
android.media.MediaDrmException,"final void wait(long millis, int nanos)"," Causes the current thread to wait until another thread invokes the notify() method or the notifyAll() method for this object, or some other thread interrupts the current thread, or a certain amount of real time has elapsed."
android.media.MediaDrmException,final void wait(long millis)," Causes the current thread to wait until either another thread invokes the notify() method or the notifyAll() method for this object, or a specified amount of time has elapsed."
android.media.MediaDrmException,final void wait(), Causes the current thread to wait until another thread invokes the notify() method or the notifyAll() method for this object.
android.media.MediaDrmResetException,final void addSuppressed(Throwable exception), Appends the specified exception to the exceptions that were suppressed in order to deliver this exception.
android.media.MediaDrmResetException,Throwable fillInStackTrace(), Fills in the execution stack trace.
android.media.MediaDrmResetException,Throwable getCause(), Returns the cause of this throwable or null if the cause is nonexistent or unknown.
android.media.MediaDrmResetException,String getLocalizedMessage(), Creates a localized description of this throwable.
android.media.MediaDrmResetException,String getMessage(), Returns the detail message string of this throwable.
android.media.MediaDrmResetException,StackTraceElement[] getStackTrace(), Provides programmatic access to the stack trace information printed by printStackTrace().
android.media.MediaDrmResetException,final Throwable[] getSuppressed()," Returns an array containing all of the exceptions that were suppressed, typically by the try-with-resources statement, in order to deliver this exception."
android.media.MediaDrmResetException,Throwable initCause(Throwable cause), Initializes the cause of this throwable to the specified value.
android.media.MediaDrmResetException,void printStackTrace(), Prints this throwable and its backtrace to the standard error stream.
android.media.MediaDrmResetException,void printStackTrace(PrintWriter s), Prints this throwable and its backtrace to the specified print writer.
android.media.MediaDrmResetException,void printStackTrace(PrintStream s), Prints this throwable and its backtrace to the specified print stream.
android.media.MediaDrmResetException,void setStackTrace(StackTraceElement[] stackTrace), Sets the stack trace elements that will be returned by getStackTrace() and printed by printStackTrace() and related methods.
android.media.MediaDrmResetException,String toString(), Returns a short description of this throwable.
android.media.MediaDrmResetException,Object clone(), Creates and returns a copy of this object.
android.media.MediaDrmResetException,boolean equals(Object obj)," Indicates whether some other object is ""equal to"" this one."
android.media.MediaDrmResetException,void finalize(), Called by the garbage collector on an object when garbage collection determines that there are no more references to the object.
android.media.MediaDrmResetException,final Class<?> getClass(), Returns the runtime class of this Object.
android.media.MediaDrmResetException,int hashCode(), Returns a hash code value for the object.
android.media.MediaDrmResetException,final void notify(), Wakes up a single thread that is waiting on this object's monitor.
android.media.MediaDrmResetException,final void notifyAll(), Wakes up all threads that are waiting on this object's monitor.
android.media.MediaDrmResetException,String toString(), Returns a string representation of the object.
android.media.MediaDrmResetException,"final void wait(long millis, int nanos)"," Causes the current thread to wait until another thread invokes the notify() method or the notifyAll() method for this object, or some other thread interrupts the current thread, or a certain amount of real time has elapsed."
android.media.MediaDrmResetException,final void wait(long millis)," Causes the current thread to wait until either another thread invokes the notify() method or the notifyAll() method for this object, or a specified amount of time has elapsed."
android.media.MediaDrmResetException,final void wait(), Causes the current thread to wait until another thread invokes the notify() method or the notifyAll() method for this object.
android.media.MediaExtractor.CasInfo,MediaCas.Session getSession(), Retrieves the MediaCas.Session associated with a track.
android.media.MediaExtractor.CasInfo,int getSystemId(), Retrieves the system id of the conditional access system.
android.media.MediaExtractor.MetricsConstants,Object clone(), Creates and returns a copy of this object.
android.media.MediaExtractor.MetricsConstants,boolean equals(Object obj)," Indicates whether some other object is ""equal to"" this one."
android.media.MediaExtractor.MetricsConstants,void finalize(), Called by the garbage collector on an object when garbage collection determines that there are no more references to the object.
android.media.MediaExtractor.MetricsConstants,final Class<?> getClass(), Returns the runtime class of this Object.
android.media.MediaExtractor.MetricsConstants,int hashCode(), Returns a hash code value for the object.
android.media.MediaExtractor.MetricsConstants,final void notify(), Wakes up a single thread that is waiting on this object's monitor.
android.media.MediaExtractor.MetricsConstants,final void notifyAll(), Wakes up all threads that are waiting on this object's monitor.
android.media.MediaExtractor.MetricsConstants,String toString(), Returns a string representation of the object.
android.media.MediaExtractor.MetricsConstants,"final void wait(long millis, int nanos)"," Causes the current thread to wait until another thread invokes the notify() method or the notifyAll() method for this object, or some other thread interrupts the current thread, or a certain amount of real time has elapsed."
android.media.MediaExtractor.MetricsConstants,final void wait(long millis)," Causes the current thread to wait until either another thread invokes the notify() method or the notifyAll() method for this object, or a specified amount of time has elapsed."
android.media.MediaExtractor.MetricsConstants,final void wait(), Causes the current thread to wait until another thread invokes the notify() method or the notifyAll() method for this object.
android.media.MediaExtractor,boolean advance(), Advance to the next sample.
android.media.MediaExtractor,List<AudioPresentation> getAudioPresentations(int trackIndex), Get the list of available audio presentations for the track.
android.media.MediaExtractor,long getCachedDuration(), Returns an estimate of how much data is presently cached in memory expressed in microseconds.
android.media.MediaExtractor,MediaExtractor.CasInfo getCasInfo(int index), Retrieves the information about the conditional access system used to scramble a track.
android.media.MediaExtractor,DrmInitData getDrmInitData(), Extract DRM initialization data if it exists
android.media.MediaExtractor,PersistableBundle getMetrics(), Return Metrics data about the current media container.
android.media.MediaExtractor,"Map<UUID,byte[]> getPsshInfo()", Get the PSSH info if present.
android.media.MediaExtractor,boolean getSampleCryptoInfo(MediaCodec.CryptoInfo info)," If the sample flags indicate that the current sample is at least partially encrypted, this call returns relevant information about the structure of the sample data required for decryption."
android.media.MediaExtractor,int getSampleFlags(), Returns the current sample's flags.
android.media.MediaExtractor,long getSampleSize(),
android.media.MediaExtractor,long getSampleTime(), Returns the current sample's presentation time in microseconds.
android.media.MediaExtractor,int getSampleTrackIndex(), Returns the track index the current sample originates from (or -1 if no more samples are available)
android.media.MediaExtractor,int getTrackCount(), Count the number of tracks found in the data source.
android.media.MediaExtractor,MediaFormat getTrackFormat(int index), Get the track format at the specified index.
android.media.MediaExtractor,boolean hasCacheReachedEndOfStream()," Returns true iff we are caching data and the cache has reached the end of the data stream (for now, a future seek may of course restart the fetching of data)."
android.media.MediaExtractor,"int readSampleData(ByteBuffer byteBuf, int offset)", Retrieve the current encoded sample and store it in the byte buffer starting at the given offset.
android.media.MediaExtractor,void release(), Make sure you call this when you're done to free up any resources instead of relying on the garbage collector to do this for you at some point in the future.
android.media.MediaExtractor,"void seekTo(long timeUs, int mode)", All selected tracks seek near the requested time according to the specified mode.
android.media.MediaExtractor,void selectTrack(int index)," Subsequent calls to readSampleData(ByteBuffer, int), getSampleTrackIndex() and getSampleTime() only retrieve information for the subset of tracks selected."
android.media.MediaExtractor,void setDataSource(AssetFileDescriptor afd), Sets the data source (AssetFileDescriptor) to use.
android.media.MediaExtractor,"void setDataSource(Context context, Uri uri, Map<String,String> headers)", Sets the data source as a content Uri.
android.media.MediaExtractor,void setDataSource(FileDescriptor fd), Sets the data source (FileDescriptor) to use.
android.media.MediaExtractor,void setDataSource(MediaDataSource dataSource), Sets the data source (MediaDataSource) to use.
android.media.MediaExtractor,"void setDataSource(FileDescriptor fd, long offset, long length)", Sets the data source (FileDescriptor) to use.
android.media.MediaExtractor,void setDataSource(String path), Sets the data source (file-path or http URL) to use.
android.media.MediaExtractor,"void setDataSource(String path, Map<String,String> headers)", Sets the data source (file-path or http URL) to use.
android.media.MediaExtractor,void setMediaCas(MediaCas mediaCas), Sets the MediaCas instance to use.
android.media.MediaExtractor,void unselectTrack(int index)," Subsequent calls to readSampleData(ByteBuffer, int), getSampleTrackIndex() and getSampleTime() only retrieve information for the subset of tracks selected."
android.media.MediaFormat,boolean containsKey(String name), Returns true iff a key of the given name exists in the format.
android.media.MediaFormat,"static MediaFormat createAudioFormat(String mime, int sampleRate, int channelCount)", Creates a minimal audio format.
android.media.MediaFormat,"static MediaFormat createSubtitleFormat(String mime, String language)", Creates a minimal subtitle format.
android.media.MediaFormat,"static MediaFormat createVideoFormat(String mime, int width, int height)", Creates a minimal video format.
android.media.MediaFormat,ByteBuffer getByteBuffer(String name), Returns the value of a ByteBuffer key.
android.media.MediaFormat,boolean getFeatureEnabled(String feature), Returns whether a feature is to be enabled (true) or disabled (false).
android.media.MediaFormat,float getFloat(String name), Returns the value of a float key.
android.media.MediaFormat,int getInteger(String name), Returns the value of an integer key.
android.media.MediaFormat,long getLong(String name), Returns the value of a long key.
android.media.MediaFormat,String getString(String name), Returns the value of a string key.
android.media.MediaFormat,"void setByteBuffer(String name, ByteBuffer bytes)", Sets the value of a ByteBuffer key.
android.media.MediaFormat,"void setFeatureEnabled(String feature, boolean enabled)", Sets whether a feature is to be enabled (true) or disabled (false).
android.media.MediaFormat,"void setFloat(String name, float value)", Sets the value of a float key.
android.media.MediaFormat,"void setInteger(String name, int value)", Sets the value of an integer key.
android.media.MediaFormat,"void setLong(String name, long value)", Sets the value of a long key.
android.media.MediaFormat,"void setString(String name, String value)", Sets the value of a string key.
android.media.MediaFormat,String toString(), Returns a string representation of the object.
android.media.MediaMetadata.Builder,MediaMetadata build(), Creates a MediaMetadata instance with the specified fields.
android.media.MediaMetadata.Builder,"MediaMetadata.Builder putBitmap(String key, Bitmap value)", Put a Bitmap into the metadata.
android.media.MediaMetadata.Builder,"MediaMetadata.Builder putLong(String key, long value)", Put a long value into the metadata.
android.media.MediaMetadata.Builder,"MediaMetadata.Builder putRating(String key, Rating value)", Put a Rating into the metadata.
android.media.MediaMetadata.Builder,"MediaMetadata.Builder putString(String key, String value)", Put a String value into the metadata.
android.media.MediaMetadata.Builder,"MediaMetadata.Builder putText(String key, CharSequence value)", Put a CharSequence value into the metadata.
android.media.MediaMetadata,boolean containsKey(String key), Returns true if the given key is contained in the metadata
android.media.MediaMetadata,int describeContents(), Describe the kinds of special objects contained in this Parcelable instance's marshaled representation.
android.media.MediaMetadata,boolean equals(Object o), Compares the contents of this object to another MediaMetadata object.
android.media.MediaMetadata,Bitmap getBitmap(String key), Returns a Bitmap for the given key or null if no bitmap exists for the given key.
android.media.MediaMetadata,MediaDescription getDescription(), Returns a simple description of this metadata for display purposes.
android.media.MediaMetadata,long getLong(String key)," Returns the value associated with the given key, or 0L if no long exists for the given key."
android.media.MediaMetadata,Rating getRating(String key), Returns a Rating for the given key or null if no rating exists for the given key.
android.media.MediaMetadata,String getString(String key)," Returns the text value associated with the given key as a String, or null if no mapping of the desired type exists for the given key or a null value is explicitly associated with the key."
android.media.MediaMetadata,CharSequence getText(String key)," Returns the value associated with the given key, or null if no mapping of the desired type exists for the given key or a null value is explicitly associated with the key."
android.media.MediaMetadata,int hashCode(), Returns a hash code value for the object.
android.media.MediaMetadata,Set<String> keySet(), Returns a Set containing the Strings used as keys in this metadata.
android.media.MediaMetadata,int size(), Returns the number of fields in this metadata.
android.media.MediaMetadata,"void writeToParcel(Parcel dest, int flags)", Flatten this object in to a Parcel.
android.media.MediaMetadataEditor,void addEditableKey(int key), Flags the given key as being editable.
android.media.MediaMetadataEditor,abstract void apply(), Applies all of the metadata changes that have been set since the MediaMetadataEditor instance was created or since clear() was called.
android.media.MediaMetadataEditor,void clear(), Clears all the pending metadata changes set since the MediaMetadataEditor instance was created or since this method was last called.
android.media.MediaMetadataEditor,"Bitmap getBitmap(int key, Bitmap defaultValue)", Returns the Bitmap value for the key.
android.media.MediaMetadataEditor,int[] getEditableKeys(), Retrieves the keys flagged as editable.
android.media.MediaMetadataEditor,"long getLong(int key, long defaultValue)", Returns the long value for the key.
android.media.MediaMetadataEditor,"Object getObject(int key, Object defaultValue)", Returns an object representation of the value for the key
android.media.MediaMetadataEditor,"String getString(int key, String defaultValue)", Returns the String value for the key.
android.media.MediaMetadataEditor,"MediaMetadataEditor putBitmap(int key, Bitmap bitmap)", Adds image.
android.media.MediaMetadataEditor,"MediaMetadataEditor putLong(int key, long value)", Adds numerical information.
android.media.MediaMetadataEditor,"MediaMetadataEditor putObject(int key, Object value)", Adds information stored as an instance.
android.media.MediaMetadataEditor,"MediaMetadataEditor putString(int key, String value)", Adds textual information.
android.media.MediaMetadataEditor,void removeEditableKeys(), Causes all metadata fields to be read-only.
android.media.MediaMetadataRetriever,String extractMetadata(int keyCode), Call this method after setDataSource().
android.media.MediaMetadataRetriever,byte[] getEmbeddedPicture(), Call this method after setDataSource().
android.media.MediaMetadataRetriever,Bitmap getFrameAtIndex(int frameIndex), This method retrieves a video frame by its index.
android.media.MediaMetadataRetriever,Bitmap getFrameAtTime(long timeUs), Call this method after setDataSource().
android.media.MediaMetadataRetriever,Bitmap getFrameAtTime(), Call this method after setDataSource().
android.media.MediaMetadataRetriever,"Bitmap getFrameAtTime(long timeUs, int option)", Call this method after setDataSource().
android.media.MediaMetadataRetriever,"Bitmap[] getFramesAtIndex(int frameIndex, int numFrames)", This method retrieves a consecutive set of video frames starting at the specified index.
android.media.MediaMetadataRetriever,Bitmap getImageAtIndex(int imageIndex), This method retrieves a still image by its index.
android.media.MediaMetadataRetriever,Bitmap getPrimaryImage(), This method retrieves the primary image of the media content.
android.media.MediaMetadataRetriever,"Bitmap getScaledFrameAtTime(long timeUs, int option, int dstWidth, int dstHeight)", Retrieve a video frame near a given timestamp scaled to a desired size.
android.media.MediaMetadataRetriever,void release(), Call it when one is done with the object.
android.media.MediaMetadataRetriever,"void setDataSource(FileDescriptor fd, long offset, long length)", Sets the data source (FileDescriptor) to use.
android.media.MediaMetadataRetriever,void setDataSource(String path), Sets the data source (file pathname) to use.
android.media.MediaMetadataRetriever,"void setDataSource(Context context, Uri uri)", Sets the data source as a content Uri.
android.media.MediaMetadataRetriever,void setDataSource(FileDescriptor fd), Sets the data source (FileDescriptor) to use.
android.media.MediaMetadataRetriever,"void setDataSource(String uri, Map<String,String> headers)", Sets the data source (URI) to use.
android.media.MediaMetadataRetriever,void setDataSource(MediaDataSource dataSource), Sets the data source (MediaDataSource) to use.
android.media.MediaMuxer.OutputFormat,Object clone(), Creates and returns a copy of this object.
android.media.MediaMuxer.OutputFormat,boolean equals(Object obj)," Indicates whether some other object is ""equal to"" this one."
android.media.MediaMuxer.OutputFormat,void finalize(), Called by the garbage collector on an object when garbage collection determines that there are no more references to the object.
android.media.MediaMuxer.OutputFormat,final Class<?> getClass(), Returns the runtime class of this Object.
android.media.MediaMuxer.OutputFormat,int hashCode(), Returns a hash code value for the object.
android.media.MediaMuxer.OutputFormat,final void notify(), Wakes up a single thread that is waiting on this object's monitor.
android.media.MediaMuxer.OutputFormat,final void notifyAll(), Wakes up all threads that are waiting on this object's monitor.
android.media.MediaMuxer.OutputFormat,String toString(), Returns a string representation of the object.
android.media.MediaMuxer.OutputFormat,"final void wait(long millis, int nanos)"," Causes the current thread to wait until another thread invokes the notify() method or the notifyAll() method for this object, or some other thread interrupts the current thread, or a certain amount of real time has elapsed."
android.media.MediaMuxer.OutputFormat,final void wait(long millis)," Causes the current thread to wait until either another thread invokes the notify() method or the notifyAll() method for this object, or a specified amount of time has elapsed."
android.media.MediaMuxer.OutputFormat,final void wait(), Causes the current thread to wait until another thread invokes the notify() method or the notifyAll() method for this object.
android.media.MediaMuxer,int addTrack(MediaFormat format), Adds a track with the specified format.
android.media.MediaMuxer,void release(), Make sure you call this when you're done to free up any resources instead of relying on the garbage collector to do this for you at some point in the future.
android.media.MediaMuxer,"void setLocation(float latitude, float longitude)", Set and store the geodata (latitude and longitude) in the output file.
android.media.MediaMuxer,void setOrientationHint(int degrees), Sets the orientation hint for output video playback.
android.media.MediaMuxer,void start(), Starts the muxer.
android.media.MediaMuxer,void stop(), Stops the muxer.
android.media.MediaMuxer,"void writeSampleData(int trackIndex, ByteBuffer byteBuf, MediaCodec.BufferInfo bufferInfo)", Writes an encoded sample into the muxer.
android.media.MediaPlayer.DrmInfo,"Map<UUID,byte[]> getPssh()", Returns the PSSH info of the data source for each supported DRM scheme.
android.media.MediaPlayer.DrmInfo,UUID[] getSupportedSchemes(), Returns the intersection of the data source and the device DRM schemes.
android.media.MediaPlayer.MetricsConstants,Object clone(), Creates and returns a copy of this object.
android.media.MediaPlayer.MetricsConstants,boolean equals(Object obj)," Indicates whether some other object is ""equal to"" this one."
android.media.MediaPlayer.MetricsConstants,void finalize(), Called by the garbage collector on an object when garbage collection determines that there are no more references to the object.
android.media.MediaPlayer.MetricsConstants,final Class<?> getClass(), Returns the runtime class of this Object.
android.media.MediaPlayer.MetricsConstants,int hashCode(), Returns a hash code value for the object.
android.media.MediaPlayer.MetricsConstants,final void notify(), Wakes up a single thread that is waiting on this object's monitor.
android.media.MediaPlayer.MetricsConstants,final void notifyAll(), Wakes up all threads that are waiting on this object's monitor.
android.media.MediaPlayer.MetricsConstants,String toString(), Returns a string representation of the object.
android.media.MediaPlayer.MetricsConstants,"final void wait(long millis, int nanos)"," Causes the current thread to wait until another thread invokes the notify() method or the notifyAll() method for this object, or some other thread interrupts the current thread, or a certain amount of real time has elapsed."
android.media.MediaPlayer.MetricsConstants,final void wait(long millis)," Causes the current thread to wait until either another thread invokes the notify() method or the notifyAll() method for this object, or a specified amount of time has elapsed."
android.media.MediaPlayer.MetricsConstants,final void wait(), Causes the current thread to wait until another thread invokes the notify() method or the notifyAll() method for this object.
android.media.MediaPlayer.NoDrmSchemeException,final void addSuppressed(Throwable exception), Appends the specified exception to the exceptions that were suppressed in order to deliver this exception.
android.media.MediaPlayer.NoDrmSchemeException,Throwable fillInStackTrace(), Fills in the execution stack trace.
android.media.MediaPlayer.NoDrmSchemeException,Throwable getCause(), Returns the cause of this throwable or null if the cause is nonexistent or unknown.
android.media.MediaPlayer.NoDrmSchemeException,String getLocalizedMessage(), Creates a localized description of this throwable.
android.media.MediaPlayer.NoDrmSchemeException,String getMessage(), Returns the detail message string of this throwable.
android.media.MediaPlayer.NoDrmSchemeException,StackTraceElement[] getStackTrace(), Provides programmatic access to the stack trace information printed by printStackTrace().
android.media.MediaPlayer.NoDrmSchemeException,final Throwable[] getSuppressed()," Returns an array containing all of the exceptions that were suppressed, typically by the try-with-resources statement, in order to deliver this exception."
android.media.MediaPlayer.NoDrmSchemeException,Throwable initCause(Throwable cause), Initializes the cause of this throwable to the specified value.
android.media.MediaPlayer.NoDrmSchemeException,void printStackTrace(), Prints this throwable and its backtrace to the standard error stream.
android.media.MediaPlayer.NoDrmSchemeException,void printStackTrace(PrintWriter s), Prints this throwable and its backtrace to the specified print writer.
android.media.MediaPlayer.NoDrmSchemeException,void printStackTrace(PrintStream s), Prints this throwable and its backtrace to the specified print stream.
android.media.MediaPlayer.NoDrmSchemeException,void setStackTrace(StackTraceElement[] stackTrace), Sets the stack trace elements that will be returned by getStackTrace() and printed by printStackTrace() and related methods.
android.media.MediaPlayer.NoDrmSchemeException,String toString(), Returns a short description of this throwable.
android.media.MediaPlayer.NoDrmSchemeException,Object clone(), Creates and returns a copy of this object.
android.media.MediaPlayer.NoDrmSchemeException,boolean equals(Object obj)," Indicates whether some other object is ""equal to"" this one."
android.media.MediaPlayer.NoDrmSchemeException,void finalize(), Called by the garbage collector on an object when garbage collection determines that there are no more references to the object.
android.media.MediaPlayer.NoDrmSchemeException,final Class<?> getClass(), Returns the runtime class of this Object.
android.media.MediaPlayer.NoDrmSchemeException,int hashCode(), Returns a hash code value for the object.
android.media.MediaPlayer.NoDrmSchemeException,final void notify(), Wakes up a single thread that is waiting on this object's monitor.
android.media.MediaPlayer.NoDrmSchemeException,final void notifyAll(), Wakes up all threads that are waiting on this object's monitor.
android.media.MediaPlayer.NoDrmSchemeException,String toString(), Returns a string representation of the object.
android.media.MediaPlayer.NoDrmSchemeException,"final void wait(long millis, int nanos)"," Causes the current thread to wait until another thread invokes the notify() method or the notifyAll() method for this object, or some other thread interrupts the current thread, or a certain amount of real time has elapsed."
android.media.MediaPlayer.NoDrmSchemeException,final void wait(long millis)," Causes the current thread to wait until either another thread invokes the notify() method or the notifyAll() method for this object, or a specified amount of time has elapsed."
android.media.MediaPlayer.NoDrmSchemeException,final void wait(), Causes the current thread to wait until another thread invokes the notify() method or the notifyAll() method for this object.
android.media.MediaPlayer.OnBufferingUpdateListener,"abstract void onBufferingUpdate(MediaPlayer mp, int percent)", Called to update status in buffering a media stream received through progressive HTTP download.
android.media.MediaPlayer.OnCompletionListener,abstract void onCompletion(MediaPlayer mp), Called when the end of a media source is reached during playback.
android.media.MediaPlayer.OnDrmConfigHelper,abstract void onDrmConfig(MediaPlayer mp), Called to give the app the opportunity to configure DRM before the session is created
android.media.MediaPlayer.OnDrmInfoListener,"abstract void onDrmInfo(MediaPlayer mp, MediaPlayer.DrmInfo drmInfo)", Called to indicate DRM info is available
android.media.MediaPlayer.OnDrmPreparedListener,"abstract void onDrmPrepared(MediaPlayer mp, int status)", Called to notify the app that prepareDrm is finished and ready for key request/response
android.media.MediaPlayer.OnErrorListener,"abstract boolean onError(MediaPlayer mp, int what, int extra)", Called to indicate an error.
android.media.MediaPlayer.OnInfoListener,"abstract boolean onInfo(MediaPlayer mp, int what, int extra)", Called to indicate an info or a warning.
android.media.MediaPlayer.OnPreparedListener,abstract void onPrepared(MediaPlayer mp), Called when the media file is ready for playback.
android.media.MediaPlayer.OnSeekCompleteListener,abstract void onSeekComplete(MediaPlayer mp), Called to indicate the completion of a seek operation.
android.media.MediaPlayer.OnTimedMetaDataAvailableListener,"abstract void onTimedMetaDataAvailable(MediaPlayer mp, TimedMetaData data)"," Called to indicate avaliable timed metadata This method will be called as timed metadata is extracted from the media, in the same order as it occurs in the media."
android.media.MediaPlayer.OnTimedTextListener,"abstract void onTimedText(MediaPlayer mp, TimedText text)", Called to indicate an avaliable timed text
android.media.MediaPlayer.OnVideoSizeChangedListener,"abstract void onVideoSizeChanged(MediaPlayer mp, int width, int height)"," Called to indicate the video size The video size (width and height) could be 0 if there was no video, no display surface was set, or the value was not determined yet."
android.media.MediaPlayer.ProvisioningNetworkErrorException,final void addSuppressed(Throwable exception), Appends the specified exception to the exceptions that were suppressed in order to deliver this exception.
android.media.MediaPlayer.ProvisioningNetworkErrorException,Throwable fillInStackTrace(), Fills in the execution stack trace.
android.media.MediaPlayer.ProvisioningNetworkErrorException,Throwable getCause(), Returns the cause of this throwable or null if the cause is nonexistent or unknown.
android.media.MediaPlayer.ProvisioningNetworkErrorException,String getLocalizedMessage(), Creates a localized description of this throwable.
android.media.MediaPlayer.ProvisioningNetworkErrorException,String getMessage(), Returns the detail message string of this throwable.
android.media.MediaPlayer.ProvisioningNetworkErrorException,StackTraceElement[] getStackTrace(), Provides programmatic access to the stack trace information printed by printStackTrace().
android.media.MediaPlayer.ProvisioningNetworkErrorException,final Throwable[] getSuppressed()," Returns an array containing all of the exceptions that were suppressed, typically by the try-with-resources statement, in order to deliver this exception."
android.media.MediaPlayer.ProvisioningNetworkErrorException,Throwable initCause(Throwable cause), Initializes the cause of this throwable to the specified value.
android.media.MediaPlayer.ProvisioningNetworkErrorException,void printStackTrace(), Prints this throwable and its backtrace to the standard error stream.
android.media.MediaPlayer.ProvisioningNetworkErrorException,void printStackTrace(PrintWriter s), Prints this throwable and its backtrace to the specified print writer.
android.media.MediaPlayer.ProvisioningNetworkErrorException,void printStackTrace(PrintStream s), Prints this throwable and its backtrace to the specified print stream.
android.media.MediaPlayer.ProvisioningNetworkErrorException,void setStackTrace(StackTraceElement[] stackTrace), Sets the stack trace elements that will be returned by getStackTrace() and printed by printStackTrace() and related methods.
android.media.MediaPlayer.ProvisioningNetworkErrorException,String toString(), Returns a short description of this throwable.
android.media.MediaPlayer.ProvisioningNetworkErrorException,Object clone(), Creates and returns a copy of this object.
android.media.MediaPlayer.ProvisioningNetworkErrorException,boolean equals(Object obj)," Indicates whether some other object is ""equal to"" this one."
android.media.MediaPlayer.ProvisioningNetworkErrorException,void finalize(), Called by the garbage collector on an object when garbage collection determines that there are no more references to the object.
android.media.MediaPlayer.ProvisioningNetworkErrorException,final Class<?> getClass(), Returns the runtime class of this Object.
android.media.MediaPlayer.ProvisioningNetworkErrorException,int hashCode(), Returns a hash code value for the object.
android.media.MediaPlayer.ProvisioningNetworkErrorException,final void notify(), Wakes up a single thread that is waiting on this object's monitor.
android.media.MediaPlayer.ProvisioningNetworkErrorException,final void notifyAll(), Wakes up all threads that are waiting on this object's monitor.
android.media.MediaPlayer.ProvisioningNetworkErrorException,String toString(), Returns a string representation of the object.
android.media.MediaPlayer.ProvisioningNetworkErrorException,"final void wait(long millis, int nanos)"," Causes the current thread to wait until another thread invokes the notify() method or the notifyAll() method for this object, or some other thread interrupts the current thread, or a certain amount of real time has elapsed."
android.media.MediaPlayer.ProvisioningNetworkErrorException,final void wait(long millis)," Causes the current thread to wait until either another thread invokes the notify() method or the notifyAll() method for this object, or a specified amount of time has elapsed."
android.media.MediaPlayer.ProvisioningNetworkErrorException,final void wait(), Causes the current thread to wait until another thread invokes the notify() method or the notifyAll() method for this object.
android.media.MediaPlayer.ProvisioningServerErrorException,final void addSuppressed(Throwable exception), Appends the specified exception to the exceptions that were suppressed in order to deliver this exception.
android.media.MediaPlayer.ProvisioningServerErrorException,Throwable fillInStackTrace(), Fills in the execution stack trace.
android.media.MediaPlayer.ProvisioningServerErrorException,Throwable getCause(), Returns the cause of this throwable or null if the cause is nonexistent or unknown.
android.media.MediaPlayer.ProvisioningServerErrorException,String getLocalizedMessage(), Creates a localized description of this throwable.
android.media.MediaPlayer.ProvisioningServerErrorException,String getMessage(), Returns the detail message string of this throwable.
android.media.MediaPlayer.ProvisioningServerErrorException,StackTraceElement[] getStackTrace(), Provides programmatic access to the stack trace information printed by printStackTrace().
android.media.MediaPlayer.ProvisioningServerErrorException,final Throwable[] getSuppressed()," Returns an array containing all of the exceptions that were suppressed, typically by the try-with-resources statement, in order to deliver this exception."
android.media.MediaPlayer.ProvisioningServerErrorException,Throwable initCause(Throwable cause), Initializes the cause of this throwable to the specified value.
android.media.MediaPlayer.ProvisioningServerErrorException,void printStackTrace(), Prints this throwable and its backtrace to the standard error stream.
android.media.MediaPlayer.ProvisioningServerErrorException,void printStackTrace(PrintWriter s), Prints this throwable and its backtrace to the specified print writer.
android.media.MediaPlayer.ProvisioningServerErrorException,void printStackTrace(PrintStream s), Prints this throwable and its backtrace to the specified print stream.
android.media.MediaPlayer.ProvisioningServerErrorException,void setStackTrace(StackTraceElement[] stackTrace), Sets the stack trace elements that will be returned by getStackTrace() and printed by printStackTrace() and related methods.
android.media.MediaPlayer.ProvisioningServerErrorException,String toString(), Returns a short description of this throwable.
android.media.MediaPlayer.ProvisioningServerErrorException,Object clone(), Creates and returns a copy of this object.
android.media.MediaPlayer.ProvisioningServerErrorException,boolean equals(Object obj)," Indicates whether some other object is ""equal to"" this one."
android.media.MediaPlayer.ProvisioningServerErrorException,void finalize(), Called by the garbage collector on an object when garbage collection determines that there are no more references to the object.
android.media.MediaPlayer.ProvisioningServerErrorException,final Class<?> getClass(), Returns the runtime class of this Object.
android.media.MediaPlayer.ProvisioningServerErrorException,int hashCode(), Returns a hash code value for the object.
android.media.MediaPlayer.ProvisioningServerErrorException,final void notify(), Wakes up a single thread that is waiting on this object's monitor.
android.media.MediaPlayer.ProvisioningServerErrorException,final void notifyAll(), Wakes up all threads that are waiting on this object's monitor.
android.media.MediaPlayer.ProvisioningServerErrorException,String toString(), Returns a string representation of the object.
android.media.MediaPlayer.ProvisioningServerErrorException,"final void wait(long millis, int nanos)"," Causes the current thread to wait until another thread invokes the notify() method or the notifyAll() method for this object, or some other thread interrupts the current thread, or a certain amount of real time has elapsed."
android.media.MediaPlayer.ProvisioningServerErrorException,final void wait(long millis)," Causes the current thread to wait until either another thread invokes the notify() method or the notifyAll() method for this object, or a specified amount of time has elapsed."
android.media.MediaPlayer.ProvisioningServerErrorException,final void wait(), Causes the current thread to wait until another thread invokes the notify() method or the notifyAll() method for this object.
android.media.MediaPlayer.TrackInfo,int describeContents(), Describe the kinds of special objects contained in this Parcelable instance's marshaled representation.
android.media.MediaPlayer.TrackInfo,MediaFormat getFormat(), Gets the MediaFormat of the track.
android.media.MediaPlayer.TrackInfo,String getLanguage(), Gets the language code of the track.
android.media.MediaPlayer.TrackInfo,int getTrackType(), Gets the track type.
android.media.MediaPlayer.TrackInfo,String toString(), Returns a string representation of the object.
android.media.MediaPlayer.TrackInfo,"void writeToParcel(Parcel dest, int flags)", Flatten this object in to a Parcel.
android.media.MediaPlayer,"void addOnRoutingChangedListener(AudioRouting.OnRoutingChangedListener listener, Handler handler)", Adds an AudioRouting.OnRoutingChangedListener to receive notifications of routing changes on this MediaPlayer.
android.media.MediaPlayer,"void addTimedTextSource(FileDescriptor fd, String mimeType)", Adds an external timed text source file (FileDescriptor).
android.media.MediaPlayer,"void addTimedTextSource(String path, String mimeType)", Adds an external timed text source file.
android.media.MediaPlayer,"void addTimedTextSource(FileDescriptor fd, long offset, long length, String mime)", Adds an external timed text file (FileDescriptor).
android.media.MediaPlayer,"void addTimedTextSource(Context context, Uri uri, String mimeType)", Adds an external timed text source file (Uri).
android.media.MediaPlayer,void attachAuxEffect(int effectId), Attaches an auxiliary effect to the player.
android.media.MediaPlayer,"static MediaPlayer create(Context context, Uri uri, SurfaceHolder holder, AudioAttributes audioAttributes, int audioSessionId)"," Same factory method as create(Context, Uri, SurfaceHolder) but that lets you specify the audio attributes and session ID to be used by the new MediaPlayer instance."
android.media.MediaPlayer,"static MediaPlayer create(Context context, int resid, AudioAttributes audioAttributes, int audioSessionId)"," Same factory method as create(Context, int) but that lets you specify the audio attributes and session ID to be used by the new MediaPlayer instance."
android.media.MediaPlayer,"static MediaPlayer create(Context context, Uri uri, SurfaceHolder holder)", Convenience method to create a MediaPlayer for a given Uri.
android.media.MediaPlayer,"static MediaPlayer create(Context context, int resid)", Convenience method to create a MediaPlayer for a given resource id.
android.media.MediaPlayer,"static MediaPlayer create(Context context, Uri uri)", Convenience method to create a MediaPlayer for a given Uri.
android.media.MediaPlayer,VolumeShaper createVolumeShaper(VolumeShaper.Configuration configuration), Returns a VolumeShaper object that can be used modify the volume envelope of the player or track.
android.media.MediaPlayer,void deselectTrack(int index), Deselect a track.
android.media.MediaPlayer,int getAudioSessionId(), Returns the audio session ID.
android.media.MediaPlayer,int getCurrentPosition(), Gets the current playback position.
android.media.MediaPlayer,MediaPlayer.DrmInfo getDrmInfo(), Retrieves the DRM Info associated with the current source
android.media.MediaPlayer,String getDrmPropertyString(String propertyName)," Read a DRM engine plugin String property value, given the property name string."
android.media.MediaPlayer,int getDuration(), Gets the duration of the file.
android.media.MediaPlayer,"MediaDrm.KeyRequest getKeyRequest(byte[] keySetId, byte[] initData, String mimeType, int keyType, Map<String,String> optionalParameters)", A key request/response exchange occurs between the app and a license server to obtain or release keys used to decrypt encrypted content.
android.media.MediaPlayer,PersistableBundle getMetrics(), Return Metrics data about the current player.
android.media.MediaPlayer,PlaybackParams getPlaybackParams()," Gets the playback params, containing the current playback rate."
android.media.MediaPlayer,AudioDeviceInfo getPreferredDevice(), Returns the selected output specified by setPreferredDevice(AudioDeviceInfo).
android.media.MediaPlayer,AudioDeviceInfo getRoutedDevice(), Returns an AudioDeviceInfo identifying the current routing of this MediaPlayer Note: The query is only valid if the MediaPlayer is currently playing.
android.media.MediaPlayer,int getSelectedTrack(int trackType)," Returns the index of the audio, video, or subtitle track currently selected for playback, The return value is an index into the array returned by getTrackInfo(), and can be used in calls to selectTrack(int) or deselectTrack(int)."
android.media.MediaPlayer,SyncParams getSyncParams(), Gets the A/V sync mode.
android.media.MediaPlayer,MediaTimestamp getTimestamp(), Get current playback position as a MediaTimestamp.
android.media.MediaPlayer,TrackInfo[] getTrackInfo(), Returns an array of track information.
android.media.MediaPlayer,int getVideoHeight(), Returns the height of the video.
android.media.MediaPlayer,int getVideoWidth(), Returns the width of the video.
android.media.MediaPlayer,boolean isLooping(), Checks whether the MediaPlayer is looping or non-looping.
android.media.MediaPlayer,boolean isPlaying(), Checks whether the MediaPlayer is playing.
android.media.MediaPlayer,void pause(), Pauses playback.
android.media.MediaPlayer,void prepare()," Prepares the player for playback, synchronously."
android.media.MediaPlayer,void prepareAsync()," Prepares the player for playback, asynchronously."
android.media.MediaPlayer,void prepareDrm(UUID uuid)," Prepares the DRM for the current source If OnDrmConfigHelper is registered, it will be called during preparation to allow configuration of the DRM properties before opening the DRM session."
android.media.MediaPlayer,"byte[] provideKeyResponse(byte[] keySetId, byte[] response)"," A key response is received from the license server by the app, then it is provided to the DRM engine plugin using provideKeyResponse."
android.media.MediaPlayer,void release(), Releases resources associated with this MediaPlayer object.
android.media.MediaPlayer,void releaseDrm()," Releases the DRM session The player has to have an active DRM session and be in stopped, or prepared state before this call is made."
android.media.MediaPlayer,void removeOnRoutingChangedListener(AudioRouting.OnRoutingChangedListener listener), Removes an AudioRouting.OnRoutingChangedListener which has been previously added to receive rerouting notifications.
android.media.MediaPlayer,void reset(), Resets the MediaPlayer to its uninitialized state.
android.media.MediaPlayer,void restoreKeys(byte[] keySetId), Restore persisted offline keys into a new session.
android.media.MediaPlayer,void seekTo(int msec), Seeks to specified time position.
android.media.MediaPlayer,"void seekTo(long msec, int mode)", Moves the media to specified time position by considering the given mode.
android.media.MediaPlayer,void selectTrack(int index), Selects a track.
android.media.MediaPlayer,void setAudioAttributes(AudioAttributes attributes), Sets the audio attributes for this MediaPlayer.
android.media.MediaPlayer,void setAudioSessionId(int sessionId), Sets the audio session ID.
android.media.MediaPlayer,void setAudioStreamType(int streamtype), This method was deprecated in API level 26. use setAudioAttributes(AudioAttributes)
android.media.MediaPlayer,void setAuxEffectSendLevel(float level), Sets the send level of the player to the attached auxiliary effect.
android.media.MediaPlayer,void setDataSource(AssetFileDescriptor afd), Sets the data source (AssetFileDescriptor) to use.
android.media.MediaPlayer,void setDataSource(FileDescriptor fd), Sets the data source (FileDescriptor) to use.
android.media.MediaPlayer,"void setDataSource(FileDescriptor fd, long offset, long length)", Sets the data source (FileDescriptor) to use.
android.media.MediaPlayer,void setDataSource(String path), Sets the data source (file-path or http/rtsp URL) to use.
android.media.MediaPlayer,"void setDataSource(Context context, Uri uri, Map<String,String> headers, List<HttpCookie> cookies)", Sets the data source as a content Uri.
android.media.MediaPlayer,"void setDataSource(Context context, Uri uri, Map<String,String> headers)", Sets the data source as a content Uri.
android.media.MediaPlayer,void setDataSource(MediaDataSource dataSource), Sets the data source (MediaDataSource) to use.
android.media.MediaPlayer,"void setDataSource(Context context, Uri uri)", Sets the data source as a content Uri.
android.media.MediaPlayer,void setDisplay(SurfaceHolder sh), Sets the SurfaceHolder to use for displaying the video portion of the media.
android.media.MediaPlayer,"void setDrmPropertyString(String propertyName, String value)", Set a DRM engine plugin String property value.
android.media.MediaPlayer,void setLooping(boolean looping), Sets the player to be looping or non-looping.
android.media.MediaPlayer,void setNextMediaPlayer(MediaPlayer next), Set the MediaPlayer to start when this MediaPlayer finishes playback (i.e.
android.media.MediaPlayer,void setOnBufferingUpdateListener(MediaPlayer.OnBufferingUpdateListener listener), Register a callback to be invoked when the status of a network stream's buffer has changed.
android.media.MediaPlayer,void setOnCompletionListener(MediaPlayer.OnCompletionListener listener), Register a callback to be invoked when the end of a media source has been reached during playback.
android.media.MediaPlayer,void setOnDrmConfigHelper(MediaPlayer.OnDrmConfigHelper listener), Register a callback to be invoked for configuration of the DRM object before the session is created.
android.media.MediaPlayer,void setOnDrmInfoListener(MediaPlayer.OnDrmInfoListener listener), Register a callback to be invoked when the DRM info is known.
android.media.MediaPlayer,"void setOnDrmInfoListener(MediaPlayer.OnDrmInfoListener listener, Handler handler)", Register a callback to be invoked when the DRM info is known.
android.media.MediaPlayer,"void setOnDrmPreparedListener(MediaPlayer.OnDrmPreparedListener listener, Handler handler)", Register a callback to be invoked when the DRM object is prepared.
android.media.MediaPlayer,void setOnDrmPreparedListener(MediaPlayer.OnDrmPreparedListener listener), Register a callback to be invoked when the DRM object is prepared.
android.media.MediaPlayer,void setOnErrorListener(MediaPlayer.OnErrorListener listener), Register a callback to be invoked when an error has happened during an asynchronous operation.
android.media.MediaPlayer,void setOnInfoListener(MediaPlayer.OnInfoListener listener), Register a callback to be invoked when an info/warning is available.
android.media.MediaPlayer,void setOnPreparedListener(MediaPlayer.OnPreparedListener listener), Register a callback to be invoked when the media source is ready for playback.
android.media.MediaPlayer,void setOnSeekCompleteListener(MediaPlayer.OnSeekCompleteListener listener), Register a callback to be invoked when a seek operation has been completed.
android.media.MediaPlayer,void setOnTimedMetaDataAvailableListener(MediaPlayer.OnTimedMetaDataAvailableListener listener), Register a callback to be invoked when a selected track has timed metadata available.
android.media.MediaPlayer,void setOnTimedTextListener(MediaPlayer.OnTimedTextListener listener), Register a callback to be invoked when a timed text is available for display.
android.media.MediaPlayer,void setOnVideoSizeChangedListener(MediaPlayer.OnVideoSizeChangedListener listener), Register a callback to be invoked when the video size is known or updated.
android.media.MediaPlayer,void setPlaybackParams(PlaybackParams params), Sets playback rate using PlaybackParams.
android.media.MediaPlayer,boolean setPreferredDevice(AudioDeviceInfo deviceInfo), Specifies an audio device (via an AudioDeviceInfo object) to route the output from this MediaPlayer.
android.media.MediaPlayer,void setScreenOnWhilePlaying(boolean screenOn), Control whether we should use the attached SurfaceHolder to keep the screen on while video playback is occurring.
android.media.MediaPlayer,void setSurface(Surface surface), Sets the Surface to be used as the sink for the video portion of the media.
android.media.MediaPlayer,void setSyncParams(SyncParams params), Sets A/V sync mode.
android.media.MediaPlayer,void setVideoScalingMode(int mode), Sets video scaling mode.
android.media.MediaPlayer,"void setVolume(float leftVolume, float rightVolume)", Sets the volume on this player.
android.media.MediaPlayer,"void setWakeMode(Context context, int mode)", Set the low-level power management behavior for this MediaPlayer.
android.media.MediaPlayer,void start(), Starts or resumes playback.
android.media.MediaPlayer,void stop(), Stops playback after playback has been started or paused.
android.media.MediaPlayer2.DrmEventCallback,"void onDrmInfo(MediaPlayer2 mp, MediaPlayer2.DrmInfo drmInfo)", Called to indicate DRM info is available
android.media.MediaPlayer2.DrmEventCallback,"void onDrmPrepared(MediaPlayer2 mp, int status)", Called to notify the client that prepareDrm is finished and ready for key request/response.
android.media.MediaPlayer2.DrmInfo,"abstract Map<UUID,byte[]> getPssh()", Returns the PSSH info of the data source for each supported DRM scheme.
android.media.MediaPlayer2.DrmInfo,abstract List<UUID> getSupportedSchemes(), Returns the intersection of the data source and the device DRM schemes.
android.media.MediaPlayer2.EventCallback,"void onBufferingUpdate(MediaPlayer2 mp, long srcId, int percent)", Called to update status in buffering a media source received through progressive downloading.
android.media.MediaPlayer2.EventCallback,"void onError(MediaPlayer2 mp, long srcId, int what, int extra)", Called to indicate an error.
android.media.MediaPlayer2.EventCallback,"void onInfo(MediaPlayer2 mp, long srcId, int what, int extra)", Called to indicate an info or a warning.
android.media.MediaPlayer2.EventCallback,"void onTimedMetaDataAvailable(MediaPlayer2 mp, long srcId, TimedMetaData data)"," Called to indicate avaliable timed metadata This method will be called as timed metadata is extracted from the media, in the same order as it occurs in the media."
android.media.MediaPlayer2.EventCallback,"void onVideoSizeChanged(MediaPlayer2 mp, long srcId, int width, int height)"," Called to indicate the video size The video size (width and height) could be 0 if there was no video, no display surface was set, or the value was not determined yet."
android.media.MediaPlayer2.MetricsConstants,Object clone(), Creates and returns a copy of this object.
android.media.MediaPlayer2.MetricsConstants,boolean equals(Object obj)," Indicates whether some other object is ""equal to"" this one."
android.media.MediaPlayer2.MetricsConstants,void finalize(), Called by the garbage collector on an object when garbage collection determines that there are no more references to the object.
android.media.MediaPlayer2.MetricsConstants,final Class<?> getClass(), Returns the runtime class of this Object.
android.media.MediaPlayer2.MetricsConstants,int hashCode(), Returns a hash code value for the object.
android.media.MediaPlayer2.MetricsConstants,final void notify(), Wakes up a single thread that is waiting on this object's monitor.
android.media.MediaPlayer2.MetricsConstants,final void notifyAll(), Wakes up all threads that are waiting on this object's monitor.
android.media.MediaPlayer2.MetricsConstants,String toString(), Returns a string representation of the object.
android.media.MediaPlayer2.MetricsConstants,"final void wait(long millis, int nanos)"," Causes the current thread to wait until another thread invokes the notify() method or the notifyAll() method for this object, or some other thread interrupts the current thread, or a certain amount of real time has elapsed."
android.media.MediaPlayer2.MetricsConstants,final void wait(long millis)," Causes the current thread to wait until either another thread invokes the notify() method or the notifyAll() method for this object, or a specified amount of time has elapsed."
android.media.MediaPlayer2.MetricsConstants,final void wait(), Causes the current thread to wait until another thread invokes the notify() method or the notifyAll() method for this object.
android.media.MediaPlayer2.NoDrmSchemeException,final void addSuppressed(Throwable exception), Appends the specified exception to the exceptions that were suppressed in order to deliver this exception.
android.media.MediaPlayer2.NoDrmSchemeException,Throwable fillInStackTrace(), Fills in the execution stack trace.
android.media.MediaPlayer2.NoDrmSchemeException,Throwable getCause(), Returns the cause of this throwable or null if the cause is nonexistent or unknown.
android.media.MediaPlayer2.NoDrmSchemeException,String getLocalizedMessage(), Creates a localized description of this throwable.
android.media.MediaPlayer2.NoDrmSchemeException,String getMessage(), Returns the detail message string of this throwable.
android.media.MediaPlayer2.NoDrmSchemeException,StackTraceElement[] getStackTrace(), Provides programmatic access to the stack trace information printed by printStackTrace().
android.media.MediaPlayer2.NoDrmSchemeException,final Throwable[] getSuppressed()," Returns an array containing all of the exceptions that were suppressed, typically by the try-with-resources statement, in order to deliver this exception."
android.media.MediaPlayer2.NoDrmSchemeException,Throwable initCause(Throwable cause), Initializes the cause of this throwable to the specified value.
android.media.MediaPlayer2.NoDrmSchemeException,void printStackTrace(), Prints this throwable and its backtrace to the standard error stream.
android.media.MediaPlayer2.NoDrmSchemeException,void printStackTrace(PrintWriter s), Prints this throwable and its backtrace to the specified print writer.
android.media.MediaPlayer2.NoDrmSchemeException,void printStackTrace(PrintStream s), Prints this throwable and its backtrace to the specified print stream.
android.media.MediaPlayer2.NoDrmSchemeException,void setStackTrace(StackTraceElement[] stackTrace), Sets the stack trace elements that will be returned by getStackTrace() and printed by printStackTrace() and related methods.
android.media.MediaPlayer2.NoDrmSchemeException,String toString(), Returns a short description of this throwable.
android.media.MediaPlayer2.NoDrmSchemeException,Object clone(), Creates and returns a copy of this object.
android.media.MediaPlayer2.NoDrmSchemeException,boolean equals(Object obj)," Indicates whether some other object is ""equal to"" this one."
android.media.MediaPlayer2.NoDrmSchemeException,void finalize(), Called by the garbage collector on an object when garbage collection determines that there are no more references to the object.
android.media.MediaPlayer2.NoDrmSchemeException,final Class<?> getClass(), Returns the runtime class of this Object.
android.media.MediaPlayer2.NoDrmSchemeException,int hashCode(), Returns a hash code value for the object.
android.media.MediaPlayer2.NoDrmSchemeException,final void notify(), Wakes up a single thread that is waiting on this object's monitor.
android.media.MediaPlayer2.NoDrmSchemeException,final void notifyAll(), Wakes up all threads that are waiting on this object's monitor.
android.media.MediaPlayer2.NoDrmSchemeException,String toString(), Returns a string representation of the object.
android.media.MediaPlayer2.NoDrmSchemeException,"final void wait(long millis, int nanos)"," Causes the current thread to wait until another thread invokes the notify() method or the notifyAll() method for this object, or some other thread interrupts the current thread, or a certain amount of real time has elapsed."
android.media.MediaPlayer2.NoDrmSchemeException,final void wait(long millis)," Causes the current thread to wait until either another thread invokes the notify() method or the notifyAll() method for this object, or a specified amount of time has elapsed."
android.media.MediaPlayer2.NoDrmSchemeException,final void wait(), Causes the current thread to wait until another thread invokes the notify() method or the notifyAll() method for this object.
android.media.MediaPlayer2.OnDrmConfigHelper,abstract void onDrmConfig(MediaPlayer2 mp), Called to give the app the opportunity to configure DRM before the session is created
android.media.MediaPlayer2.ProvisioningNetworkErrorException,final void addSuppressed(Throwable exception), Appends the specified exception to the exceptions that were suppressed in order to deliver this exception.
android.media.MediaPlayer2.ProvisioningNetworkErrorException,Throwable fillInStackTrace(), Fills in the execution stack trace.
android.media.MediaPlayer2.ProvisioningNetworkErrorException,Throwable getCause(), Returns the cause of this throwable or null if the cause is nonexistent or unknown.
android.media.MediaPlayer2.ProvisioningNetworkErrorException,String getLocalizedMessage(), Creates a localized description of this throwable.
android.media.MediaPlayer2.ProvisioningNetworkErrorException,String getMessage(), Returns the detail message string of this throwable.
android.media.MediaPlayer2.ProvisioningNetworkErrorException,StackTraceElement[] getStackTrace(), Provides programmatic access to the stack trace information printed by printStackTrace().
android.media.MediaPlayer2.ProvisioningNetworkErrorException,final Throwable[] getSuppressed()," Returns an array containing all of the exceptions that were suppressed, typically by the try-with-resources statement, in order to deliver this exception."
android.media.MediaPlayer2.ProvisioningNetworkErrorException,Throwable initCause(Throwable cause), Initializes the cause of this throwable to the specified value.
android.media.MediaPlayer2.ProvisioningNetworkErrorException,void printStackTrace(), Prints this throwable and its backtrace to the standard error stream.
android.media.MediaPlayer2.ProvisioningNetworkErrorException,void printStackTrace(PrintWriter s), Prints this throwable and its backtrace to the specified print writer.
android.media.MediaPlayer2.ProvisioningNetworkErrorException,void printStackTrace(PrintStream s), Prints this throwable and its backtrace to the specified print stream.
android.media.MediaPlayer2.ProvisioningNetworkErrorException,void setStackTrace(StackTraceElement[] stackTrace), Sets the stack trace elements that will be returned by getStackTrace() and printed by printStackTrace() and related methods.
android.media.MediaPlayer2.ProvisioningNetworkErrorException,String toString(), Returns a short description of this throwable.
android.media.MediaPlayer2.ProvisioningNetworkErrorException,Object clone(), Creates and returns a copy of this object.
android.media.MediaPlayer2.ProvisioningNetworkErrorException,boolean equals(Object obj)," Indicates whether some other object is ""equal to"" this one."
android.media.MediaPlayer2.ProvisioningNetworkErrorException,void finalize(), Called by the garbage collector on an object when garbage collection determines that there are no more references to the object.
android.media.MediaPlayer2.ProvisioningNetworkErrorException,final Class<?> getClass(), Returns the runtime class of this Object.
android.media.MediaPlayer2.ProvisioningNetworkErrorException,int hashCode(), Returns a hash code value for the object.
android.media.MediaPlayer2.ProvisioningNetworkErrorException,final void notify(), Wakes up a single thread that is waiting on this object's monitor.
android.media.MediaPlayer2.ProvisioningNetworkErrorException,final void notifyAll(), Wakes up all threads that are waiting on this object's monitor.
android.media.MediaPlayer2.ProvisioningNetworkErrorException,String toString(), Returns a string representation of the object.
android.media.MediaPlayer2.ProvisioningNetworkErrorException,"final void wait(long millis, int nanos)"," Causes the current thread to wait until another thread invokes the notify() method or the notifyAll() method for this object, or some other thread interrupts the current thread, or a certain amount of real time has elapsed."
android.media.MediaPlayer2.ProvisioningNetworkErrorException,final void wait(long millis)," Causes the current thread to wait until either another thread invokes the notify() method or the notifyAll() method for this object, or a specified amount of time has elapsed."
android.media.MediaPlayer2.ProvisioningNetworkErrorException,final void wait(), Causes the current thread to wait until another thread invokes the notify() method or the notifyAll() method for this object.
android.media.MediaPlayer2.ProvisioningServerErrorException,final void addSuppressed(Throwable exception), Appends the specified exception to the exceptions that were suppressed in order to deliver this exception.
android.media.MediaPlayer2.ProvisioningServerErrorException,Throwable fillInStackTrace(), Fills in the execution stack trace.
android.media.MediaPlayer2.ProvisioningServerErrorException,Throwable getCause(), Returns the cause of this throwable or null if the cause is nonexistent or unknown.
android.media.MediaPlayer2.ProvisioningServerErrorException,String getLocalizedMessage(), Creates a localized description of this throwable.
android.media.MediaPlayer2.ProvisioningServerErrorException,String getMessage(), Returns the detail message string of this throwable.
android.media.MediaPlayer2.ProvisioningServerErrorException,StackTraceElement[] getStackTrace(), Provides programmatic access to the stack trace information printed by printStackTrace().
android.media.MediaPlayer2.ProvisioningServerErrorException,final Throwable[] getSuppressed()," Returns an array containing all of the exceptions that were suppressed, typically by the try-with-resources statement, in order to deliver this exception."
android.media.MediaPlayer2.ProvisioningServerErrorException,Throwable initCause(Throwable cause), Initializes the cause of this throwable to the specified value.
android.media.MediaPlayer2.ProvisioningServerErrorException,void printStackTrace(), Prints this throwable and its backtrace to the standard error stream.
android.media.MediaPlayer2.ProvisioningServerErrorException,void printStackTrace(PrintWriter s), Prints this throwable and its backtrace to the specified print writer.
android.media.MediaPlayer2.ProvisioningServerErrorException,void printStackTrace(PrintStream s), Prints this throwable and its backtrace to the specified print stream.
android.media.MediaPlayer2.ProvisioningServerErrorException,void setStackTrace(StackTraceElement[] stackTrace), Sets the stack trace elements that will be returned by getStackTrace() and printed by printStackTrace() and related methods.
android.media.MediaPlayer2.ProvisioningServerErrorException,String toString(), Returns a short description of this throwable.
android.media.MediaPlayer2.ProvisioningServerErrorException,Object clone(), Creates and returns a copy of this object.
android.media.MediaPlayer2.ProvisioningServerErrorException,boolean equals(Object obj)," Indicates whether some other object is ""equal to"" this one."
android.media.MediaPlayer2.ProvisioningServerErrorException,void finalize(), Called by the garbage collector on an object when garbage collection determines that there are no more references to the object.
android.media.MediaPlayer2.ProvisioningServerErrorException,final Class<?> getClass(), Returns the runtime class of this Object.
android.media.MediaPlayer2.ProvisioningServerErrorException,int hashCode(), Returns a hash code value for the object.
android.media.MediaPlayer2.ProvisioningServerErrorException,final void notify(), Wakes up a single thread that is waiting on this object's monitor.
android.media.MediaPlayer2.ProvisioningServerErrorException,final void notifyAll(), Wakes up all threads that are waiting on this object's monitor.
android.media.MediaPlayer2.ProvisioningServerErrorException,String toString(), Returns a string representation of the object.
android.media.MediaPlayer2.ProvisioningServerErrorException,"final void wait(long millis, int nanos)"," Causes the current thread to wait until another thread invokes the notify() method or the notifyAll() method for this object, or some other thread interrupts the current thread, or a certain amount of real time has elapsed."
android.media.MediaPlayer2.ProvisioningServerErrorException,final void wait(long millis)," Causes the current thread to wait until either another thread invokes the notify() method or the notifyAll() method for this object, or a specified amount of time has elapsed."
android.media.MediaPlayer2.ProvisioningServerErrorException,final void wait(), Causes the current thread to wait until another thread invokes the notify() method or the notifyAll() method for this object.
android.media.MediaPlayer2.TrackInfo,abstract MediaFormat getFormat(), Gets the MediaFormat of the track.
android.media.MediaPlayer2.TrackInfo,abstract String getLanguage(), Gets the language code of the track.
android.media.MediaPlayer2.TrackInfo,abstract int getTrackType(), Gets the track type.
android.media.MediaPlayer2.TrackInfo,abstract String toString(), Returns a string representation of the object.
android.media.MediaPlayer2,"abstract void addPlaylistItem(int index, DataSourceDesc dsd)", Inserts the DataSourceDesc to the play list at position index.
android.media.MediaPlayer2,abstract void attachAuxEffect(int effectId), Attaches an auxiliary effect to the player.
android.media.MediaPlayer2,abstract void clearPendingCommands(), Discards all pending commands.
android.media.MediaPlayer2,abstract void close(), Releases the resources held by this MediaPlayer2 object.
android.media.MediaPlayer2,static final MediaPlayer2 create(), Create a MediaPlayer2 object.
android.media.MediaPlayer2,abstract void deselectTrack(int index), Deselect a track.
android.media.MediaPlayer2,"abstract DataSourceDesc editPlaylistItem(int index, DataSourceDesc dsd)", replaces the DataSourceDesc at index in the play list with given dsd.
android.media.MediaPlayer2,abstract int getAudioSessionId(), Returns the audio session ID.
android.media.MediaPlayer2,abstract DataSourceDesc getCurrentDataSource(), Gets the current data source as described by a DataSourceDesc.
android.media.MediaPlayer2,abstract int getCurrentPlaylistItemIndex(), Gets the current index of play list.
android.media.MediaPlayer2,abstract int getCurrentPosition(), Gets the current playback position.
android.media.MediaPlayer2,abstract MediaPlayer2.DrmInfo getDrmInfo(), Retrieves the DRM Info associated with the current source
android.media.MediaPlayer2,abstract String getDrmPropertyString(String propertyName)," Read a DRM engine plugin String property value, given the property name string."
android.media.MediaPlayer2,abstract int getDuration(), Gets the duration of the file.
android.media.MediaPlayer2,"abstract MediaDrm.KeyRequest getKeyRequest(byte[] keySetId, byte[] initData, String mimeType, int keyType, Map<String,String> optionalParameters)", A key request/response exchange occurs between the app and a license server to obtain or release keys used to decrypt encrypted content.
android.media.MediaPlayer2,abstract int getLoopingMode(), Gets the looping mode of play list.
android.media.MediaPlayer2,abstract PersistableBundle getMetrics(), Return Metrics data about the current player.
android.media.MediaPlayer2,abstract PlaybackParams getPlaybackParams()," Gets the playback params, containing the current playback rate."
android.media.MediaPlayer2,abstract List<DataSourceDesc> getPlaylist(), Gets a copy of the play list.
android.media.MediaPlayer2,abstract int getSelectedTrack(int trackType)," Returns the index of the audio, video, or subtitle track currently selected for playback, The return value is an index into the array returned by getTrackInfo(), and can be used in calls to selectTrack(int) or deselectTrack(int)."
android.media.MediaPlayer2,abstract SyncParams getSyncParams(), Gets the A/V sync mode.
android.media.MediaPlayer2,abstract MediaTimestamp getTimestamp(), Get current playback position as a MediaTimestamp.
android.media.MediaPlayer2,abstract List<MediaPlayer2.TrackInfo> getTrackInfo(), Returns a List of track information.
android.media.MediaPlayer2,abstract int getVideoHeight(), Returns the height of the video.
android.media.MediaPlayer2,abstract int getVideoWidth(), Returns the width of the video.
android.media.MediaPlayer2,abstract boolean isPlaying(), Checks whether the MediaPlayer2 is playing.
android.media.MediaPlayer2,"abstract void movePlaylistItem(int indexFrom, int indexTo)", Moves the DataSourceDesc at indexFrom in the play list to indexTo.
android.media.MediaPlayer2,abstract void pause(), Pauses playback.
android.media.MediaPlayer2,abstract void play(), Starts or resumes playback.
android.media.MediaPlayer2,abstract void prepareAsync()," Prepares the player for playback, asynchronously."
android.media.MediaPlayer2,abstract void prepareDrm(UUID uuid)," Prepares the DRM for the current source If OnDrmConfigHelper is registered, it will be called during preparation to allow configuration of the DRM properties before opening the DRM session."
android.media.MediaPlayer2,"abstract byte[] provideKeyResponse(byte[] keySetId, byte[] response)"," A key response is received from the license server by the app, then it is provided to the DRM engine plugin using provideKeyResponse."
android.media.MediaPlayer2,"abstract void registerDrmEventCallback(Executor executor, MediaPlayer2.DrmEventCallback eventCallback)", Register a callback to be invoked when the media source is ready for playback.
android.media.MediaPlayer2,"abstract void registerEventCallback(Executor executor, MediaPlayer2.EventCallback eventCallback)", Register a callback to be invoked when the media source is ready for playback.
android.media.MediaPlayer2,abstract void releaseDrm()," Releases the DRM session The player has to have an active DRM session and be in stopped, or prepared state before this call is made."
android.media.MediaPlayer2,abstract DataSourceDesc removePlaylistItem(int index), Removes the DataSourceDesc at index in the play list.
android.media.MediaPlayer2,abstract void reset(), Resets the MediaPlayer2 to its uninitialized state.
android.media.MediaPlayer2,abstract void restoreKeys(byte[] keySetId), Restore persisted offline keys into a new session.
android.media.MediaPlayer2,"abstract void seekTo(long msec, int mode)", Moves the media to specified time position by considering the given mode.
android.media.MediaPlayer2,abstract void selectTrack(int index), Selects a track.
android.media.MediaPlayer2,abstract void setAudioAttributes(AudioAttributes attributes), Sets the audio attributes for this MediaPlayer2.
android.media.MediaPlayer2,abstract void setAudioSessionId(int sessionId), Sets the audio session ID.
android.media.MediaPlayer2,abstract void setAuxEffectSendLevel(float level), Sets the send level of the player to the attached auxiliary effect.
android.media.MediaPlayer2,abstract void setCurrentPlaylistItem(int index), Sets the index of current DataSourceDesc in the play list to be played.
android.media.MediaPlayer2,abstract void setDataSource(DataSourceDesc dsd), Sets the data source as described by a DataSourceDesc.
android.media.MediaPlayer2,"abstract void setDrmPropertyString(String propertyName, String value)", Set a DRM engine plugin String property value.
android.media.MediaPlayer2,abstract void setLoopingMode(int mode), Sets the looping mode of the play list.
android.media.MediaPlayer2,abstract void setNextPlaylistItem(int index), Sets the index of next-to-be-played DataSourceDesc in the play list.
android.media.MediaPlayer2,abstract void setOnDrmConfigHelper(MediaPlayer2.OnDrmConfigHelper listener), Register a callback to be invoked for configuration of the DRM object before the session is created.
android.media.MediaPlayer2,abstract void setPlaybackParams(PlaybackParams params), Sets playback rate using PlaybackParams.
android.media.MediaPlayer2,"abstract void setPlaylist(List<DataSourceDesc> pl, int startIndex)", Sets the play list.
android.media.MediaPlayer2,abstract void setSurface(Surface surface), Sets the Surface to be used as the sink for the video portion of the media.
android.media.MediaPlayer2,abstract void setSyncParams(SyncParams params), Sets A/V sync mode.
android.media.MediaPlayer2,"abstract void setVolume(float leftVolume, float rightVolume)", Sets the volume on this player.
android.media.MediaPlayer2,abstract void unregisterDrmEventCallback(MediaPlayer2.DrmEventCallback callback), Unregisters a MediaPlayer2.DrmEventCallback.
android.media.MediaPlayer2,abstract void unregisterEventCallback(MediaPlayer2.EventCallback callback), Unregisters an MediaPlayer2.EventCallback.
android.media.MediaRecorder.AudioEncoder,Object clone(), Creates and returns a copy of this object.
android.media.MediaRecorder.AudioEncoder,boolean equals(Object obj)," Indicates whether some other object is ""equal to"" this one."
android.media.MediaRecorder.AudioEncoder,void finalize(), Called by the garbage collector on an object when garbage collection determines that there are no more references to the object.
android.media.MediaRecorder.AudioEncoder,final Class<?> getClass(), Returns the runtime class of this Object.
android.media.MediaRecorder.AudioEncoder,int hashCode(), Returns a hash code value for the object.
android.media.MediaRecorder.AudioEncoder,final void notify(), Wakes up a single thread that is waiting on this object's monitor.
android.media.MediaRecorder.AudioEncoder,final void notifyAll(), Wakes up all threads that are waiting on this object's monitor.
android.media.MediaRecorder.AudioEncoder,String toString(), Returns a string representation of the object.
android.media.MediaRecorder.AudioEncoder,"final void wait(long millis, int nanos)"," Causes the current thread to wait until another thread invokes the notify() method or the notifyAll() method for this object, or some other thread interrupts the current thread, or a certain amount of real time has elapsed."
android.media.MediaRecorder.AudioEncoder,final void wait(long millis)," Causes the current thread to wait until either another thread invokes the notify() method or the notifyAll() method for this object, or a specified amount of time has elapsed."
android.media.MediaRecorder.AudioEncoder,final void wait(), Causes the current thread to wait until another thread invokes the notify() method or the notifyAll() method for this object.
android.media.MediaRecorder.AudioSource,Object clone(), Creates and returns a copy of this object.
android.media.MediaRecorder.AudioSource,boolean equals(Object obj)," Indicates whether some other object is ""equal to"" this one."
android.media.MediaRecorder.AudioSource,void finalize(), Called by the garbage collector on an object when garbage collection determines that there are no more references to the object.
android.media.MediaRecorder.AudioSource,final Class<?> getClass(), Returns the runtime class of this Object.
android.media.MediaRecorder.AudioSource,int hashCode(), Returns a hash code value for the object.
android.media.MediaRecorder.AudioSource,final void notify(), Wakes up a single thread that is waiting on this object's monitor.
android.media.MediaRecorder.AudioSource,final void notifyAll(), Wakes up all threads that are waiting on this object's monitor.
android.media.MediaRecorder.AudioSource,String toString(), Returns a string representation of the object.
android.media.MediaRecorder.AudioSource,"final void wait(long millis, int nanos)"," Causes the current thread to wait until another thread invokes the notify() method or the notifyAll() method for this object, or some other thread interrupts the current thread, or a certain amount of real time has elapsed."
android.media.MediaRecorder.AudioSource,final void wait(long millis)," Causes the current thread to wait until either another thread invokes the notify() method or the notifyAll() method for this object, or a specified amount of time has elapsed."
android.media.MediaRecorder.AudioSource,final void wait(), Causes the current thread to wait until another thread invokes the notify() method or the notifyAll() method for this object.
android.media.MediaRecorder.MetricsConstants,Object clone(), Creates and returns a copy of this object.
android.media.MediaRecorder.MetricsConstants,boolean equals(Object obj)," Indicates whether some other object is ""equal to"" this one."
android.media.MediaRecorder.MetricsConstants,void finalize(), Called by the garbage collector on an object when garbage collection determines that there are no more references to the object.
android.media.MediaRecorder.MetricsConstants,final Class<?> getClass(), Returns the runtime class of this Object.
android.media.MediaRecorder.MetricsConstants,int hashCode(), Returns a hash code value for the object.
android.media.MediaRecorder.MetricsConstants,final void notify(), Wakes up a single thread that is waiting on this object's monitor.
android.media.MediaRecorder.MetricsConstants,final void notifyAll(), Wakes up all threads that are waiting on this object's monitor.
android.media.MediaRecorder.MetricsConstants,String toString(), Returns a string representation of the object.
android.media.MediaRecorder.MetricsConstants,"final void wait(long millis, int nanos)"," Causes the current thread to wait until another thread invokes the notify() method or the notifyAll() method for this object, or some other thread interrupts the current thread, or a certain amount of real time has elapsed."
android.media.MediaRecorder.MetricsConstants,final void wait(long millis)," Causes the current thread to wait until either another thread invokes the notify() method or the notifyAll() method for this object, or a specified amount of time has elapsed."
android.media.MediaRecorder.MetricsConstants,final void wait(), Causes the current thread to wait until another thread invokes the notify() method or the notifyAll() method for this object.
android.media.MediaRecorder.OnErrorListener,"abstract void onError(MediaRecorder mr, int what, int extra)", Called when an error occurs while recording.
android.media.MediaRecorder.OnInfoListener,"abstract void onInfo(MediaRecorder mr, int what, int extra)", Called to indicate an info or a warning during recording.
android.media.MediaRecorder.OutputFormat,Object clone(), Creates and returns a copy of this object.
android.media.MediaRecorder.OutputFormat,boolean equals(Object obj)," Indicates whether some other object is ""equal to"" this one."
android.media.MediaRecorder.OutputFormat,void finalize(), Called by the garbage collector on an object when garbage collection determines that there are no more references to the object.
android.media.MediaRecorder.OutputFormat,final Class<?> getClass(), Returns the runtime class of this Object.
android.media.MediaRecorder.OutputFormat,int hashCode(), Returns a hash code value for the object.
android.media.MediaRecorder.OutputFormat,final void notify(), Wakes up a single thread that is waiting on this object's monitor.
android.media.MediaRecorder.OutputFormat,final void notifyAll(), Wakes up all threads that are waiting on this object's monitor.
android.media.MediaRecorder.OutputFormat,String toString(), Returns a string representation of the object.
android.media.MediaRecorder.OutputFormat,"final void wait(long millis, int nanos)"," Causes the current thread to wait until another thread invokes the notify() method or the notifyAll() method for this object, or some other thread interrupts the current thread, or a certain amount of real time has elapsed."
android.media.MediaRecorder.OutputFormat,final void wait(long millis)," Causes the current thread to wait until either another thread invokes the notify() method or the notifyAll() method for this object, or a specified amount of time has elapsed."
android.media.MediaRecorder.OutputFormat,final void wait(), Causes the current thread to wait until another thread invokes the notify() method or the notifyAll() method for this object.
android.media.MediaRecorder,"void addOnRoutingChangedListener(AudioRouting.OnRoutingChangedListener listener, Handler handler)", Adds an AudioRouting.OnRoutingChangedListener to receive notifications of routing changes on this MediaRecorder.
android.media.MediaRecorder,List<MicrophoneInfo> getActiveMicrophones(), Return A lists of MicrophoneInfo representing the active microphones.
android.media.MediaRecorder,static final int getAudioSourceMax(), Gets the maximum value for audio sources.
android.media.MediaRecorder,int getMaxAmplitude(), Returns the maximum absolute amplitude that was sampled since the last call to this method.
android.media.MediaRecorder,PersistableBundle getMetrics(), Return Metrics data about the current Mediarecorder instance.
android.media.MediaRecorder,AudioDeviceInfo getPreferredDevice(), Returns the selected input device specified by setPreferredDevice(AudioDeviceInfo).
android.media.MediaRecorder,AudioDeviceInfo getRoutedDevice(), Returns an AudioDeviceInfo identifying the current routing of this MediaRecorder Note: The query is only valid if the MediaRecorder is currently recording.
android.media.MediaRecorder,Surface getSurface(), Gets the surface to record from when using SURFACE video source.
android.media.MediaRecorder,void pause(), Pauses recording.
android.media.MediaRecorder,void prepare(), Prepares the recorder to begin capturing and encoding data.
android.media.MediaRecorder,void release(), Releases resources associated with this MediaRecorder object.
android.media.MediaRecorder,void removeOnRoutingChangedListener(AudioRouting.OnRoutingChangedListener listener), Removes an AudioRouting.OnRoutingChangedListener which has been previously added to receive rerouting notifications.
android.media.MediaRecorder,void reset(), Restarts the MediaRecorder to its idle state.
android.media.MediaRecorder,void resume(), Resumes recording.
android.media.MediaRecorder,void setAudioChannels(int numChannels), Sets the number of audio channels for recording.
android.media.MediaRecorder,void setAudioEncoder(int audio_encoder), Sets the audio encoder to be used for recording.
android.media.MediaRecorder,void setAudioEncodingBitRate(int bitRate), Sets the audio encoding bit rate for recording.
android.media.MediaRecorder,void setAudioSamplingRate(int samplingRate), Sets the audio sampling rate for recording.
android.media.MediaRecorder,void setAudioSource(int audio_source), Sets the audio source to be used for recording.
android.media.MediaRecorder,void setCamera(Camera c), This method was deprecated in API level 21. Use getSurface() and the android.hardware.camera2 API instead.
android.media.MediaRecorder,void setCaptureRate(double fps), Set video frame capture rate.
android.media.MediaRecorder,void setInputSurface(Surface surface), Configures the recorder to use a persistent surface when using SURFACE video source.
android.media.MediaRecorder,"void setLocation(float latitude, float longitude)", Set and store the geodata (latitude and longitude) in the output file.
android.media.MediaRecorder,void setMaxDuration(int max_duration_ms), Sets the maximum duration (in ms) of the recording session.
android.media.MediaRecorder,void setMaxFileSize(long max_filesize_bytes), Sets the maximum filesize (in bytes) of the recording session.
android.media.MediaRecorder,void setNextOutputFile(File file), Sets the next output file to be used when the maximum filesize is reached on the prior output setOutputFile(File) or setNextOutputFile(File)).
android.media.MediaRecorder,void setNextOutputFile(FileDescriptor fd), Sets the next output file descriptor to be used when the maximum filesize is reached on the prior output setOutputFile(File) or setNextOutputFile(File)).
android.media.MediaRecorder,void setOnErrorListener(MediaRecorder.OnErrorListener l), Register a callback to be invoked when an error occurs while recording.
android.media.MediaRecorder,void setOnInfoListener(MediaRecorder.OnInfoListener listener), Register a callback to be invoked when an informational event occurs while recording.
android.media.MediaRecorder,void setOrientationHint(int degrees), Sets the orientation hint for output video playback.
android.media.MediaRecorder,void setOutputFile(String path), Sets the path of the output file to be produced.
android.media.MediaRecorder,void setOutputFile(File file), Pass in the file object to be written.
android.media.MediaRecorder,void setOutputFile(FileDescriptor fd), Pass in the file descriptor of the file to be written.
android.media.MediaRecorder,void setOutputFormat(int output_format), Sets the format of the output file produced during recording.
android.media.MediaRecorder,boolean setPreferredDevice(AudioDeviceInfo deviceInfo), Specifies an audio device (via an AudioDeviceInfo object) to route the input from this MediaRecorder.
android.media.MediaRecorder,void setPreviewDisplay(Surface sv), Sets a Surface to show a preview of recorded media (video).
android.media.MediaRecorder,void setProfile(CamcorderProfile profile), Uses the settings from a CamcorderProfile object for recording.
android.media.MediaRecorder,void setVideoEncoder(int video_encoder), Sets the video encoder to be used for recording.
android.media.MediaRecorder,void setVideoEncodingBitRate(int bitRate), Sets the video encoding bit rate for recording.
android.media.MediaRecorder,"void setVideoEncodingProfileLevel(int profile, int level)", Sets the desired video encoding profile and level for recording.
android.media.MediaRecorder,void setVideoFrameRate(int rate), Sets the frame rate of the video to be captured.
android.media.MediaRecorder,"void setVideoSize(int width, int height)", Sets the width and height of the video to be captured.
android.media.MediaRecorder,void setVideoSource(int video_source), Sets the video source to be used for recording.
android.media.MediaRecorder,void start(), Begins capturing and encoding data to the file specified with setOutputFile().
android.media.MediaRecorder,void stop(), Stops recording.
android.media.MediaRecorder.VideoEncoder,Object clone(), Creates and returns a copy of this object.
android.media.MediaRecorder.VideoEncoder,boolean equals(Object obj)," Indicates whether some other object is ""equal to"" this one."
android.media.MediaRecorder.VideoEncoder,void finalize(), Called by the garbage collector on an object when garbage collection determines that there are no more references to the object.
android.media.MediaRecorder.VideoEncoder,final Class<?> getClass(), Returns the runtime class of this Object.
android.media.MediaRecorder.VideoEncoder,int hashCode(), Returns a hash code value for the object.
android.media.MediaRecorder.VideoEncoder,final void notify(), Wakes up a single thread that is waiting on this object's monitor.
android.media.MediaRecorder.VideoEncoder,final void notifyAll(), Wakes up all threads that are waiting on this object's monitor.
android.media.MediaRecorder.VideoEncoder,String toString(), Returns a string representation of the object.
android.media.MediaRecorder.VideoEncoder,"final void wait(long millis, int nanos)"," Causes the current thread to wait until another thread invokes the notify() method or the notifyAll() method for this object, or some other thread interrupts the current thread, or a certain amount of real time has elapsed."
android.media.MediaRecorder.VideoEncoder,final void wait(long millis)," Causes the current thread to wait until either another thread invokes the notify() method or the notifyAll() method for this object, or a specified amount of time has elapsed."
android.media.MediaRecorder.VideoEncoder,final void wait(), Causes the current thread to wait until another thread invokes the notify() method or the notifyAll() method for this object.
android.media.MediaRecorder.VideoSource,Object clone(), Creates and returns a copy of this object.
android.media.MediaRecorder.VideoSource,boolean equals(Object obj)," Indicates whether some other object is ""equal to"" this one."
android.media.MediaRecorder.VideoSource,void finalize(), Called by the garbage collector on an object when garbage collection determines that there are no more references to the object.
android.media.MediaRecorder.VideoSource,final Class<?> getClass(), Returns the runtime class of this Object.
android.media.MediaRecorder.VideoSource,int hashCode(), Returns a hash code value for the object.
android.media.MediaRecorder.VideoSource,final void notify(), Wakes up a single thread that is waiting on this object's monitor.
android.media.MediaRecorder.VideoSource,final void notifyAll(), Wakes up all threads that are waiting on this object's monitor.
android.media.MediaRecorder.VideoSource,String toString(), Returns a string representation of the object.
android.media.MediaRecorder.VideoSource,"final void wait(long millis, int nanos)"," Causes the current thread to wait until another thread invokes the notify() method or the notifyAll() method for this object, or some other thread interrupts the current thread, or a certain amount of real time has elapsed."
android.media.MediaRecorder.VideoSource,final void wait(long millis)," Causes the current thread to wait until either another thread invokes the notify() method or the notifyAll() method for this object, or a specified amount of time has elapsed."
android.media.MediaRecorder.VideoSource,final void wait(), Causes the current thread to wait until another thread invokes the notify() method or the notifyAll() method for this object.
android.media.MediaRouter.Callback,"abstract void onRouteAdded(MediaRouter router, MediaRouter.RouteInfo info)", Called when a route for the specified type was added.
android.media.MediaRouter.Callback,"abstract void onRouteChanged(MediaRouter router, MediaRouter.RouteInfo info)", Called when an aspect of the indicated route has changed.
android.media.MediaRouter.Callback,"abstract void onRouteGrouped(MediaRouter router, MediaRouter.RouteInfo info, MediaRouter.RouteGroup group, int index)", Called when a route is added to a group.
android.media.MediaRouter.Callback,"void onRoutePresentationDisplayChanged(MediaRouter router, MediaRouter.RouteInfo info)", Called when a route's presentation display changes.
android.media.MediaRouter.Callback,"abstract void onRouteRemoved(MediaRouter router, MediaRouter.RouteInfo info)", Called when a route for the specified type was removed.
android.media.MediaRouter.Callback,"abstract void onRouteSelected(MediaRouter router, int type, MediaRouter.RouteInfo info)", Called when the supplied route becomes selected as the active route for the given route type.
android.media.MediaRouter.Callback,"abstract void onRouteUngrouped(MediaRouter router, MediaRouter.RouteInfo info, MediaRouter.RouteGroup group)", Called when a route is removed from a group.
android.media.MediaRouter.Callback,"abstract void onRouteUnselected(MediaRouter router, int type, MediaRouter.RouteInfo info)", Called when the supplied route becomes unselected as the active route for the given route type.
android.media.MediaRouter.Callback,"abstract void onRouteVolumeChanged(MediaRouter router, MediaRouter.RouteInfo info)", Called when a route's volume changes.
android.media.MediaRouter.RouteCategory,CharSequence getName(),
android.media.MediaRouter.RouteCategory,CharSequence getName(Context context), Return the properly localized/configuration dependent name of this RouteCategory.
android.media.MediaRouter.RouteCategory,List<MediaRouter.RouteInfo> getRoutes(List<MediaRouter.RouteInfo> out), Return the current list of routes in this category that have been added to the MediaRouter.
android.media.MediaRouter.RouteCategory,int getSupportedTypes(),
android.media.MediaRouter.RouteCategory,boolean isGroupable(), Return whether or not this category supports grouping.
android.media.MediaRouter.RouteCategory,String toString(), Returns a string representation of the object.
android.media.MediaRouter.RouteGroup,void addRoute(MediaRouter.RouteInfo route), Add a route to this group.
android.media.MediaRouter.RouteGroup,"void addRoute(MediaRouter.RouteInfo route, int insertAt)", Add a route to this group before the specified index.
android.media.MediaRouter.RouteGroup,MediaRouter.RouteInfo getRouteAt(int index), Return the route in this group at the specified index
android.media.MediaRouter.RouteGroup,int getRouteCount(),
android.media.MediaRouter.RouteGroup,void removeRoute(MediaRouter.RouteInfo route), Remove a route from this group.
android.media.MediaRouter.RouteGroup,void removeRoute(int index), Remove the route at the specified index from this group.
android.media.MediaRouter.RouteGroup,void requestSetVolume(int volume), Request a volume change for this route.
android.media.MediaRouter.RouteGroup,void requestUpdateVolume(int direction), Request an incremental volume update for this route.
android.media.MediaRouter.RouteGroup,void setIconDrawable(Drawable icon), Set an icon that will be used to represent this group.
android.media.MediaRouter.RouteGroup,void setIconResource(int resId), Set an icon that will be used to represent this group.
android.media.MediaRouter.RouteGroup,String toString(), Returns a string representation of the object.
android.media.MediaRouter.RouteInfo,MediaRouter.RouteCategory getCategory(),
android.media.MediaRouter.RouteInfo,CharSequence getDescription(), Gets the user-visible description of the route.
android.media.MediaRouter.RouteInfo,int getDeviceType(), Gets the type of the receiver device associated with this route.
android.media.MediaRouter.RouteInfo,MediaRouter.RouteGroup getGroup(),
android.media.MediaRouter.RouteInfo,Drawable getIconDrawable(), Get the icon representing this route.
android.media.MediaRouter.RouteInfo,CharSequence getName(Context context), Return the properly localized/resource user-visible name of this route.
android.media.MediaRouter.RouteInfo,CharSequence getName(), Gets the user-visible name of the route.
android.media.MediaRouter.RouteInfo,int getPlaybackStream(),
android.media.MediaRouter.RouteInfo,int getPlaybackType(),
android.media.MediaRouter.RouteInfo,Display getPresentationDisplay(), Gets the Display that should be used by the application to show a Presentation on an external display when this route is selected.
android.media.MediaRouter.RouteInfo,CharSequence getStatus(),
android.media.MediaRouter.RouteInfo,int getSupportedTypes(),
android.media.MediaRouter.RouteInfo,Object getTag(),
android.media.MediaRouter.RouteInfo,int getVolume(), Return the current volume for this route.
android.media.MediaRouter.RouteInfo,int getVolumeHandling(),
android.media.MediaRouter.RouteInfo,int getVolumeMax(),
android.media.MediaRouter.RouteInfo,boolean isConnecting(), Returns true if the route is in the process of connecting and is not yet ready for use.
android.media.MediaRouter.RouteInfo,boolean isEnabled(), Returns true if this route is enabled and may be selected.
android.media.MediaRouter.RouteInfo,void requestSetVolume(int volume), Request a volume change for this route.
android.media.MediaRouter.RouteInfo,void requestUpdateVolume(int direction), Request an incremental volume update for this route.
android.media.MediaRouter.RouteInfo,void setTag(Object tag), Set an application-specific tag object for this route.
android.media.MediaRouter.RouteInfo,String toString(), Returns a string representation of the object.
android.media.MediaRouter.SimpleCallback,"void onRouteAdded(MediaRouter router, MediaRouter.RouteInfo info)", Called when a route for the specified type was added.
android.media.MediaRouter.SimpleCallback,"void onRouteChanged(MediaRouter router, MediaRouter.RouteInfo info)", Called when an aspect of the indicated route has changed.
android.media.MediaRouter.SimpleCallback,"void onRouteGrouped(MediaRouter router, MediaRouter.RouteInfo info, MediaRouter.RouteGroup group, int index)", Called when a route is added to a group.
android.media.MediaRouter.SimpleCallback,"void onRouteRemoved(MediaRouter router, MediaRouter.RouteInfo info)", Called when a route for the specified type was removed.
android.media.MediaRouter.SimpleCallback,"void onRouteSelected(MediaRouter router, int type, MediaRouter.RouteInfo info)", Called when the supplied route becomes selected as the active route for the given route type.
android.media.MediaRouter.SimpleCallback,"void onRouteUngrouped(MediaRouter router, MediaRouter.RouteInfo info, MediaRouter.RouteGroup group)", Called when a route is removed from a group.
android.media.MediaRouter.SimpleCallback,"void onRouteUnselected(MediaRouter router, int type, MediaRouter.RouteInfo info)", Called when the supplied route becomes unselected as the active route for the given route type.
android.media.MediaRouter.SimpleCallback,"void onRouteVolumeChanged(MediaRouter router, MediaRouter.RouteInfo info)", Called when a route's volume changes.
android.media.MediaRouter,"void addCallback(int types, MediaRouter.Callback cb, int flags)", Add a callback to listen to events about specific kinds of media routes.
android.media.MediaRouter,"void addCallback(int types, MediaRouter.Callback cb)", Add a callback to listen to events about specific kinds of media routes.
android.media.MediaRouter,void addUserRoute(MediaRouter.UserRouteInfo info), Add an app-specified route for media to the MediaRouter.
android.media.MediaRouter,void clearUserRoutes(), Remove all app-specified routes from the MediaRouter.
android.media.MediaRouter,"MediaRouter.RouteCategory createRouteCategory(int nameResId, boolean isGroupable)", Create a new route category.
android.media.MediaRouter,"MediaRouter.RouteCategory createRouteCategory(CharSequence name, boolean isGroupable)", Create a new route category.
android.media.MediaRouter,MediaRouter.UserRouteInfo createUserRoute(MediaRouter.RouteCategory category), Create a new user route that may be modified and registered for use by the application.
android.media.MediaRouter,MediaRouter.RouteCategory getCategoryAt(int index), Return the category at the given index.
android.media.MediaRouter,int getCategoryCount(), Return the number of categories currently represented by routes known to this MediaRouter.
android.media.MediaRouter,MediaRouter.RouteInfo getDefaultRoute(), Gets the default route for playing media content on the system.
android.media.MediaRouter,MediaRouter.RouteInfo getRouteAt(int index), Return the route at the specified index.
android.media.MediaRouter,int getRouteCount(), Return the number of routes currently known to this MediaRouter.
android.media.MediaRouter,MediaRouter.RouteInfo getSelectedRoute(int type), Return the currently selected route for any of the given types
android.media.MediaRouter,void removeCallback(MediaRouter.Callback cb), Remove the specified callback.
android.media.MediaRouter,void removeUserRoute(MediaRouter.UserRouteInfo info), Remove an app-specified route for media from the MediaRouter.
android.media.MediaRouter,"void selectRoute(int types, MediaRouter.RouteInfo route)", Select the specified route to use for output of the given media types.
android.media.MediaRouter.UserRouteInfo,RemoteControlClient getRemoteControlClient()," Retrieve the RemoteControlClient associated with this route, if one has been set."
android.media.MediaRouter.UserRouteInfo,void requestSetVolume(int volume), Request a volume change for this route.
android.media.MediaRouter.UserRouteInfo,void requestUpdateVolume(int direction), Request an incremental volume update for this route.
android.media.MediaRouter.UserRouteInfo,void setDescription(CharSequence description), Set the user-visible description of this route.
android.media.MediaRouter.UserRouteInfo,void setIconDrawable(Drawable icon), Set an icon that will be used to represent this route.
android.media.MediaRouter.UserRouteInfo,void setIconResource(int resId), Set an icon that will be used to represent this route.
android.media.MediaRouter.UserRouteInfo,void setName(CharSequence name), Set the user-visible name of this route.
android.media.MediaRouter.UserRouteInfo,void setName(int resId), Set the user-visible name of this route.
android.media.MediaRouter.UserRouteInfo,void setPlaybackStream(int stream), Defines over what stream type the media is presented.
android.media.MediaRouter.UserRouteInfo,void setPlaybackType(int type)," Defines whether playback associated with this route is ""local"" (PLAYBACK_TYPE_LOCAL) or ""remote"" (PLAYBACK_TYPE_REMOTE)."
android.media.MediaRouter.UserRouteInfo,void setRemoteControlClient(RemoteControlClient rcc), Set the RemoteControlClient responsible for reporting playback info for this user route.
android.media.MediaRouter.UserRouteInfo,void setStatus(CharSequence status), Set the current user-visible status for this route.
android.media.MediaRouter.UserRouteInfo,void setVolume(int volume), Defines at what volume the playback associated with this route is performed (for user feedback purposes).
android.media.MediaRouter.UserRouteInfo,void setVolumeCallback(MediaRouter.VolumeCallback vcb), Set a callback to be notified of volume update requests
android.media.MediaRouter.UserRouteInfo,void setVolumeHandling(int volumeHandling), Defines whether volume for the playback associated with this route is fixed (PLAYBACK_VOLUME_FIXED) or can modified (PLAYBACK_VOLUME_VARIABLE).
android.media.MediaRouter.UserRouteInfo,void setVolumeMax(int volumeMax), Defines the maximum volume at which the playback associated with this route is performed (for user feedback purposes).
android.media.MediaRouter.VolumeCallback,"abstract void onVolumeSetRequest(MediaRouter.RouteInfo info, int volume)", Called when the volume for the route should be set to the given value
android.media.MediaRouter.VolumeCallback,"abstract void onVolumeUpdateRequest(MediaRouter.RouteInfo info, int direction)", Called when the volume for the route should be increased or decreased.
android.media.MediaScannerConnection.MediaScannerConnectionClient,abstract void onMediaScannerConnected(), Called to notify the client when a connection to the MediaScanner service has been established.
android.media.MediaScannerConnection.MediaScannerConnectionClient,"abstract void onScanCompleted(String path, Uri uri)", Called to notify the client when the media scanner has finished scanning a file.
android.media.MediaScannerConnection.OnScanCompletedListener,"abstract void onScanCompleted(String path, Uri uri)", Called to notify the client when the media scanner has finished scanning a file.
android.media.MediaScannerConnection,void connect(), Initiates a connection to the media scanner service.
android.media.MediaScannerConnection,void disconnect(), Releases the connection to the media scanner service.
android.media.MediaScannerConnection,boolean isConnected(), Returns whether we are connected to the media scanner service
android.media.MediaScannerConnection,"void onServiceConnected(ComponentName className, IBinder service)", Part of the ServiceConnection interface.
android.media.MediaScannerConnection,void onServiceDisconnected(ComponentName className), Part of the ServiceConnection interface.
android.media.MediaScannerConnection,"void scanFile(String path, String mimeType)", Requests the media scanner to scan a file.
android.media.MediaScannerConnection,"static void scanFile(Context context, String[] paths, String[] mimeTypes, MediaScannerConnection.OnScanCompletedListener callback)"," Convenience for constructing a MediaScannerConnection, calling connect() on it, and calling scanFile(Context, String[], String[], MediaScannerConnection.OnScanCompletedListener) with the given path and mimeType when the connection is established."
android.media.MediaSync.Callback,"abstract void onAudioBufferConsumed(MediaSync sync, ByteBuffer audioBuffer, int bufferId)", Called when returning an audio buffer which has been consumed.
android.media.MediaSync.OnErrorListener,"abstract void onError(MediaSync sync, int what, int extra)", Called to indicate an error.
android.media.MediaSync,Surface createInputSurface(), Requests a Surface to use as the input.
android.media.MediaSync,void flush(), Flushes all buffers from the sync object.
android.media.MediaSync,PlaybackParams getPlaybackParams(), Gets the playback rate using PlaybackParams.
android.media.MediaSync,SyncParams getSyncParams(), Gets the A/V sync mode.
android.media.MediaSync,MediaTimestamp getTimestamp(), Get current playback position.
android.media.MediaSync,"void queueAudio(ByteBuffer audioData, int bufferId, long presentationTimeUs)", Queues the audio data asynchronously for playback (AudioTrack must be in streaming mode).
android.media.MediaSync,void release(), Make sure you call this when you're done to free up any opened component instance instead of relying on the garbage collector to do this for you at some point in the future.
android.media.MediaSync,void setAudioTrack(AudioTrack audioTrack), Sets the audio track for MediaSync.
android.media.MediaSync,"void setCallback(MediaSync.Callback cb, Handler handler)", Sets an asynchronous callback for actionable MediaSync events.
android.media.MediaSync,"void setOnErrorListener(MediaSync.OnErrorListener listener, Handler handler)", Sets an asynchronous callback for error events.
android.media.MediaSync,void setPlaybackParams(PlaybackParams params), Sets playback rate using PlaybackParams.
android.media.MediaSync,void setSurface(Surface surface), Sets the output surface for MediaSync.
android.media.MediaSync,void setSyncParams(SyncParams params), Sets A/V sync mode.
android.media.MediaSyncEvent,static MediaSyncEvent createEvent(int eventType), Creates a synchronization event of the sepcified type.
android.media.MediaSyncEvent,int getAudioSessionId(), Gets the synchronization event audio session ID.
android.media.MediaSyncEvent,int getType(), Gets the synchronization event type.
android.media.MediaSyncEvent,MediaSyncEvent setAudioSessionId(int audioSessionId), Sets the event source audio session ID.
android.media.MediaTimestamp,long getAnchorMediaTimeUs(), Get the media time of the anchor in microseconds.
android.media.MediaTimestamp,long getAnchorSytemNanoTime(), Get the system time corresponding to the media time in nanoseconds.
android.media.MediaTimestamp,float getMediaClockRate(), Get the rate of the media clock in relation to the system time.
android.media.MicrophoneInfo.Coordinate3F,Object clone(), Creates and returns a copy of this object.
android.media.MicrophoneInfo.Coordinate3F,boolean equals(Object obj)," Indicates whether some other object is ""equal to"" this one."
android.media.MicrophoneInfo.Coordinate3F,void finalize(), Called by the garbage collector on an object when garbage collection determines that there are no more references to the object.
android.media.MicrophoneInfo.Coordinate3F,final Class<?> getClass(), Returns the runtime class of this Object.
android.media.MicrophoneInfo.Coordinate3F,int hashCode(), Returns a hash code value for the object.
android.media.MicrophoneInfo.Coordinate3F,final void notify(), Wakes up a single thread that is waiting on this object's monitor.
android.media.MicrophoneInfo.Coordinate3F,final void notifyAll(), Wakes up all threads that are waiting on this object's monitor.
android.media.MicrophoneInfo.Coordinate3F,String toString(), Returns a string representation of the object.
android.media.MicrophoneInfo.Coordinate3F,"final void wait(long millis, int nanos)"," Causes the current thread to wait until another thread invokes the notify() method or the notifyAll() method for this object, or some other thread interrupts the current thread, or a certain amount of real time has elapsed."
android.media.MicrophoneInfo.Coordinate3F,final void wait(long millis)," Causes the current thread to wait until either another thread invokes the notify() method or the notifyAll() method for this object, or a specified amount of time has elapsed."
android.media.MicrophoneInfo.Coordinate3F,final void wait(), Causes the current thread to wait until another thread invokes the notify() method or the notifyAll() method for this object.
android.media.MicrophoneInfo,"List<Pair<Integer,Integer>> getChannelMapping()"," Returns a Pair list for channel mapping, which indicating how this microphone is used by each channels or a capture stream."
android.media.MicrophoneInfo,String getDescription(), Returns alphanumeric code that uniquely identifies the device.
android.media.MicrophoneInfo,int getDirectionality(), Returns the directionality of microphone.
android.media.MicrophoneInfo,"List<Pair<Float,Float>> getFrequencyResponse()", Returns a Pair list of frequency responses.
android.media.MicrophoneInfo,int getGroup()," Returns A device group id that can be used to group together microphones on the same peripheral, attachments or logical groups."
android.media.MicrophoneInfo,int getId(), Returns The system unique device ID that corresponds to the id returned by getId().
android.media.MicrophoneInfo,int getIndexInTheGroup(), Returns unique index for device within its group.
android.media.MicrophoneInfo,int getLocation(), Returns the location of the microphone.
android.media.MicrophoneInfo,float getMaxSpl(), Returns the level in dB of the maximum SPL supported by the device at 1000Hz.
android.media.MicrophoneInfo,float getMinSpl(), Returns the level in dB of the minimum SPL that can be registered by the device at 1000Hz.
android.media.MicrophoneInfo,MicrophoneInfo.Coordinate3F getOrientation(), Returns A MicrophoneInfo.Coordinate3F object that represents the orientation of microphone.
android.media.MicrophoneInfo,MicrophoneInfo.Coordinate3F getPosition()," Returns A MicrophoneInfo.Coordinate3F object that represents the geometric location of microphone in meters, from botton-left-back corner of appliance."
android.media.MicrophoneInfo,float getSensitivity(), Returns the level in dBFS produced by a 1000Hz tone at 94 dB SPL.
android.media.MicrophoneInfo,int getType(), Returns the device type identifier of the microphone (e.g AudioDeviceInfo.TYPE_BUILTIN_MIC).
android.media.midi.MidiDevice.MidiConnection,void close(), Closes this stream and releases any system resources associated with it.
android.media.midi.MidiDevice,void close(), Closes this stream and releases any system resources associated with it.
android.media.midi.MidiDevice,"MidiDevice.MidiConnection connectPorts(MidiInputPort inputPort, int outputPortNumber)", Connects the supplied MidiInputPort to the output port of this device with the specified port number.
android.media.midi.MidiDevice,MidiDeviceInfo getInfo()," Returns a MidiDeviceInfo object, which describes this device."
android.media.midi.MidiDevice,MidiInputPort openInputPort(int portNumber), Called to open a MidiInputPort for the specified port number.
android.media.midi.MidiDevice,MidiOutputPort openOutputPort(int portNumber), Called to open a MidiOutputPort for the specified port number.
android.media.midi.MidiDevice,String toString(), Returns a string representation of the object.
android.media.midi.MidiDeviceInfo.PortInfo,String getName()," Returns the name of the port, or empty string if the port has no name"
android.media.midi.MidiDeviceInfo.PortInfo,int getPortNumber(), Returns the port number of the port
android.media.midi.MidiDeviceInfo.PortInfo,int getType(), Returns the port type of the port (either TYPE_INPUT or TYPE_OUTPUT)
android.media.midi.MidiDeviceInfo,int describeContents(), Describe the kinds of special objects contained in this Parcelable instance's marshaled representation.
android.media.midi.MidiDeviceInfo,boolean equals(Object o)," Indicates whether some other object is ""equal to"" this one."
android.media.midi.MidiDeviceInfo,int getId(), Returns the ID of the device.
android.media.midi.MidiDeviceInfo,int getInputPortCount(), Returns the device's number of input ports.
android.media.midi.MidiDeviceInfo,int getOutputPortCount(), Returns the device's number of output ports.
android.media.midi.MidiDeviceInfo,PortInfo[] getPorts(), Returns information about the device's ports.
android.media.midi.MidiDeviceInfo,Bundle getProperties(), Returns the Bundle containing the device's properties.
android.media.midi.MidiDeviceInfo,int getType(), Returns the type of the device.
android.media.midi.MidiDeviceInfo,int hashCode(), Returns a hash code value for the object.
android.media.midi.MidiDeviceInfo,boolean isPrivate(), Returns true if the device is private.
android.media.midi.MidiDeviceInfo,String toString(), Returns a string representation of the object.
android.media.midi.MidiDeviceInfo,"void writeToParcel(Parcel parcel, int flags)", Flatten this object in to a Parcel.
android.media.midi.MidiDeviceService,final MidiDeviceInfo getDeviceInfo(), returns the MidiDeviceInfo instance for this service
android.media.midi.MidiDeviceService,final MidiReceiver[] getOutputPortReceivers(), Returns an array of MidiReceiver for the device's output ports.
android.media.midi.MidiDeviceService,IBinder onBind(Intent intent), Return the communication channel to the service.
android.media.midi.MidiDeviceService,void onClose(), Called to notify when our device has been closed by all its clients
android.media.midi.MidiDeviceService,void onCreate(), Called by the system when the service is first created.
android.media.midi.MidiDeviceService,void onDeviceStatusChanged(MidiDeviceStatus status), Called to notify when an our MidiDeviceStatus has changed
android.media.midi.MidiDeviceService,abstract MidiReceiver[] onGetInputPortReceivers(), Returns an array of MidiReceiver for the device's input ports.
android.media.midi.MidiDeviceStatus,int describeContents(), Describe the kinds of special objects contained in this Parcelable instance's marshaled representation.
android.media.midi.MidiDeviceStatus,MidiDeviceInfo getDeviceInfo(), Returns the MidiDeviceInfo of the device.
android.media.midi.MidiDeviceStatus,int getOutputPortOpenCount(int portNumber), Returns the number of clients currently connected to the specified output port.
android.media.midi.MidiDeviceStatus,boolean isInputPortOpen(int portNumber), Returns true if an input port is open.
android.media.midi.MidiDeviceStatus,String toString(), Returns a string representation of the object.
android.media.midi.MidiDeviceStatus,"void writeToParcel(Parcel parcel, int flags)", Flatten this object in to a Parcel.
android.media.midi.MidiInputPort,void close(), Closes this stream and releases any system resources associated with it.
android.media.midi.MidiInputPort,int getPortNumber(), Returns the port number of this port
android.media.midi.MidiInputPort,void onFlush(), Called when the receiver is instructed to discard all pending MIDI data.
android.media.midi.MidiInputPort,"void onSend(byte[] msg, int offset, int count, long timestamp)", Called whenever the receiver is passed new MIDI data.
android.media.midi.MidiManager.DeviceCallback,void onDeviceAdded(MidiDeviceInfo device), Called to notify when a new MIDI device has been added
android.media.midi.MidiManager.DeviceCallback,void onDeviceRemoved(MidiDeviceInfo device), Called to notify when a MIDI device has been removed
android.media.midi.MidiManager.DeviceCallback,void onDeviceStatusChanged(MidiDeviceStatus status), Called to notify when the status of a MIDI device has changed
android.media.midi.MidiManager.OnDeviceOpenedListener,abstract void onDeviceOpened(MidiDevice device)," Called to respond to a openDevice(MidiDeviceInfo, MidiManager.OnDeviceOpenedListener, Handler) request"
android.media.midi.MidiManager,MidiDeviceInfo[] getDevices(), Gets the list of all connected MIDI devices.
android.media.midi.MidiManager,"void openBluetoothDevice(BluetoothDevice bluetoothDevice, MidiManager.OnDeviceOpenedListener listener, Handler handler)", Opens a Bluetooth MIDI device for reading and writing.
android.media.midi.MidiManager,"void openDevice(MidiDeviceInfo deviceInfo, MidiManager.OnDeviceOpenedListener listener, Handler handler)", Opens a MIDI device for reading and writing.
android.media.midi.MidiManager,"void registerDeviceCallback(MidiManager.DeviceCallback callback, Handler handler)", Registers a callback to receive notifications when MIDI devices are added and removed.
android.media.midi.MidiManager,void unregisterDeviceCallback(MidiManager.DeviceCallback callback), Unregisters a MidiManager.DeviceCallback.
android.media.midi.MidiOutputPort,void close(), Closes this stream and releases any system resources associated with it.
android.media.midi.MidiOutputPort,int getPortNumber(), Returns the port number of this port
android.media.midi.MidiOutputPort,void onConnect(MidiReceiver receiver), Called to connect a MidiReceiver to the sender
android.media.midi.MidiOutputPort,void onDisconnect(MidiReceiver receiver), Called to disconnect a MidiReceiver from the sender
android.media.midi.MidiReceiver,void flush(), Instructs the receiver to discard all pending MIDI data.
android.media.midi.MidiReceiver,final int getMaxMessageSize(), Returns the maximum size of a message this receiver can receive.
android.media.midi.MidiReceiver,void onFlush(), Called when the receiver is instructed to discard all pending MIDI data.
android.media.midi.MidiReceiver,"abstract void onSend(byte[] msg, int offset, int count, long timestamp)", Called whenever the receiver is passed new MIDI data.
android.media.midi.MidiReceiver,"void send(byte[] msg, int offset, int count)", Called to send MIDI data to the receiver without a timestamp.
android.media.midi.MidiReceiver,"void send(byte[] msg, int offset, int count, long timestamp)", Called to send MIDI data to the receiver with a specified timestamp.
android.media.midi.MidiSender,void connect(MidiReceiver receiver), Connects a MidiReceiver to the sender
android.media.midi.MidiSender,void disconnect(MidiReceiver receiver), Disconnects a MidiReceiver from the sender
android.media.midi.MidiSender,abstract void onConnect(MidiReceiver receiver), Called to connect a MidiReceiver to the sender
android.media.midi.MidiSender,abstract void onDisconnect(MidiReceiver receiver), Called to disconnect a MidiReceiver from the sender
android.media.NotProvisionedException,final void addSuppressed(Throwable exception), Appends the specified exception to the exceptions that were suppressed in order to deliver this exception.
android.media.NotProvisionedException,Throwable fillInStackTrace(), Fills in the execution stack trace.
android.media.NotProvisionedException,Throwable getCause(), Returns the cause of this throwable or null if the cause is nonexistent or unknown.
android.media.NotProvisionedException,String getLocalizedMessage(), Creates a localized description of this throwable.
android.media.NotProvisionedException,String getMessage(), Returns the detail message string of this throwable.
android.media.NotProvisionedException,StackTraceElement[] getStackTrace(), Provides programmatic access to the stack trace information printed by printStackTrace().
android.media.NotProvisionedException,final Throwable[] getSuppressed()," Returns an array containing all of the exceptions that were suppressed, typically by the try-with-resources statement, in order to deliver this exception."
android.media.NotProvisionedException,Throwable initCause(Throwable cause), Initializes the cause of this throwable to the specified value.
android.media.NotProvisionedException,void printStackTrace(), Prints this throwable and its backtrace to the standard error stream.
android.media.NotProvisionedException,void printStackTrace(PrintWriter s), Prints this throwable and its backtrace to the specified print writer.
android.media.NotProvisionedException,void printStackTrace(PrintStream s), Prints this throwable and its backtrace to the specified print stream.
android.media.NotProvisionedException,void setStackTrace(StackTraceElement[] stackTrace), Sets the stack trace elements that will be returned by getStackTrace() and printed by printStackTrace() and related methods.
android.media.NotProvisionedException,String toString(), Returns a short description of this throwable.
android.media.NotProvisionedException,Object clone(), Creates and returns a copy of this object.
android.media.NotProvisionedException,boolean equals(Object obj)," Indicates whether some other object is ""equal to"" this one."
android.media.NotProvisionedException,void finalize(), Called by the garbage collector on an object when garbage collection determines that there are no more references to the object.
android.media.NotProvisionedException,final Class<?> getClass(), Returns the runtime class of this Object.
android.media.NotProvisionedException,int hashCode(), Returns a hash code value for the object.
android.media.NotProvisionedException,final void notify(), Wakes up a single thread that is waiting on this object's monitor.
android.media.NotProvisionedException,final void notifyAll(), Wakes up all threads that are waiting on this object's monitor.
android.media.NotProvisionedException,String toString(), Returns a string representation of the object.
android.media.NotProvisionedException,"final void wait(long millis, int nanos)"," Causes the current thread to wait until another thread invokes the notify() method or the notifyAll() method for this object, or some other thread interrupts the current thread, or a certain amount of real time has elapsed."
android.media.NotProvisionedException,final void wait(long millis)," Causes the current thread to wait until either another thread invokes the notify() method or the notifyAll() method for this object, or a specified amount of time has elapsed."
android.media.NotProvisionedException,final void wait(), Causes the current thread to wait until another thread invokes the notify() method or the notifyAll() method for this object.
android.media.PlaybackParams,PlaybackParams allowDefaults(), Allows defaults to be returned for properties not set.
android.media.PlaybackParams,int describeContents(), Describe the kinds of special objects contained in this Parcelable instance's marshaled representation.
android.media.PlaybackParams,int getAudioFallbackMode(), Retrieves the audio fallback mode.
android.media.PlaybackParams,float getPitch(), Retrieves the pitch factor.
android.media.PlaybackParams,float getSpeed(), Retrieves the speed factor.
android.media.PlaybackParams,PlaybackParams setAudioFallbackMode(int audioFallbackMode), Sets the audio fallback mode.
android.media.PlaybackParams,PlaybackParams setPitch(float pitch), Sets the pitch factor.
android.media.PlaybackParams,PlaybackParams setSpeed(float speed), Sets the speed factor.
android.media.PlaybackParams,"void writeToParcel(Parcel dest, int flags)", Flatten this object in to a Parcel.
android.media.projection.MediaProjection.Callback,void onStop(), Called when the MediaProjection session is no longer valid.
android.media.projection.MediaProjection,"VirtualDisplay createVirtualDisplay(String name, int width, int height, int dpi, int flags, Surface surface, VirtualDisplay.Callback callback, Handler handler)", Creates a VirtualDisplay to capture the contents of the screen.
android.media.projection.MediaProjection,"void registerCallback(MediaProjection.Callback callback, Handler handler)", Register a listener to receive notifications about when the MediaProjection changes state.
android.media.projection.MediaProjection,void stop(), Stops projection.
android.media.projection.MediaProjection,void unregisterCallback(MediaProjection.Callback callback), Unregister a MediaProjection listener.
android.media.projection.MediaProjectionManager,Intent createScreenCaptureIntent(), Returns an Intent that must passed to startActivityForResult() in order to start screen capture.
android.media.projection.MediaProjectionManager,"MediaProjection getMediaProjection(int resultCode, Intent resultData)", Retrieve the MediaProjection obtained from a succesful screen capture request.
android.media.Rating,int describeContents(), Describe the kinds of special objects contained in this Parcelable instance's marshaled representation.
android.media.Rating,float getPercentRating(), Return the percentage-based rating value.
android.media.Rating,int getRatingStyle(), Return the rating style.
android.media.Rating,float getStarRating(), Return the star-based rating value.
android.media.Rating,boolean hasHeart()," Return whether the rating is ""heart selected""."
android.media.Rating,boolean isRated(), Return whether there is a rating value available.
android.media.Rating,boolean isThumbUp()," Return whether the rating is ""thumb up""."
android.media.Rating,static Rating newHeartRating(boolean hasHeart), Return a Rating instance with a heart-based rating.
android.media.Rating,static Rating newPercentageRating(float percent), Return a Rating instance with a percentage-based rating.
android.media.Rating,"static Rating newStarRating(int starRatingStyle, float starRating)", Return a Rating instance with a star-based rating.
android.media.Rating,static Rating newThumbRating(boolean thumbIsUp), Return a Rating instance with a thumb-based rating.
android.media.Rating,static Rating newUnratedRating(int ratingStyle), Return a Rating instance with no rating.
android.media.Rating,String toString(), Returns a string representation of the object.
android.media.Rating,"void writeToParcel(Parcel dest, int flags)", Flatten this object in to a Parcel.
android.media.RemoteControlClient.MetadataEditor,void apply()," Associates all the metadata that has been set since the MetadataEditor instance was created with editMetadata(boolean), or since clear() was called, with the RemoteControlClient."
android.media.RemoteControlClient.MetadataEditor,void clear(), Clears all the metadata that has been set since the MetadataEditor instance was created (with editMetadata(boolean)).
android.media.RemoteControlClient.MetadataEditor,"RemoteControlClient.MetadataEditor putBitmap(int key, Bitmap bitmap)", Sets the album / artwork picture to be displayed on the remote control.
android.media.RemoteControlClient.MetadataEditor,"RemoteControlClient.MetadataEditor putLong(int key, long value)", Adds numerical information to be displayed.
android.media.RemoteControlClient.MetadataEditor,"RemoteControlClient.MetadataEditor putObject(int key, Object object)", Adds information stored as an instance.
android.media.RemoteControlClient.MetadataEditor,"RemoteControlClient.MetadataEditor putString(int key, String value)", Adds textual information to be displayed.
android.media.RemoteControlClient.OnGetPlaybackPositionListener,abstract long onGetPlaybackPosition(), Called on the implementer of the interface to query the current playback position.
android.media.RemoteControlClient.OnMetadataUpdateListener,"abstract void onMetadataUpdate(int key, Object newValue)", Called on the implementer to notify that the metadata field for the given key has been updated to the new value.
android.media.RemoteControlClient.OnPlaybackPositionUpdateListener,abstract void onPlaybackPositionUpdate(long newPositionMs), Called on the implementer to notify it that the playback head should be set at the given position.
android.media.RemoteControlClient,RemoteControlClient.MetadataEditor editMetadata(boolean startEmpty), Creates a RemoteControlClient.MetadataEditor.
android.media.RemoteControlClient,MediaSession getMediaSession(), Get a MediaSession associated with this RCC.
android.media.RemoteControlClient,void setMetadataUpdateListener(RemoteControlClient.OnMetadataUpdateListener l), Sets the listener to be called whenever the metadata is updated.
android.media.RemoteControlClient,void setOnGetPlaybackPositionListener(RemoteControlClient.OnGetPlaybackPositionListener l), Sets the listener to be called whenever the media current playback position is needed.
android.media.RemoteControlClient,void setPlaybackPositionUpdateListener(RemoteControlClient.OnPlaybackPositionUpdateListener l), Sets the listener to be called whenever the media playback position is requested to be updated.
android.media.RemoteControlClient,"void setPlaybackState(int state, long timeInMs, float playbackSpeed)", Sets the current playback state and the matching media position for the current playback speed.
android.media.RemoteControlClient,void setPlaybackState(int state), Sets the current playback state.
android.media.RemoteControlClient,void setTransportControlFlags(int transportControlFlags), Sets the flags for the media transport control buttons that this client supports.
android.media.RemoteController.MetadataEditor,void apply(), Applies all of the metadata changes that have been set since the MediaMetadataEditor instance was created with editMetadata() or since clear() was called.
android.media.RemoteController.OnClientUpdateListener,abstract void onClientChange(boolean clearing)," Called whenever all information, previously received through the other methods of the listener, is no longer valid and is about to be refreshed."
android.media.RemoteController.OnClientUpdateListener,abstract void onClientMetadataUpdate(RemoteController.MetadataEditor metadataEditor), Called whenever new metadata is available.
android.media.RemoteController.OnClientUpdateListener,"abstract void onClientPlaybackStateUpdate(int state, long stateChangeTimeMs, long currentPosMs, float speed)"," Called whenever the playback state has changed, and playback position and speed are known."
android.media.RemoteController.OnClientUpdateListener,abstract void onClientPlaybackStateUpdate(int state), Called whenever the playback state has changed.
android.media.RemoteController.OnClientUpdateListener,abstract void onClientTransportControlUpdate(int transportControlFlags), Called whenever the transport control flags have changed.
android.media.RemoteController,boolean clearArtworkConfiguration(), Prevents this RemoteController from receiving artwork images.
android.media.RemoteController,RemoteController.MetadataEditor editMetadata(), Creates a RemoteController.MetadataEditor for updating metadata values of the editable keys of the current RemoteControlClient.
android.media.RemoteController,long getEstimatedMediaPosition(), Return the estimated playback position of the current media track or a negative value if not available.
android.media.RemoteController,boolean seekTo(long timeMs), Sets the new playback position.
android.media.RemoteController,boolean sendMediaKeyEvent(KeyEvent keyEvent), Send a simulated key event for a media button to be received by the current client.
android.media.RemoteController,"boolean setArtworkConfiguration(int width, int height)", Set the maximum artwork image dimensions to be received in the metadata.
android.media.RemoteController,boolean setSynchronizationMode(int sync), Set the playback position synchronization mode.
android.media.ResourceBusyException,final void addSuppressed(Throwable exception), Appends the specified exception to the exceptions that were suppressed in order to deliver this exception.
android.media.ResourceBusyException,Throwable fillInStackTrace(), Fills in the execution stack trace.
android.media.ResourceBusyException,Throwable getCause(), Returns the cause of this throwable or null if the cause is nonexistent or unknown.
android.media.ResourceBusyException,String getLocalizedMessage(), Creates a localized description of this throwable.
android.media.ResourceBusyException,String getMessage(), Returns the detail message string of this throwable.
android.media.ResourceBusyException,StackTraceElement[] getStackTrace(), Provides programmatic access to the stack trace information printed by printStackTrace().
android.media.ResourceBusyException,final Throwable[] getSuppressed()," Returns an array containing all of the exceptions that were suppressed, typically by the try-with-resources statement, in order to deliver this exception."
android.media.ResourceBusyException,Throwable initCause(Throwable cause), Initializes the cause of this throwable to the specified value.
android.media.ResourceBusyException,void printStackTrace(), Prints this throwable and its backtrace to the standard error stream.
android.media.ResourceBusyException,void printStackTrace(PrintWriter s), Prints this throwable and its backtrace to the specified print writer.
android.media.ResourceBusyException,void printStackTrace(PrintStream s), Prints this throwable and its backtrace to the specified print stream.
android.media.ResourceBusyException,void setStackTrace(StackTraceElement[] stackTrace), Sets the stack trace elements that will be returned by getStackTrace() and printed by printStackTrace() and related methods.
android.media.ResourceBusyException,String toString(), Returns a short description of this throwable.
android.media.ResourceBusyException,Object clone(), Creates and returns a copy of this object.
android.media.ResourceBusyException,boolean equals(Object obj)," Indicates whether some other object is ""equal to"" this one."
android.media.ResourceBusyException,void finalize(), Called by the garbage collector on an object when garbage collection determines that there are no more references to the object.
android.media.ResourceBusyException,final Class<?> getClass(), Returns the runtime class of this Object.
android.media.ResourceBusyException,int hashCode(), Returns a hash code value for the object.
android.media.ResourceBusyException,final void notify(), Wakes up a single thread that is waiting on this object's monitor.
android.media.ResourceBusyException,final void notifyAll(), Wakes up all threads that are waiting on this object's monitor.
android.media.ResourceBusyException,String toString(), Returns a string representation of the object.
android.media.ResourceBusyException,"final void wait(long millis, int nanos)"," Causes the current thread to wait until another thread invokes the notify() method or the notifyAll() method for this object, or some other thread interrupts the current thread, or a certain amount of real time has elapsed."
android.media.ResourceBusyException,final void wait(long millis)," Causes the current thread to wait until either another thread invokes the notify() method or the notifyAll() method for this object, or a specified amount of time has elapsed."
android.media.ResourceBusyException,final void wait(), Causes the current thread to wait until another thread invokes the notify() method or the notifyAll() method for this object.
android.media.Ringtone,AudioAttributes getAudioAttributes(), Returns the AudioAttributes used by this object.
android.media.Ringtone,int getStreamType()," This method was deprecated in API level 21. use of stream types is deprecated, see setAudioAttributes(AudioAttributes)"
android.media.Ringtone,String getTitle(Context context), Returns a human-presentable title for ringtone.
android.media.Ringtone,boolean isPlaying(), Whether this ringtone is currently playing.
android.media.Ringtone,void play(), Plays the ringtone.
android.media.Ringtone,void setAudioAttributes(AudioAttributes attributes), Sets the AudioAttributes for this ringtone.
android.media.Ringtone,void setStreamType(int streamType), This method was deprecated in API level 21. use setAudioAttributes(AudioAttributes)
android.media.Ringtone,void stop(), Stops a playing ringtone.
android.media.RingtoneManager,"static Uri getActualDefaultRingtoneUri(Context context, int type)", Gets the current default sound's Uri.
android.media.RingtoneManager,Cursor getCursor(), Returns a Cursor of all the ringtones available.
android.media.RingtoneManager,static int getDefaultType(Uri defaultRingtoneUri), Returns the type of a default Uri.
android.media.RingtoneManager,static Uri getDefaultUri(int type), Returns the Uri for the default ringtone of a particular type.
android.media.RingtoneManager,boolean getIncludeDrm(), This method was deprecated in API level 19. DRM ringtones are no longer supported
android.media.RingtoneManager,"static Ringtone getRingtone(Context context, Uri ringtoneUri)", Returns a Ringtone for a given sound URI.
android.media.RingtoneManager,Ringtone getRingtone(int position), Gets a Ringtone for the ringtone at the given position in the Cursor.
android.media.RingtoneManager,int getRingtonePosition(Uri ringtoneUri), Gets the position of a Uri within this RingtoneManager.
android.media.RingtoneManager,Uri getRingtoneUri(int position), Gets a Uri for the ringtone at the given position in the Cursor.
android.media.RingtoneManager,boolean getStopPreviousRingtone(),
android.media.RingtoneManager,static Uri getValidRingtoneUri(Context context), Returns a valid ringtone URI.
android.media.RingtoneManager,int inferStreamType(), Infers the volume stream type based on what type of ringtones this manager is returning.
android.media.RingtoneManager,static boolean isDefault(Uri ringtoneUri), Returns whether the given Uri is one of the default ringtones.
android.media.RingtoneManager,"static void setActualDefaultRingtoneUri(Context context, int type, Uri ringtoneUri)", Sets the Uri of the default sound for a given sound type.
android.media.RingtoneManager,void setIncludeDrm(boolean includeDrm), This method was deprecated in API level 19. DRM ringtones are no longer supported
android.media.RingtoneManager,void setStopPreviousRingtone(boolean stopPreviousRingtone), Whether retrieving another Ringtone will stop playing the previously retrieved Ringtone.
android.media.RingtoneManager,void setType(int type), Sets which type(s) of ringtones will be listed by this.
android.media.RingtoneManager,void stopPreviousRingtone(), Stops playing the last Ringtone retrieved from this.
android.media.session.MediaController.Callback,void onAudioInfoChanged(MediaController.PlaybackInfo info), Override to handle changes to the audio info.
android.media.session.MediaController.Callback,void onExtrasChanged(Bundle extras), Override to handle changes to the MediaSession extras.
android.media.session.MediaController.Callback,void onMetadataChanged(MediaMetadata metadata), Override to handle changes to the current metadata.
android.media.session.MediaController.Callback,void onPlaybackStateChanged(PlaybackState state), Override to handle changes in playback state.
android.media.session.MediaController.Callback,void onQueueChanged(List<MediaSession.QueueItem> queue), Override to handle changes to items in the queue.
android.media.session.MediaController.Callback,void onQueueTitleChanged(CharSequence title), Override to handle changes to the queue title.
android.media.session.MediaController.Callback,void onSessionDestroyed(), Override to handle the session being destroyed.
android.media.session.MediaController.Callback,"void onSessionEvent(String event, Bundle extras)", Override to handle custom events sent by the session owner without a specified interface.
android.media.session.MediaController.PlaybackInfo,AudioAttributes getAudioAttributes(), Get the audio attributes for this session.
android.media.session.MediaController.PlaybackInfo,int getCurrentVolume(), Get the current volume for this session.
android.media.session.MediaController.PlaybackInfo,int getMaxVolume(), Get the maximum volume that may be set for this session.
android.media.session.MediaController.PlaybackInfo,int getPlaybackType(), Get the type of playback which affects volume handling.
android.media.session.MediaController.PlaybackInfo,int getVolumeControl(), Get the type of volume control that can be used.
android.media.session.MediaController.TransportControls,void fastForward(), Start fast forwarding.
android.media.session.MediaController.TransportControls,void pause(), Request that the player pause its playback and stay at its current position.
android.media.session.MediaController.TransportControls,void play(), Request that the player start its playback at its current position.
android.media.session.MediaController.TransportControls,"void playFromMediaId(String mediaId, Bundle extras)", Request that the player start playback for a specific media id.
android.media.session.MediaController.TransportControls,"void playFromSearch(String query, Bundle extras)", Request that the player start playback for a specific search query.
android.media.session.MediaController.TransportControls,"void playFromUri(Uri uri, Bundle extras)", Request that the player start playback for a specific Uri.
android.media.session.MediaController.TransportControls,void prepare(), Request that the player prepare its playback.
android.media.session.MediaController.TransportControls,"void prepareFromMediaId(String mediaId, Bundle extras)", Request that the player prepare playback for a specific media id.
android.media.session.MediaController.TransportControls,"void prepareFromSearch(String query, Bundle extras)", Request that the player prepare playback for a specific search query.
android.media.session.MediaController.TransportControls,"void prepareFromUri(Uri uri, Bundle extras)", Request that the player prepare playback for a specific Uri.
android.media.session.MediaController.TransportControls,void rewind(), Start rewinding.
android.media.session.MediaController.TransportControls,void seekTo(long pos), Move to a new location in the media stream.
android.media.session.MediaController.TransportControls,"void sendCustomAction(PlaybackState.CustomAction customAction, Bundle args)", Send a custom action back for the MediaSession to perform.
android.media.session.MediaController.TransportControls,"void sendCustomAction(String action, Bundle args)", Send the id and args from a custom action back for the MediaSession to perform.
android.media.session.MediaController.TransportControls,void setRating(Rating rating), Rate the current content.
android.media.session.MediaController.TransportControls,void skipToNext(), Skip to the next item.
android.media.session.MediaController.TransportControls,void skipToPrevious(), Skip to the previous item.
android.media.session.MediaController.TransportControls,void skipToQueueItem(long id), Play an item with a specific id in the play queue.
android.media.session.MediaController.TransportControls,void stop(), Request that the player stop its playback; it may clear its state in whatever way is appropriate.
android.media.session.MediaController,"void adjustVolume(int direction, int flags)", Adjust the volume of the output this session is playing on.
android.media.session.MediaController,boolean dispatchMediaButtonEvent(KeyEvent keyEvent), Send the specified media button event to the session.
android.media.session.MediaController,Bundle getExtras(), Get the extras for this session.
android.media.session.MediaController,long getFlags(), Get the flags for this session.
android.media.session.MediaController,MediaMetadata getMetadata(), Get the current metadata for this session.
android.media.session.MediaController,String getPackageName(), Get the session owner's package name.
android.media.session.MediaController,MediaController.PlaybackInfo getPlaybackInfo(), Get the current playback info for this session.
android.media.session.MediaController,PlaybackState getPlaybackState(), Get the current playback state for this session.
android.media.session.MediaController,List<MediaSession.QueueItem> getQueue(), Get the current play queue for this session if one is set.
android.media.session.MediaController,CharSequence getQueueTitle(), Get the queue title for this session.
android.media.session.MediaController,int getRatingType(), Get the rating type supported by the session.
android.media.session.MediaController,PendingIntent getSessionActivity(), Get an intent for launching UI associated with this session if one exists.
android.media.session.MediaController,MediaSession.Token getSessionToken(), Get the token for the session this is connected to.
android.media.session.MediaController,MediaController.TransportControls getTransportControls(), Get a MediaController.TransportControls instance to send transport actions to the associated session.
android.media.session.MediaController,"void registerCallback(MediaController.Callback callback, Handler handler)", Registers a callback to receive updates from the session.
android.media.session.MediaController,void registerCallback(MediaController.Callback callback), Registers a callback to receive updates from the Session.
android.media.session.MediaController,"void sendCommand(String command, Bundle args, ResultReceiver cb)", Sends a generic command to the session.
android.media.session.MediaController,"void setVolumeTo(int value, int flags)", Set the volume of the output this session is playing on.
android.media.session.MediaController,void unregisterCallback(MediaController.Callback callback), Unregisters the specified callback.
android.media.session.MediaSession.Callback,"void onCommand(String command, Bundle args, ResultReceiver cb)", Called when a controller has sent a command to this session.
android.media.session.MediaSession.Callback,"void onCustomAction(String action, Bundle extras)", Called when a MediaController wants a PlaybackState.CustomAction to be performed.
android.media.session.MediaSession.Callback,void onFastForward(), Override to handle requests to fast forward.
android.media.session.MediaSession.Callback,boolean onMediaButtonEvent(Intent mediaButtonIntent), Called when a media button is pressed and this session has the highest priority or a controller sends a media button event to the session.
android.media.session.MediaSession.Callback,void onPause(), Override to handle requests to pause playback.
android.media.session.MediaSession.Callback,void onPlay(), Override to handle requests to begin playback.
android.media.session.MediaSession.Callback,"void onPlayFromMediaId(String mediaId, Bundle extras)", Override to handle requests to play a specific mediaId that was provided by your app's MediaBrowserService.
android.media.session.MediaSession.Callback,"void onPlayFromSearch(String query, Bundle extras)", Override to handle requests to begin playback from a search query.
android.media.session.MediaSession.Callback,"void onPlayFromUri(Uri uri, Bundle extras)", Override to handle requests to play a specific media item represented by a URI.
android.media.session.MediaSession.Callback,void onPrepare(), Override to handle requests to prepare playback.
android.media.session.MediaSession.Callback,"void onPrepareFromMediaId(String mediaId, Bundle extras)", Override to handle requests to prepare for playing a specific mediaId that was provided by your app's MediaBrowserService.
android.media.session.MediaSession.Callback,"void onPrepareFromSearch(String query, Bundle extras)", Override to handle requests to prepare playback from a search query.
android.media.session.MediaSession.Callback,"void onPrepareFromUri(Uri uri, Bundle extras)", Override to handle requests to prepare a specific media item represented by a URI.
android.media.session.MediaSession.Callback,void onRewind(), Override to handle requests to rewind.
android.media.session.MediaSession.Callback,void onSeekTo(long pos), Override to handle requests to seek to a specific position in ms.
android.media.session.MediaSession.Callback,void onSetRating(Rating rating), Override to handle the item being rated.
android.media.session.MediaSession.Callback,void onSkipToNext(), Override to handle requests to skip to the next media item.
android.media.session.MediaSession.Callback,void onSkipToPrevious(), Override to handle requests to skip to the previous media item.
android.media.session.MediaSession.Callback,void onSkipToQueueItem(long id), Override to handle requests to play an item with a given id from the play queue.
android.media.session.MediaSession.Callback,void onStop(), Override to handle requests to stop playback.
android.media.session.MediaSession.QueueItem,int describeContents(), Describe the kinds of special objects contained in this Parcelable instance's marshaled representation.
android.media.session.MediaSession.QueueItem,boolean equals(Object o)," Indicates whether some other object is ""equal to"" this one."
android.media.session.MediaSession.QueueItem,MediaDescription getDescription(), Get the description for this item.
android.media.session.MediaSession.QueueItem,long getQueueId(), Get the queue id for this item.
android.media.session.MediaSession.QueueItem,String toString(), Returns a string representation of the object.
android.media.session.MediaSession.QueueItem,"void writeToParcel(Parcel dest, int flags)", Flatten this object in to a Parcel.
android.media.session.MediaSession.Token,int describeContents(), Describe the kinds of special objects contained in this Parcelable instance's marshaled representation.
android.media.session.MediaSession.Token,boolean equals(Object obj)," Indicates whether some other object is ""equal to"" this one."
android.media.session.MediaSession.Token,int hashCode(), Returns a hash code value for the object.
android.media.session.MediaSession.Token,"void writeToParcel(Parcel dest, int flags)", Flatten this object in to a Parcel.
android.media.session.MediaSession,MediaController getController(), Get a controller for this session.
android.media.session.MediaSession,MediaSession.Token getSessionToken(), Retrieve a token object that can be used by apps to create a MediaController for interacting with this session.
android.media.session.MediaSession,boolean isActive(), Get the current active state of this session.
android.media.session.MediaSession,void release(), This must be called when an app has finished performing playback.
android.media.session.MediaSession,"void sendSessionEvent(String event, Bundle extras)", Send a proprietary event to all MediaControllers listening to this Session.
android.media.session.MediaSession,void setActive(boolean active), Set if this session is currently active and ready to receive commands.
android.media.session.MediaSession,void setCallback(MediaSession.Callback callback), Set the callback to receive updates for the MediaSession.
android.media.session.MediaSession,"void setCallback(MediaSession.Callback callback, Handler handler)", Set the callback to receive updates for the MediaSession.
android.media.session.MediaSession,void setExtras(Bundle extras), Set some extras that can be associated with the MediaSession.
android.media.session.MediaSession,void setFlags(int flags), Set any flags for the session.
android.media.session.MediaSession,void setMediaButtonReceiver(PendingIntent mbr), Set a pending intent for your media button receiver to allow restarting playback after the session has been stopped.
android.media.session.MediaSession,void setMetadata(MediaMetadata metadata), Update the current metadata.
android.media.session.MediaSession,void setPlaybackState(PlaybackState state), Update the current playback state.
android.media.session.MediaSession,void setPlaybackToLocal(AudioAttributes attributes), Set the attributes for this session's audio.
android.media.session.MediaSession,void setPlaybackToRemote(VolumeProvider volumeProvider), Configure this session to use remote volume handling.
android.media.session.MediaSession,void setQueue(List<MediaSession.QueueItem> queue), Update the list of items in the play queue.
android.media.session.MediaSession,void setQueueTitle(CharSequence title), Set the title of the play queue.
android.media.session.MediaSession,void setRatingType(int type), Set the style of rating used by this session.
android.media.session.MediaSession,void setSessionActivity(PendingIntent pi), Set an intent for launching UI for this Session.
android.media.session.MediaSessionManager.OnActiveSessionsChangedListener,abstract void onActiveSessionsChanged(List<MediaController> controllers),
android.media.session.MediaSessionManager,"void addOnActiveSessionsChangedListener(MediaSessionManager.OnActiveSessionsChangedListener sessionListener, ComponentName notificationListener)", Add a listener to be notified when the list of active sessions changes.This requires the android.Manifest.permission.MEDIA_CONTENT_CONTROL permission be held by the calling app.
android.media.session.MediaSessionManager,"void addOnActiveSessionsChangedListener(MediaSessionManager.OnActiveSessionsChangedListener sessionListener, ComponentName notificationListener, Handler handler)", Add a listener to be notified when the list of active sessions changes.This requires the android.Manifest.permission.MEDIA_CONTENT_CONTROL permission be held by the calling app.
android.media.session.MediaSessionManager,List<MediaController> getActiveSessions(ComponentName notificationListener), Get a list of controllers for all ongoing sessions.
android.media.session.MediaSessionManager,void removeOnActiveSessionsChangedListener(MediaSessionManager.OnActiveSessionsChangedListener listener), Stop receiving active sessions updates on the specified listener.
android.media.session.PlaybackState.Builder,"PlaybackState.Builder addCustomAction(String action, String name, int icon)", Add a custom action to the playback state.
android.media.session.PlaybackState.Builder,PlaybackState.Builder addCustomAction(PlaybackState.CustomAction customAction), Add a custom action to the playback state.
android.media.session.PlaybackState.Builder,PlaybackState build(), Build and return the PlaybackState instance with these values.
android.media.session.PlaybackState.Builder,PlaybackState.Builder setActions(long actions), Set the current actions available on this session.
android.media.session.PlaybackState.Builder,PlaybackState.Builder setActiveQueueItemId(long id), Set the active item in the play queue by specifying its id.
android.media.session.PlaybackState.Builder,PlaybackState.Builder setBufferedPosition(long bufferedPosition), Set the current buffered position in ms.
android.media.session.PlaybackState.Builder,PlaybackState.Builder setErrorMessage(CharSequence error), Set a user readable error message.
android.media.session.PlaybackState.Builder,PlaybackState.Builder setExtras(Bundle extras), Set any custom extras to be included with the playback state.
android.media.session.PlaybackState.Builder,"PlaybackState.Builder setState(int state, long position, float playbackSpeed)", Set the current state of playback.
android.media.session.PlaybackState.Builder,"PlaybackState.Builder setState(int state, long position, float playbackSpeed, long updateTime)", Set the current state of playback.
android.media.session.PlaybackState.CustomAction.Builder,PlaybackState.CustomAction build(), Build and return the PlaybackState.CustomAction instance with the specified values.
android.media.session.PlaybackState.CustomAction.Builder,PlaybackState.CustomAction.Builder setExtras(Bundle extras), Set optional extras for the PlaybackState.CustomAction.
android.media.session.PlaybackState.CustomAction,int describeContents(), Describe the kinds of special objects contained in this Parcelable instance's marshaled representation.
android.media.session.PlaybackState.CustomAction,String getAction(), Returns the action of the PlaybackState.CustomAction.
android.media.session.PlaybackState.CustomAction,Bundle getExtras()," Returns extras which provide additional application-specific information about the action, or null if none."
android.media.session.PlaybackState.CustomAction,int getIcon(), Returns the resource id of the icon in the MediaSession's package.
android.media.session.PlaybackState.CustomAction,CharSequence getName(), Returns the display name of this action.
android.media.session.PlaybackState.CustomAction,String toString(), Returns a string representation of the object.
android.media.session.PlaybackState.CustomAction,"void writeToParcel(Parcel dest, int flags)", Flatten this object in to a Parcel.
android.media.session.PlaybackState,int describeContents(), Describe the kinds of special objects contained in this Parcelable instance's marshaled representation.
android.media.session.PlaybackState,long getActions(), Get the current actions available on this session.
android.media.session.PlaybackState,long getActiveQueueItemId(), Get the id of the currently active item in the queue.
android.media.session.PlaybackState,long getBufferedPosition(), Get the current buffered position in ms.
android.media.session.PlaybackState,List<PlaybackState.CustomAction> getCustomActions(), Get the list of custom actions.
android.media.session.PlaybackState,CharSequence getErrorMessage(), Get a user readable error message.
android.media.session.PlaybackState,Bundle getExtras(), Get any custom extras that were set on this playback state.
android.media.session.PlaybackState,long getLastPositionUpdateTime(), Get the elapsed real time at which position was last updated.
android.media.session.PlaybackState,float getPlaybackSpeed(), Get the current playback speed as a multiple of normal playback.
android.media.session.PlaybackState,long getPosition(), Get the current playback position in ms.
android.media.session.PlaybackState,int getState(), Get the current state of playback.
android.media.session.PlaybackState,String toString(), Returns a string representation of the object.
android.media.session.PlaybackState,"void writeToParcel(Parcel dest, int flags)", Flatten this object in to a Parcel.
android.media.SoundPool.Builder,SoundPool build(),
android.media.SoundPool.Builder,SoundPool.Builder setAudioAttributes(AudioAttributes attributes), Sets the AudioAttributes.
android.media.SoundPool.Builder,SoundPool.Builder setMaxStreams(int maxStreams), Sets the maximum of number of simultaneous streams that can be played simultaneously.
android.media.SoundPool.OnLoadCompleteListener,"abstract void onLoadComplete(SoundPool soundPool, int sampleId, int status)", Called when a sound has completed loading.
android.media.SoundPool,final void autoPause(), Pause all active streams.
android.media.SoundPool,final void autoResume(), Resume all previously active streams.
android.media.SoundPool,"int load(Context context, int resId, int priority)", Load the sound from the specified APK resource.
android.media.SoundPool,"int load(String path, int priority)", Load the sound from the specified path.
android.media.SoundPool,"int load(AssetFileDescriptor afd, int priority)", Load the sound from an asset file descriptor.
android.media.SoundPool,"int load(FileDescriptor fd, long offset, long length, int priority)", Load the sound from a FileDescriptor.
android.media.SoundPool,final void pause(int streamID), Pause a playback stream.
android.media.SoundPool,"final int play(int soundID, float leftVolume, float rightVolume, int priority, int loop, float rate)", Play a sound from a sound ID.
android.media.SoundPool,final void release(), Release the SoundPool resources.
android.media.SoundPool,final void resume(int streamID), Resume a playback stream.
android.media.SoundPool,"final void setLoop(int streamID, int loop)", Set loop mode.
android.media.SoundPool,void setOnLoadCompleteListener(SoundPool.OnLoadCompleteListener listener), Sets the callback hook for the OnLoadCompleteListener.
android.media.SoundPool,"final void setPriority(int streamID, int priority)", Change stream priority.
android.media.SoundPool,"final void setRate(int streamID, float rate)", Change playback rate.
android.media.SoundPool,"final void setVolume(int streamID, float leftVolume, float rightVolume)", Set stream volume.
android.media.SoundPool,final void stop(int streamID), Stop a playback stream.
android.media.SoundPool,final boolean unload(int soundID), Unload a sound from a sound ID.
android.media.SyncParams,SyncParams allowDefaults(), Allows defaults to be returned for properties not set.
android.media.SyncParams,int getAudioAdjustMode(), Retrieves the audio adjust mode.
android.media.SyncParams,float getFrameRate(), Retrieves the video frame rate hint.
android.media.SyncParams,int getSyncSource(), Retrieves the sync source.
android.media.SyncParams,float getTolerance(), Retrieves the tolerance factor.
android.media.SyncParams,SyncParams setAudioAdjustMode(int audioAdjustMode), Sets the audio adjust mode.
android.media.SyncParams,SyncParams setFrameRate(float frameRate), Sets the video frame rate hint to be used.
android.media.SyncParams,SyncParams setSyncSource(int syncSource), Sets the sync source.
android.media.SyncParams,SyncParams setTolerance(float tolerance), Sets the tolerance.
android.media.ThumbnailUtils,"static Bitmap createVideoThumbnail(String filePath, int kind)", Create a video thumbnail for a video.
android.media.ThumbnailUtils,"static Bitmap extractThumbnail(Bitmap source, int width, int height, int options)", Creates a centered bitmap of the desired size.
android.media.ThumbnailUtils,"static Bitmap extractThumbnail(Bitmap source, int width, int height)", Creates a centered bitmap of the desired size.
android.media.TimedMetaData,byte[] getMetaData(),
android.media.TimedMetaData,long getTimestamp(),
android.media.TimedText,Rect getBounds(), Get the rectangle area or region for rendering the timed text as specified by a Rect object.
android.media.TimedText,String getText(), Get the characters in the timed text.
android.media.ToneGenerator,final int getAudioSessionId(), Returns the audio session ID.
android.media.ToneGenerator,void release(), Releases resources associated with this ToneGenerator object.
android.media.ToneGenerator,"boolean startTone(int toneType, int durationMs)", This method starts the playback of a tone of the specified type for the specified duration.
android.media.ToneGenerator,boolean startTone(int toneType), This method starts the playback of a tone of the specified type.
android.media.ToneGenerator,void stopTone(), This method stops the tone currently playing playback.
android.media.tv.TvContentRating,boolean contains(TvContentRating rating), Returns true if this rating has the same main rating as the specified rating and when this rating's sub-ratings contain the other's.
android.media.tv.TvContentRating,"static TvContentRating createRating(String domain, String ratingSystem, String rating, String... subRatings)", Creates a TvContentRating object with predefined content rating strings.
android.media.tv.TvContentRating,boolean equals(Object obj)," Indicates whether some other object is ""equal to"" this one."
android.media.tv.TvContentRating,String flattenToString(), Returns a string that unambiguously describes the rating information contained in a TvContentRating object.
android.media.tv.TvContentRating,String getDomain(), Returns the domain of this TvContentRating object.
android.media.tv.TvContentRating,String getMainRating(), Returns the main rating of this TvContentRating object.
android.media.tv.TvContentRating,String getRatingSystem(), Returns the rating system of this TvContentRating object.
android.media.tv.TvContentRating,List<String> getSubRatings(), Returns the unmodifiable sub-rating string List of this TvContentRating object.
android.media.tv.TvContentRating,int hashCode(), Returns a hash code value for the object.
android.media.tv.TvContentRating,static TvContentRating unflattenFromString(String ratingString), Recovers a TvContentRating object from the string that was previously created from flattenToString().
android.media.tv.TvContract.Channels.Logo,Object clone(), Creates and returns a copy of this object.
android.media.tv.TvContract.Channels.Logo,boolean equals(Object obj)," Indicates whether some other object is ""equal to"" this one."
android.media.tv.TvContract.Channels.Logo,void finalize(), Called by the garbage collector on an object when garbage collection determines that there are no more references to the object.
android.media.tv.TvContract.Channels.Logo,final Class<?> getClass(), Returns the runtime class of this Object.
android.media.tv.TvContract.Channels.Logo,int hashCode(), Returns a hash code value for the object.
android.media.tv.TvContract.Channels.Logo,final void notify(), Wakes up a single thread that is waiting on this object's monitor.
android.media.tv.TvContract.Channels.Logo,final void notifyAll(), Wakes up all threads that are waiting on this object's monitor.
android.media.tv.TvContract.Channels.Logo,String toString(), Returns a string representation of the object.
android.media.tv.TvContract.Channels.Logo,"final void wait(long millis, int nanos)"," Causes the current thread to wait until another thread invokes the notify() method or the notifyAll() method for this object, or some other thread interrupts the current thread, or a certain amount of real time has elapsed."
android.media.tv.TvContract.Channels.Logo,final void wait(long millis)," Causes the current thread to wait until either another thread invokes the notify() method or the notifyAll() method for this object, or a specified amount of time has elapsed."
android.media.tv.TvContract.Channels.Logo,final void wait(), Causes the current thread to wait until another thread invokes the notify() method or the notifyAll() method for this object.
android.media.tv.TvContract.Channels,static String getVideoResolution(String videoFormat), Returns the video resolution (definition) for a given video format.
android.media.tv.TvContract.PreviewPrograms,Object clone(), Creates and returns a copy of this object.
android.media.tv.TvContract.PreviewPrograms,boolean equals(Object obj)," Indicates whether some other object is ""equal to"" this one."
android.media.tv.TvContract.PreviewPrograms,void finalize(), Called by the garbage collector on an object when garbage collection determines that there are no more references to the object.
android.media.tv.TvContract.PreviewPrograms,final Class<?> getClass(), Returns the runtime class of this Object.
android.media.tv.TvContract.PreviewPrograms,int hashCode(), Returns a hash code value for the object.
android.media.tv.TvContract.PreviewPrograms,final void notify(), Wakes up a single thread that is waiting on this object's monitor.
android.media.tv.TvContract.PreviewPrograms,final void notifyAll(), Wakes up all threads that are waiting on this object's monitor.
android.media.tv.TvContract.PreviewPrograms,String toString(), Returns a string representation of the object.
android.media.tv.TvContract.PreviewPrograms,"final void wait(long millis, int nanos)"," Causes the current thread to wait until another thread invokes the notify() method or the notifyAll() method for this object, or some other thread interrupts the current thread, or a certain amount of real time has elapsed."
android.media.tv.TvContract.PreviewPrograms,final void wait(long millis)," Causes the current thread to wait until either another thread invokes the notify() method or the notifyAll() method for this object, or a specified amount of time has elapsed."
android.media.tv.TvContract.PreviewPrograms,final void wait(), Causes the current thread to wait until another thread invokes the notify() method or the notifyAll() method for this object.
android.media.tv.TvContract.Programs.Genres,static String[] decode(String genres), Decodes the genre strings from the text stored in the database.
android.media.tv.TvContract.Programs.Genres,static String encode(String... genres), Encodes genre strings to a text that can be put into the database.
android.media.tv.TvContract.Programs.Genres,static boolean isCanonical(String genre), Returns whether a given text is a canonical genre defined in TvContract.Programs.Genres.
android.media.tv.TvContract.Programs,Object clone(), Creates and returns a copy of this object.
android.media.tv.TvContract.Programs,boolean equals(Object obj)," Indicates whether some other object is ""equal to"" this one."
android.media.tv.TvContract.Programs,void finalize(), Called by the garbage collector on an object when garbage collection determines that there are no more references to the object.
android.media.tv.TvContract.Programs,final Class<?> getClass(), Returns the runtime class of this Object.
android.media.tv.TvContract.Programs,int hashCode(), Returns a hash code value for the object.
android.media.tv.TvContract.Programs,final void notify(), Wakes up a single thread that is waiting on this object's monitor.
android.media.tv.TvContract.Programs,final void notifyAll(), Wakes up all threads that are waiting on this object's monitor.
android.media.tv.TvContract.Programs,String toString(), Returns a string representation of the object.
android.media.tv.TvContract.Programs,"final void wait(long millis, int nanos)"," Causes the current thread to wait until another thread invokes the notify() method or the notifyAll() method for this object, or some other thread interrupts the current thread, or a certain amount of real time has elapsed."
android.media.tv.TvContract.Programs,final void wait(long millis)," Causes the current thread to wait until either another thread invokes the notify() method or the notifyAll() method for this object, or a specified amount of time has elapsed."
android.media.tv.TvContract.Programs,final void wait(), Causes the current thread to wait until another thread invokes the notify() method or the notifyAll() method for this object.
android.media.tv.TvContract.RecordedPrograms,Object clone(), Creates and returns a copy of this object.
android.media.tv.TvContract.RecordedPrograms,boolean equals(Object obj)," Indicates whether some other object is ""equal to"" this one."
android.media.tv.TvContract.RecordedPrograms,void finalize(), Called by the garbage collector on an object when garbage collection determines that there are no more references to the object.
android.media.tv.TvContract.RecordedPrograms,final Class<?> getClass(), Returns the runtime class of this Object.
android.media.tv.TvContract.RecordedPrograms,int hashCode(), Returns a hash code value for the object.
android.media.tv.TvContract.RecordedPrograms,final void notify(), Wakes up a single thread that is waiting on this object's monitor.
android.media.tv.TvContract.RecordedPrograms,final void notifyAll(), Wakes up all threads that are waiting on this object's monitor.
android.media.tv.TvContract.RecordedPrograms,String toString(), Returns a string representation of the object.
android.media.tv.TvContract.RecordedPrograms,"final void wait(long millis, int nanos)"," Causes the current thread to wait until another thread invokes the notify() method or the notifyAll() method for this object, or some other thread interrupts the current thread, or a certain amount of real time has elapsed."
android.media.tv.TvContract.RecordedPrograms,final void wait(long millis)," Causes the current thread to wait until either another thread invokes the notify() method or the notifyAll() method for this object, or a specified amount of time has elapsed."
android.media.tv.TvContract.RecordedPrograms,final void wait(), Causes the current thread to wait until another thread invokes the notify() method or the notifyAll() method for this object.
android.media.tv.TvContract,static Uri buildChannelLogoUri(Uri channelUri), Builds a URI that points to a channel logo.
android.media.tv.TvContract,static Uri buildChannelLogoUri(long channelId), Builds a URI that points to a channel logo.
android.media.tv.TvContract,static Uri buildChannelUri(long channelId), Builds a URI that points to a specific channel.
android.media.tv.TvContract,static Uri buildChannelUriForPassthroughInput(String inputId), Build a special channel URI intended to be used with pass-through inputs.
android.media.tv.TvContract,static Uri buildChannelsUriForInput(String inputId), Builds a URI that points to all channels from a given TV input.
android.media.tv.TvContract,static String buildInputId(ComponentName name), Builds an ID that uniquely identifies a TV input service.
android.media.tv.TvContract,static Uri buildPreviewProgramUri(long previewProgramId), Builds a URI that points to a specific preview program.
android.media.tv.TvContract,static Uri buildPreviewProgramsUriForChannel(Uri channelUri), Builds a URI that points to all preview programs on a given channel.
android.media.tv.TvContract,static Uri buildPreviewProgramsUriForChannel(long channelId), Builds a URI that points to all preview programs on a given channel.
android.media.tv.TvContract,static Uri buildProgramUri(long programId), Builds a URI that points to a specific program.
android.media.tv.TvContract,"static Uri buildProgramsUriForChannel(long channelId, long startTime, long endTime)", Builds a URI that points to programs on a specific channel whose schedules overlap with the given time frame.
android.media.tv.TvContract,static Uri buildProgramsUriForChannel(long channelId), Builds a URI that points to all programs on a given channel.
android.media.tv.TvContract,static Uri buildProgramsUriForChannel(Uri channelUri), Builds a URI that points to all programs on a given channel.
android.media.tv.TvContract,"static Uri buildProgramsUriForChannel(Uri channelUri, long startTime, long endTime)", Builds a URI that points to programs on a specific channel whose schedules overlap with the given time frame.
android.media.tv.TvContract,static Uri buildRecordedProgramUri(long recordedProgramId), Builds a URI that points to a specific recorded program.
android.media.tv.TvContract,static Uri buildWatchNextProgramUri(long watchNextProgramId), Builds a URI that points to a specific watch next program.
android.media.tv.TvContract,static boolean isChannelUri(Uri uri),
android.media.tv.TvContract,static boolean isChannelUriForPassthroughInput(Uri uri),
android.media.tv.TvContract,static boolean isChannelUriForTunerInput(Uri uri),
android.media.tv.TvContract,static boolean isProgramUri(Uri uri),
android.media.tv.TvContract,static boolean isRecordedProgramUri(Uri uri),
android.media.tv.TvContract,"static void requestChannelBrowsable(Context context, long channelId)", Requests to make a channel browsable.
android.media.tv.TvContract.WatchNextPrograms,Object clone(), Creates and returns a copy of this object.
android.media.tv.TvContract.WatchNextPrograms,boolean equals(Object obj)," Indicates whether some other object is ""equal to"" this one."
android.media.tv.TvContract.WatchNextPrograms,void finalize(), Called by the garbage collector on an object when garbage collection determines that there are no more references to the object.
android.media.tv.TvContract.WatchNextPrograms,final Class<?> getClass(), Returns the runtime class of this Object.
android.media.tv.TvContract.WatchNextPrograms,int hashCode(), Returns a hash code value for the object.
android.media.tv.TvContract.WatchNextPrograms,final void notify(), Wakes up a single thread that is waiting on this object's monitor.
android.media.tv.TvContract.WatchNextPrograms,final void notifyAll(), Wakes up all threads that are waiting on this object's monitor.
android.media.tv.TvContract.WatchNextPrograms,String toString(), Returns a string representation of the object.
android.media.tv.TvContract.WatchNextPrograms,"final void wait(long millis, int nanos)"," Causes the current thread to wait until another thread invokes the notify() method or the notifyAll() method for this object, or some other thread interrupts the current thread, or a certain amount of real time has elapsed."
android.media.tv.TvContract.WatchNextPrograms,final void wait(long millis)," Causes the current thread to wait until either another thread invokes the notify() method or the notifyAll() method for this object, or a specified amount of time has elapsed."
android.media.tv.TvContract.WatchNextPrograms,final void wait(), Causes the current thread to wait until another thread invokes the notify() method or the notifyAll() method for this object.
android.media.tv.TvInputInfo.Builder,TvInputInfo build(), Creates a TvInputInfo instance with the specified fields.
android.media.tv.TvInputInfo.Builder,TvInputInfo.Builder setCanRecord(boolean canRecord), Sets whether this TV input can record TV programs or not.
android.media.tv.TvInputInfo.Builder,TvInputInfo.Builder setExtras(Bundle extras), Sets domain-specific extras associated with this TV input.
android.media.tv.TvInputInfo.Builder,TvInputInfo.Builder setTunerCount(int tunerCount), Sets the tuner count.
android.media.tv.TvInputInfo,boolean canRecord()," Returns true if this TV input can record TV programs, false otherwise."
android.media.tv.TvInputInfo,Intent createSettingsIntent(), This method was deprecated in API level 26. Use createSetupIntent() instead. Settings activity is deprecated. Use setup activity instead to provide settings.
android.media.tv.TvInputInfo,Intent createSetupIntent(), Returns an intent to start the setup activity for this TV input.
android.media.tv.TvInputInfo,int describeContents(), Describe the kinds of special objects contained in this Parcelable instance's marshaled representation.
android.media.tv.TvInputInfo,boolean equals(Object o)," Indicates whether some other object is ""equal to"" this one."
android.media.tv.TvInputInfo,Bundle getExtras(), Returns domain-specific extras associated with this TV input.
android.media.tv.TvInputInfo,String getId(), Returns a unique ID for this TV input.
android.media.tv.TvInputInfo,String getParentId(), Returns the parent input ID.
android.media.tv.TvInputInfo,ServiceInfo getServiceInfo(), Returns the information of the service that implements this TV input.
android.media.tv.TvInputInfo,int getTunerCount(), Returns the number of tuners this TV input has.
android.media.tv.TvInputInfo,int getType(), Returns the type of this TV input.
android.media.tv.TvInputInfo,int hashCode(), Returns a hash code value for the object.
android.media.tv.TvInputInfo,boolean isHidden(Context context), Checks if this TV input is marked hidden by the user in the settings.
android.media.tv.TvInputInfo,boolean isPassthroughInput(), Returns true if this TV input is pass-though which does not have any real channels in TvProvider.
android.media.tv.TvInputInfo,CharSequence loadCustomLabel(Context context), Loads the custom label set by user in settings.
android.media.tv.TvInputInfo,Drawable loadIcon(Context context), Loads the user-displayed icon for this TV input.
android.media.tv.TvInputInfo,CharSequence loadLabel(Context context), Loads the user-displayed label for this TV input.
android.media.tv.TvInputInfo,String toString(), Returns a string representation of the object.
android.media.tv.TvInputInfo,"void writeToParcel(Parcel dest, int flags)", Used to package this object into a Parcel.
android.media.tv.TvInputManager.TvInputCallback,void onInputAdded(String inputId), This is called when a TV input is added to the system.
android.media.tv.TvInputManager.TvInputCallback,void onInputRemoved(String inputId), This is called when a TV input is removed from the system.
android.media.tv.TvInputManager.TvInputCallback,"void onInputStateChanged(String inputId, int state)", This is called when the state of a given TV input is changed.
android.media.tv.TvInputManager.TvInputCallback,void onInputUpdated(String inputId), This is called when a TV input is updated on the system.
android.media.tv.TvInputManager.TvInputCallback,void onTvInputInfoUpdated(TvInputInfo inputInfo), This is called when the information about an existing TV input has been updated.
android.media.tv.TvInputManager,List<TvContentRating> getBlockedRatings(), Returns the list of blocked content ratings.
android.media.tv.TvInputManager,int getInputState(String inputId), Returns the state of a given TV input.
android.media.tv.TvInputManager,TvInputInfo getTvInputInfo(String inputId), Returns the TvInputInfo for a given TV input.
android.media.tv.TvInputManager,List<TvInputInfo> getTvInputList(), Returns the complete list of TV inputs on the system.
android.media.tv.TvInputManager,boolean isParentalControlsEnabled(), Returns the user's parental controls enabled state.
android.media.tv.TvInputManager,boolean isRatingBlocked(TvContentRating rating), Checks whether a given TV content rating is blocked by the user.
android.media.tv.TvInputManager,"void registerCallback(TvInputManager.TvInputCallback callback, Handler handler)", Registers a TvInputManager.TvInputCallback.
android.media.tv.TvInputManager,void unregisterCallback(TvInputManager.TvInputCallback callback), Unregisters the existing TvInputManager.TvInputCallback.
android.media.tv.TvInputManager,void updateTvInputInfo(TvInputInfo inputInfo), Updates the TvInputInfo for an existing TV input.
android.media.tv.TvInputService.HardwareSession,abstract String getHardwareInputId(), Returns the hardware TV input ID the external device is connected to.
android.media.tv.TvInputService.HardwareSession,void onHardwareVideoAvailable(), Called when the underlying hardware TV input session calls notifyVideoAvailable().
android.media.tv.TvInputService.HardwareSession,void onHardwareVideoUnavailable(int reason), Called when the underlying hardware TV input session calls notifyVideoUnavailable(int).
android.media.tv.TvInputService.HardwareSession,final boolean onSetSurface(Surface surface), This method will not be called in TvInputService.HardwareSession.
android.media.tv.TvInputService.RecordingSession,void notifyError(int error), Informs the application that there is an error and this recording session is no longer able to start or continue recording.
android.media.tv.TvInputService.RecordingSession,void notifyRecordingStopped(Uri recordedProgramUri), Informs the application that this recording session has stopped recording and created a new data entry in the TvContract.RecordedPrograms table that describes the newly recorded program.
android.media.tv.TvInputService.RecordingSession,void notifyTuned(Uri channelUri), Informs the application that this recording session has been tuned to the given channel and is ready to start recording.
android.media.tv.TvInputService.RecordingSession,"void onAppPrivateCommand(String action, Bundle data)", Processes a private command sent from the application to the TV input.
android.media.tv.TvInputService.RecordingSession,abstract void onRelease(), Called when the application requests to release all the resources held by this recording session.
android.media.tv.TvInputService.RecordingSession,abstract void onStartRecording(Uri programUri), Called when the application requests to start TV program recording.
android.media.tv.TvInputService.RecordingSession,abstract void onStopRecording(), Called when the application requests to stop TV program recording.
android.media.tv.TvInputService.RecordingSession,"void onTune(Uri channelUri, Bundle params)", Called when the application requests to tune to a given channel for TV program recording.
android.media.tv.TvInputService.RecordingSession,abstract void onTune(Uri channelUri), Called when the application requests to tune to a given channel for TV program recording.
android.media.tv.TvInputService.Session,"void layoutSurface(int left, int top, int right, int bottom)", Assigns a size and position to the surface passed in onSetSurface(Surface).
android.media.tv.TvInputService.Session,void notifyChannelRetuned(Uri channelUri), Informs the application that the current channel is re-tuned for some reason and the session now displays the content from a new channel.
android.media.tv.TvInputService.Session,void notifyContentAllowed(), Informs the application that the user is allowed to watch the current program content.
android.media.tv.TvInputService.Session,void notifyContentBlocked(TvContentRating rating), Informs the application that the current program content is blocked by parent controls.
android.media.tv.TvInputService.Session,void notifyTimeShiftStatusChanged(int status), Informs the application that the time shift status is changed.
android.media.tv.TvInputService.Session,"void notifyTrackSelected(int type, String trackId)", Sends the type and ID of a selected track.
android.media.tv.TvInputService.Session,void notifyTracksChanged(List<TvTrackInfo> tracks), Sends the list of all audio/video/subtitle tracks.
android.media.tv.TvInputService.Session,void notifyVideoAvailable(), Informs the application that the video is now available for watching.
android.media.tv.TvInputService.Session,void notifyVideoUnavailable(int reason), Informs the application that the video became unavailable for some reason.
android.media.tv.TvInputService.Session,"void onAppPrivateCommand(String action, Bundle data)", Processes a private command sent from the application to the TV input.
android.media.tv.TvInputService.Session,View onCreateOverlayView(), Called when the application requests to create an overlay view.
android.media.tv.TvInputService.Session,boolean onGenericMotionEvent(MotionEvent event), Implement this method to handle generic motion events on the current input session.
android.media.tv.TvInputService.Session,"boolean onKeyDown(int keyCode, KeyEvent event)", Default implementation of KeyEvent.Callback.onKeyDown(): always returns false (doesn't handle the event).
android.media.tv.TvInputService.Session,"boolean onKeyLongPress(int keyCode, KeyEvent event)", Default implementation of KeyEvent.Callback.onKeyLongPress(): always returns false (doesn't handle the event).
android.media.tv.TvInputService.Session,"boolean onKeyMultiple(int keyCode, int count, KeyEvent event)", Default implementation of KeyEvent.Callback.onKeyMultiple(): always returns false (doesn't handle the event).
android.media.tv.TvInputService.Session,"boolean onKeyUp(int keyCode, KeyEvent event)", Default implementation of KeyEvent.Callback.onKeyUp(): always returns false (doesn't handle the event).
android.media.tv.TvInputService.Session,"void onOverlayViewSizeChanged(int width, int height)", Called when the size of the overlay view is changed by the application.
android.media.tv.TvInputService.Session,abstract void onRelease(), Called when the session is released.
android.media.tv.TvInputService.Session,"boolean onSelectTrack(int type, String trackId)", Selects a given track.
android.media.tv.TvInputService.Session,abstract void onSetCaptionEnabled(boolean enabled), Enables or disables the caption.
android.media.tv.TvInputService.Session,abstract void onSetStreamVolume(float volume), Sets the relative stream volume of the current TV input session.
android.media.tv.TvInputService.Session,abstract boolean onSetSurface(Surface surface), Called when the application sets the surface.
android.media.tv.TvInputService.Session,"void onSurfaceChanged(int format, int width, int height)", Called after any structural changes (format or size) have been made to the surface passed in onSetSurface(Surface).
android.media.tv.TvInputService.Session,long onTimeShiftGetCurrentPosition()," Returns the current position for time shifting, in milliseconds since the epoch."
android.media.tv.TvInputService.Session,long onTimeShiftGetStartPosition()," Returns the start position for time shifting, in milliseconds since the epoch."
android.media.tv.TvInputService.Session,void onTimeShiftPause(), Called when the application requests to pause playback.
android.media.tv.TvInputService.Session,void onTimeShiftPlay(Uri recordedProgramUri), Called when the application requests to play a given recorded TV program.
android.media.tv.TvInputService.Session,void onTimeShiftResume(), Called when the application requests to resume playback.
android.media.tv.TvInputService.Session,void onTimeShiftSeekTo(long timeMs), Called when the application requests to seek to a specified time position.
android.media.tv.TvInputService.Session,void onTimeShiftSetPlaybackParams(PlaybackParams params), Called when the application sets playback parameters containing the speed and audio mode.
android.media.tv.TvInputService.Session,boolean onTouchEvent(MotionEvent event), Implement this method to handle touch screen motion events on the current input session.
android.media.tv.TvInputService.Session,boolean onTrackballEvent(MotionEvent event), Implement this method to handle trackball events on the current input session.
android.media.tv.TvInputService.Session,"boolean onTune(Uri channelUri, Bundle params)", Tunes to a given channel.
android.media.tv.TvInputService.Session,abstract boolean onTune(Uri channelUri), Tunes to a given channel.
android.media.tv.TvInputService.Session,void onUnblockContent(TvContentRating unblockedRating), Requests to unblock the content according to the given rating.
android.media.tv.TvInputService.Session,void setOverlayViewEnabled(boolean enable), Enables or disables the overlay view.
android.media.tv.TvInputService,final IBinder onBind(Intent intent), Return the communication channel to the service.
android.media.tv.TvInputService,TvInputService.RecordingSession onCreateRecordingSession(String inputId), Returns a concrete implementation of TvInputService.RecordingSession.
android.media.tv.TvInputService,abstract TvInputService.Session onCreateSession(String inputId), Returns a concrete implementation of TvInputService.Session.
android.media.tv.TvRecordingClient.RecordingCallback,void onConnectionFailed(String inputId), This is called when an error occurred while establishing a connection to the recording session for the corresponding TV input.
android.media.tv.TvRecordingClient.RecordingCallback,void onDisconnected(String inputId), This is called when the connection to the current recording session is lost.
android.media.tv.TvRecordingClient.RecordingCallback,void onError(int error), This is called when an issue has occurred.
android.media.tv.TvRecordingClient.RecordingCallback,void onRecordingStopped(Uri recordedProgramUri), This is called when the current recording session has stopped recording and created a new data entry in the TvContract.RecordedPrograms table that describes the newly recorded program.
android.media.tv.TvRecordingClient.RecordingCallback,void onTuned(Uri channelUri), This is called when the recording session has been tuned to the given channel and is ready to start recording.
android.media.tv.TvRecordingClient,void release(), Releases the resources in the current recording session immediately.
android.media.tv.TvRecordingClient,"void sendAppPrivateCommand(String action, Bundle data)", Sends a private command to the underlying TV input.
android.media.tv.TvRecordingClient,void startRecording(Uri programUri), Starts TV program recording in the current recording session.
android.media.tv.TvRecordingClient,void stopRecording(), Stops TV program recording in the current recording session.
android.media.tv.TvRecordingClient,"void tune(String inputId, Uri channelUri, Bundle params)", Tunes to a given channel for TV program recording.
android.media.tv.TvRecordingClient,"void tune(String inputId, Uri channelUri)", Tunes to a given channel for TV program recording.
android.media.tv.TvTrackInfo.Builder,TvTrackInfo build(), Creates a TvTrackInfo instance with the specified fields.
android.media.tv.TvTrackInfo.Builder,TvTrackInfo.Builder setAudioChannelCount(int audioChannelCount), Sets the audio channel count.
android.media.tv.TvTrackInfo.Builder,TvTrackInfo.Builder setAudioSampleRate(int audioSampleRate)," Sets the audio sample rate, in the unit of Hz."
android.media.tv.TvTrackInfo.Builder,TvTrackInfo.Builder setDescription(CharSequence description), Sets a user readable description for the current track.
android.media.tv.TvTrackInfo.Builder,TvTrackInfo.Builder setExtra(Bundle extra), Sets the extra information about the current track.
android.media.tv.TvTrackInfo.Builder,TvTrackInfo.Builder setLanguage(String language), Sets the language information of the current track.
android.media.tv.TvTrackInfo.Builder,TvTrackInfo.Builder setVideoActiveFormatDescription(byte videoActiveFormatDescription), Sets the Active Format Description (AFD) code of the video.
android.media.tv.TvTrackInfo.Builder,TvTrackInfo.Builder setVideoFrameRate(float videoFrameRate)," Sets the frame rate of the video, in the unit fps (frames per rate)."
android.media.tv.TvTrackInfo.Builder,TvTrackInfo.Builder setVideoHeight(int videoHeight)," Sets the height of the video, in the unit of pixels."
android.media.tv.TvTrackInfo.Builder,TvTrackInfo.Builder setVideoPixelAspectRatio(float videoPixelAspectRatio), Sets the pixel aspect ratio (the ratio of a pixel's width to its height) of the video.
android.media.tv.TvTrackInfo.Builder,TvTrackInfo.Builder setVideoWidth(int videoWidth)," Sets the width of the video, in the unit of pixels."
android.media.tv.TvTrackInfo,int describeContents(), Describe the kinds of special objects contained in this Parcelable instance's marshaled representation.
android.media.tv.TvTrackInfo,boolean equals(Object o)," Indicates whether some other object is ""equal to"" this one."
android.media.tv.TvTrackInfo,int getAudioChannelCount(), Returns the audio channel count.
android.media.tv.TvTrackInfo,int getAudioSampleRate()," Returns the audio sample rate, in the unit of Hz."
android.media.tv.TvTrackInfo,CharSequence getDescription(), Returns a user readable description for the current track.
android.media.tv.TvTrackInfo,Bundle getExtra(), Returns the extra information about the current track.
android.media.tv.TvTrackInfo,String getId(), Returns the ID of the track.
android.media.tv.TvTrackInfo,String getLanguage(), Returns the language information encoded by either ISO 639-1 or ISO 639-2/T.
android.media.tv.TvTrackInfo,int getType(), Returns the type of the track.
android.media.tv.TvTrackInfo,byte getVideoActiveFormatDescription(), Returns the Active Format Description (AFD) code of the video.
android.media.tv.TvTrackInfo,float getVideoFrameRate()," Returns the frame rate of the video, in the unit of fps (frames per second)."
android.media.tv.TvTrackInfo,int getVideoHeight()," Returns the height of the video, in the unit of pixels."
android.media.tv.TvTrackInfo,float getVideoPixelAspectRatio(), Returns the pixel aspect ratio (the ratio of a pixel's width to its height) of the video.
android.media.tv.TvTrackInfo,int getVideoWidth()," Returns the width of the video, in the unit of pixels."
android.media.tv.TvTrackInfo,int hashCode(), Returns a hash code value for the object.
android.media.tv.TvTrackInfo,"void writeToParcel(Parcel dest, int flags)", Used to package this object into a Parcel.
android.media.tv.TvView.OnUnhandledInputEventListener,abstract boolean onUnhandledInputEvent(InputEvent event), Called when an input event was not handled by the bound TV input.
android.media.tv.TvView.TimeShiftPositionCallback,"void onTimeShiftCurrentPositionChanged(String inputId, long timeMs)", This is called when the current position for time shifting has changed.
android.media.tv.TvView.TimeShiftPositionCallback,"void onTimeShiftStartPositionChanged(String inputId, long timeMs)", This is called when the start position for time shifting has changed.
android.media.tv.TvView.TvInputCallback,"void onChannelRetuned(String inputId, Uri channelUri)"," This is invoked when the channel of this TvView is changed by the underlying TV input without any tune(String, Uri) request."
android.media.tv.TvView.TvInputCallback,void onConnectionFailed(String inputId), This is invoked when an error occurred while establishing a connection to the underlying TV input.
android.media.tv.TvView.TvInputCallback,void onContentAllowed(String inputId), This is called when the current program content turns out to be allowed to watch since its content rating is not blocked by parental controls.
android.media.tv.TvView.TvInputCallback,"void onContentBlocked(String inputId, TvContentRating rating)", This is called when the current program content turns out to be not allowed to watch since its content rating is blocked by parental controls.
android.media.tv.TvView.TvInputCallback,void onDisconnected(String inputId), This is invoked when the existing connection to the underlying TV input is lost.
android.media.tv.TvView.TvInputCallback,"void onTimeShiftStatusChanged(String inputId, int status)", This is called when the time shift status is changed.
android.media.tv.TvView.TvInputCallback,"void onTrackSelected(String inputId, int type, String trackId)", This is called when there is a change on the selected tracks.
android.media.tv.TvView.TvInputCallback,"void onTracksChanged(String inputId, List<TvTrackInfo> tracks)", This is called when the track information has been changed.
android.media.tv.TvView.TvInputCallback,void onVideoAvailable(String inputId)," This is called when the video is available, so the TV input starts the playback."
android.media.tv.TvView.TvInputCallback,"void onVideoSizeChanged(String inputId, int width, int height)", This is invoked when the video size has been changed.
android.media.tv.TvView.TvInputCallback,"void onVideoUnavailable(String inputId, int reason)"," This is called when the video is not available, so the TV input stops the playback."
android.media.tv.TvView,boolean dispatchGenericMotionEvent(MotionEvent event), Dispatch a generic motion event.
android.media.tv.TvView,boolean dispatchKeyEvent(KeyEvent event), Dispatch a key event to the next view on the focus path.
android.media.tv.TvView,boolean dispatchTouchEvent(MotionEvent event)," Pass the touch screen motion event down to the target view, or this view if it is the target."
android.media.tv.TvView,boolean dispatchTrackballEvent(MotionEvent event), Pass a trackball motion event down to the focused view.
android.media.tv.TvView,boolean dispatchUnhandledInputEvent(InputEvent event), Dispatches an unhandled input event to the next receiver.
android.media.tv.TvView,void dispatchWindowFocusChanged(boolean hasFocus), Called when the window containing this view gains or loses window focus.
android.media.tv.TvView,void draw(Canvas canvas), Manually render this view (and all of its children) to the given Canvas.
android.media.tv.TvView,boolean gatherTransparentRegion(Region region), This is used by the RootView to perform an optimization when the view hierarchy contains one or several SurfaceView.
android.media.tv.TvView,String getSelectedTrack(int type), Returns the ID of the selected track for a given type.
android.media.tv.TvView,List<TvTrackInfo> getTracks(int type), Returns the list of tracks.
android.media.tv.TvView,boolean onUnhandledInputEvent(InputEvent event), Called when an unhandled input event also has not been handled by the user provided callback.
android.media.tv.TvView,void reset(), Resets this TvView.
android.media.tv.TvView,"void selectTrack(int type, String trackId)", Selects a track.
android.media.tv.TvView,"void sendAppPrivateCommand(String action, Bundle data)", Sends a private command to the underlying TV input.
android.media.tv.TvView,void setCallback(TvView.TvInputCallback callback), Sets the callback to be invoked when an event is dispatched to this TvView.
android.media.tv.TvView,void setCaptionEnabled(boolean enabled), Enables or disables the caption in this TvView.
android.media.tv.TvView,void setOnUnhandledInputEventListener(TvView.OnUnhandledInputEventListener listener), Registers a callback to be invoked when an input event is not handled by the bound TV input.
android.media.tv.TvView,void setStreamVolume(float volume), Sets the relative stream volume of this TvView.
android.media.tv.TvView,void setTimeShiftPositionCallback(TvView.TimeShiftPositionCallback callback), Sets the callback to be invoked when the time shift position is changed.
android.media.tv.TvView,void setZOrderMediaOverlay(boolean isMediaOverlay), Controls whether the TvView's surface is placed on top of another regular surface view in the window (but still behind the window itself).
android.media.tv.TvView,void setZOrderOnTop(boolean onTop), Controls whether the TvView's surface is placed on top of its window.
android.media.tv.TvView,void timeShiftPause(), Pauses playback.
android.media.tv.TvView,"void timeShiftPlay(String inputId, Uri recordedProgramUri)", Plays a given recorded TV program.
android.media.tv.TvView,void timeShiftResume(), Resumes playback.
android.media.tv.TvView,void timeShiftSeekTo(long timeMs), Seeks to a specified time position.
android.media.tv.TvView,void timeShiftSetPlaybackParams(PlaybackParams params), Sets playback rate using PlaybackParams.
android.media.tv.TvView,"void tune(String inputId, Uri channelUri, Bundle params)", Tunes to a given channel.
android.media.tv.TvView,"void tune(String inputId, Uri channelUri)", Tunes to a given channel.
android.media.UnsupportedSchemeException,final void addSuppressed(Throwable exception), Appends the specified exception to the exceptions that were suppressed in order to deliver this exception.
android.media.UnsupportedSchemeException,Throwable fillInStackTrace(), Fills in the execution stack trace.
android.media.UnsupportedSchemeException,Throwable getCause(), Returns the cause of this throwable or null if the cause is nonexistent or unknown.
android.media.UnsupportedSchemeException,String getLocalizedMessage(), Creates a localized description of this throwable.
android.media.UnsupportedSchemeException,String getMessage(), Returns the detail message string of this throwable.
android.media.UnsupportedSchemeException,StackTraceElement[] getStackTrace(), Provides programmatic access to the stack trace information printed by printStackTrace().
android.media.UnsupportedSchemeException,final Throwable[] getSuppressed()," Returns an array containing all of the exceptions that were suppressed, typically by the try-with-resources statement, in order to deliver this exception."
android.media.UnsupportedSchemeException,Throwable initCause(Throwable cause), Initializes the cause of this throwable to the specified value.
android.media.UnsupportedSchemeException,void printStackTrace(), Prints this throwable and its backtrace to the standard error stream.
android.media.UnsupportedSchemeException,void printStackTrace(PrintWriter s), Prints this throwable and its backtrace to the specified print writer.
android.media.UnsupportedSchemeException,void printStackTrace(PrintStream s), Prints this throwable and its backtrace to the specified print stream.
android.media.UnsupportedSchemeException,void setStackTrace(StackTraceElement[] stackTrace), Sets the stack trace elements that will be returned by getStackTrace() and printed by printStackTrace() and related methods.
android.media.UnsupportedSchemeException,String toString(), Returns a short description of this throwable.
android.media.UnsupportedSchemeException,Object clone(), Creates and returns a copy of this object.
android.media.UnsupportedSchemeException,boolean equals(Object obj)," Indicates whether some other object is ""equal to"" this one."
android.media.UnsupportedSchemeException,void finalize(), Called by the garbage collector on an object when garbage collection determines that there are no more references to the object.
android.media.UnsupportedSchemeException,final Class<?> getClass(), Returns the runtime class of this Object.
android.media.UnsupportedSchemeException,int hashCode(), Returns a hash code value for the object.
android.media.UnsupportedSchemeException,final void notify(), Wakes up a single thread that is waiting on this object's monitor.
android.media.UnsupportedSchemeException,final void notifyAll(), Wakes up all threads that are waiting on this object's monitor.
android.media.UnsupportedSchemeException,String toString(), Returns a string representation of the object.
android.media.UnsupportedSchemeException,"final void wait(long millis, int nanos)"," Causes the current thread to wait until another thread invokes the notify() method or the notifyAll() method for this object, or some other thread interrupts the current thread, or a certain amount of real time has elapsed."
android.media.UnsupportedSchemeException,final void wait(long millis)," Causes the current thread to wait until either another thread invokes the notify() method or the notifyAll() method for this object, or a specified amount of time has elapsed."
android.media.UnsupportedSchemeException,final void wait(), Causes the current thread to wait until another thread invokes the notify() method or the notifyAll() method for this object.
android.media.VolumeAutomation,abstract VolumeShaper createVolumeShaper(VolumeShaper.Configuration configuration), Returns a VolumeShaper object that can be used modify the volume envelope of the player or track.
android.media.VolumeProvider,final int getCurrentVolume(), Gets the current volume.
android.media.VolumeProvider,final int getMaxVolume(), Get the maximum volume this provider allows.
android.media.VolumeProvider,final int getVolumeControl(), Get the volume control type that this volume provider uses.
android.media.VolumeProvider,void onAdjustVolume(int direction), Override to handle requests to adjust the volume of the current output.
android.media.VolumeProvider,void onSetVolumeTo(int volume), Override to handle requests to set the volume of the current output.
android.media.VolumeProvider,final void setCurrentVolume(int currentVolume), Notify the system that the current volume has been changed.
android.media.VolumeShaper.Configuration.Builder,VolumeShaper.Configuration build(), Builds a new VolumeShaper object.
android.media.VolumeShaper.Configuration.Builder,VolumeShaper.Configuration.Builder invertVolumes(), Inverts the volume curve so that the max volume becomes the min volume and vice versa.
android.media.VolumeShaper.Configuration.Builder,VolumeShaper.Configuration.Builder reflectTimes(), Reflects the volume curve so that the shaper changes volume from the end to the start.
android.media.VolumeShaper.Configuration.Builder,VolumeShaper.Configuration.Builder scaleToEndVolume(float volume), Scale the curve end volume to a target value.
android.media.VolumeShaper.Configuration.Builder,VolumeShaper.Configuration.Builder scaleToStartVolume(float volume), Scale the curve start volume to a target value.
android.media.VolumeShaper.Configuration.Builder,"VolumeShaper.Configuration.Builder setCurve(float[] times, float[] volumes)", Sets the volume curve.
android.media.VolumeShaper.Configuration.Builder,VolumeShaper.Configuration.Builder setDuration(long durationMillis), Sets the VolumeShaper duration in milliseconds.
android.media.VolumeShaper.Configuration.Builder,VolumeShaper.Configuration.Builder setInterpolatorType(int interpolatorType), Sets the interpolator type.
android.media.VolumeShaper.Configuration,int describeContents(), Describe the kinds of special objects contained in this Parcelable instance's marshaled representation.
android.media.VolumeShaper.Configuration,boolean equals(Object o)," Indicates whether some other object is ""equal to"" this one."
android.media.VolumeShaper.Configuration,long getDuration(), Returns the duration of the volume shape in milliseconds.
android.media.VolumeShaper.Configuration,int getInterpolatorType(), Returns the interpolator type.
android.media.VolumeShaper.Configuration,static int getMaximumCurvePoints()," Returns the maximum number of curve points allowed for setCurve(float[], float[])."
android.media.VolumeShaper.Configuration,float[] getTimes(), Returns the times (x) coordinate array of the volume curve points.
android.media.VolumeShaper.Configuration,float[] getVolumes(), Returns the volumes (y) coordinate array of the volume curve points.
android.media.VolumeShaper.Configuration,int hashCode(), Returns a hash code value for the object.
android.media.VolumeShaper.Configuration,String toString(), Returns a string representation of the object.
android.media.VolumeShaper.Configuration,"void writeToParcel(Parcel dest, int flags)", Flatten this object in to a Parcel.
android.media.VolumeShaper.Operation,int describeContents(), Describe the kinds of special objects contained in this Parcelable instance's marshaled representation.
android.media.VolumeShaper.Operation,boolean equals(Object o)," Indicates whether some other object is ""equal to"" this one."
android.media.VolumeShaper.Operation,int hashCode(), Returns a hash code value for the object.
android.media.VolumeShaper.Operation,String toString(), Returns a string representation of the object.
android.media.VolumeShaper.Operation,"void writeToParcel(Parcel dest, int flags)", Flatten this object in to a Parcel.
android.media.VolumeShaper,void apply(VolumeShaper.Operation operation), Applies the VolumeShaper.Operation to the VolumeShaper.
android.media.VolumeShaper,void close(), Releases the VolumeShaper object; any volume scale due to the VolumeShaper is removed after closing.
android.media.VolumeShaper,float getVolume(), Returns the current volume scale attributable to the VolumeShaper.
android.media.VolumeShaper,"void replace(VolumeShaper.Configuration configuration, VolumeShaper.Operation operation, boolean join)", Replaces the current VolumeShaper configuration with a new configuration.
android.net.CaptivePortal,int describeContents(), Describe the kinds of special objects contained in this Parcelable instance's marshaled representation.
android.net.CaptivePortal,void ignoreNetwork(), Indicate to the system that the user does not want to pursue signing in to the captive portal and the system should continue to prefer other networks without captive portals for use as the default active data network.
android.net.CaptivePortal,void reportCaptivePortalDismissed(), Indicate to the system that the captive portal has been dismissed.
android.net.CaptivePortal,"void writeToParcel(Parcel out, int flags)", Flatten this object in to a Parcel.
android.net.ConnectivityManager.NetworkCallback,void onAvailable(Network network), Called when the framework connects and has declared a new network ready for use.
android.net.ConnectivityManager.NetworkCallback,"void onCapabilitiesChanged(Network network, NetworkCapabilities networkCapabilities)", Called when the network the framework connected to for this request changes capabilities but still satisfies the stated need.
android.net.ConnectivityManager.NetworkCallback,"void onLinkPropertiesChanged(Network network, LinkProperties linkProperties)", Called when the network the framework connected to for this request changes LinkProperties.
android.net.ConnectivityManager.NetworkCallback,"void onLosing(Network network, int maxMsToLive)", Called when the network is about to be disconnected.
android.net.ConnectivityManager.NetworkCallback,void onLost(Network network), Called when the framework has a hard loss of the network or when the graceful failure ends.
android.net.ConnectivityManager.NetworkCallback,void onUnavailable()," Called if no network is found in the timeout time specified in requestNetwork(NetworkRequest, NetworkCallback, int) call."
android.net.ConnectivityManager.OnNetworkActiveListener,abstract void onNetworkActive()," Called on the main thread of the process to report that the current data network has become active, and it is now a good time to perform any pending network operations."
android.net.ConnectivityManager,void addDefaultNetworkActiveListener(ConnectivityManager.OnNetworkActiveListener l)," Start listening to reports when the system's default data network is active, meaning it is a good time to perform network traffic."
android.net.ConnectivityManager,boolean bindProcessToNetwork(Network network), Binds the current process to network.
android.net.ConnectivityManager,Network getActiveNetwork(), Returns a Network object corresponding to the currently active default data network.
android.net.ConnectivityManager,NetworkInfo getActiveNetworkInfo(), Returns details about the currently active default data network.
android.net.ConnectivityManager,NetworkInfo[] getAllNetworkInfo(), This method was deprecated in API level 23. This method does not support multiple connected networks of the same type. Use getAllNetworks() and getNetworkInfo(android.net.Network) instead.
android.net.ConnectivityManager,Network[] getAllNetworks(), Returns an array of all Network currently tracked by the framework.
android.net.ConnectivityManager,boolean getBackgroundDataSetting()," This method was deprecated in API level 14. As of ICE_CREAM_SANDWICH, availability of background data depends on several combined factors, and this method will always return true. Instead, when background data is unavailable, getActiveNetworkInfo() will now appear disconnected."
android.net.ConnectivityManager,Network getBoundNetworkForProcess()," Returns the Network currently bound to this process via bindProcessToNetwork(Network), or null if no Network is explicitly bound."
android.net.ConnectivityManager,ProxyInfo getDefaultProxy(), Get the current default HTTP proxy settings.
android.net.ConnectivityManager,LinkProperties getLinkProperties(Network network), Get the LinkProperties for the given Network.
android.net.ConnectivityManager,int getMultipathPreference(Network network)," Provides a hint to the calling application on whether it is desirable to use the multinetwork APIs (e.g., openConnection(URL), bindSocket(FileDescriptor), etc.) for multipath data transfer on this network when it is not the system default network."
android.net.ConnectivityManager,NetworkCapabilities getNetworkCapabilities(Network network), Get the NetworkCapabilities for the given Network.
android.net.ConnectivityManager,NetworkInfo getNetworkInfo(int networkType), This method was deprecated in API level 23. This method does not support multiple connected networks of the same type. Use getAllNetworks() and getNetworkInfo(android.net.Network) instead.
android.net.ConnectivityManager,NetworkInfo getNetworkInfo(Network network), Returns connection status information about a particular Network.
android.net.ConnectivityManager,int getNetworkPreference()," This method was deprecated in API level 21. Functionality has been removed as it no longer makes sense, with many more than two networks - we'd need an array to express preference. Instead we use dynamic network properties of the networks to describe their precedence."
android.net.ConnectivityManager,byte[] getNetworkWatchlistConfigHash(), The network watchlist is a list of domains and IP addresses that are associated with potentially harmful apps.
android.net.ConnectivityManager,static Network getProcessDefaultNetwork(), This method was deprecated in API level 23. Using this function can lead to other functions throwing IllegalStateException. Use getBoundNetworkForProcess() instead. getBoundNetworkForProcess is a direct replacement.
android.net.ConnectivityManager,int getRestrictBackgroundStatus(), Determines if the calling application is subject to metered network restrictions while running on background.
android.net.ConnectivityManager,boolean isActiveNetworkMetered(), Returns if the currently active data network is metered.
android.net.ConnectivityManager,boolean isDefaultNetworkActive(), Return whether the data network is currently active.
android.net.ConnectivityManager,static boolean isNetworkTypeValid(int networkType), This method was deprecated in API level 23. All APIs accepting a network type are deprecated. There should be no need to validate a network type.
android.net.ConnectivityManager,void registerDefaultNetworkCallback(ConnectivityManager.NetworkCallback networkCallback), Registers to receive notifications about changes in the system default network.
android.net.ConnectivityManager,"void registerDefaultNetworkCallback(ConnectivityManager.NetworkCallback networkCallback, Handler handler)", Registers to receive notifications about changes in the system default network.
android.net.ConnectivityManager,"void registerNetworkCallback(NetworkRequest request, ConnectivityManager.NetworkCallback networkCallback)", Registers to receive notifications about all networks which satisfy the given NetworkRequest.
android.net.ConnectivityManager,"void registerNetworkCallback(NetworkRequest request, PendingIntent operation)", Registers a PendingIntent to be sent when a network is available which satisfies the given NetworkRequest.
android.net.ConnectivityManager,"void registerNetworkCallback(NetworkRequest request, ConnectivityManager.NetworkCallback networkCallback, Handler handler)", Registers to receive notifications about all networks which satisfy the given NetworkRequest.
android.net.ConnectivityManager,void releaseNetworkRequest(PendingIntent operation)," Removes a request made via requestNetwork(NetworkRequest, android.app.PendingIntent) This method has the same behavior as unregisterNetworkCallback(android.app.PendingIntent) with respect to releasing network resources and disconnecting."
android.net.ConnectivityManager,void removeDefaultNetworkActiveListener(ConnectivityManager.OnNetworkActiveListener l), Remove network active listener previously registered with addDefaultNetworkActiveListener(ConnectivityManager.OnNetworkActiveListener).
android.net.ConnectivityManager,void reportBadNetwork(Network network)," This method was deprecated in API level 23. Use reportNetworkConnectivity(Network, boolean) which allows reporting both working and non-working connectivity."
android.net.ConnectivityManager,"void reportNetworkConnectivity(Network network, boolean hasConnectivity)", Report to the framework whether a network has working connectivity.
android.net.ConnectivityManager,boolean requestBandwidthUpdate(Network network), Requests bandwidth update for a given Network and returns whether the update request is accepted by ConnectivityService.
android.net.ConnectivityManager,"void requestNetwork(NetworkRequest request, ConnectivityManager.NetworkCallback networkCallback)", Request a network to satisfy a set of NetworkCapabilities.
android.net.ConnectivityManager,"void requestNetwork(NetworkRequest request, ConnectivityManager.NetworkCallback networkCallback, int timeoutMs)"," Request a network to satisfy a set of NetworkCapabilities, limited by a timeout."
android.net.ConnectivityManager,"void requestNetwork(NetworkRequest request, ConnectivityManager.NetworkCallback networkCallback, Handler handler)", Request a network to satisfy a set of NetworkCapabilities.
android.net.ConnectivityManager,"void requestNetwork(NetworkRequest request, PendingIntent operation)", Request a network to satisfy a set of NetworkCapabilities.
android.net.ConnectivityManager,"void requestNetwork(NetworkRequest request, ConnectivityManager.NetworkCallback networkCallback, Handler handler, int timeoutMs)"," Request a network to satisfy a set of NetworkCapabilities, limited by a timeout."
android.net.ConnectivityManager,void setNetworkPreference(int preference)," This method was deprecated in API level 21. Functionality has been removed as it no longer makes sense, with many more than two networks - we'd need an array to express preference. Instead we use dynamic network properties of the networks to describe their precedence."
android.net.ConnectivityManager,static boolean setProcessDefaultNetwork(Network network), This method was deprecated in API level 23. This function can throw IllegalStateException. Use bindProcessToNetwork(Network) instead. bindProcessToNetwork is a direct replacement.
android.net.ConnectivityManager,void unregisterNetworkCallback(ConnectivityManager.NetworkCallback networkCallback)," Unregisters a NetworkCallback and possibly releases networks originating from requestNetwork(NetworkRequest, NetworkCallback) and registerNetworkCallback(NetworkRequest, NetworkCallback) calls."
android.net.ConnectivityManager,void unregisterNetworkCallback(PendingIntent operation)," Unregisters a callback previously registered via registerNetworkCallback(NetworkRequest, android.app.PendingIntent)."
android.net.Credentials,int getGid(),
android.net.Credentials,int getPid(),
android.net.Credentials,int getUid(),
android.net.DhcpInfo,String toString(), Returns a string representation of the object.
android.net.http.HttpResponseCache,void close(), Uninstalls the cache and releases any active resources.
android.net.http.HttpResponseCache,void delete(), Uninstalls the cache and deletes all of its stored contents.
android.net.http.HttpResponseCache,void flush(), Force buffered operations to the filesystem.
android.net.http.HttpResponseCache,"CacheResponse get(URI uri, String requestMethod, Map<String,List<String>> requestHeaders)"," Retrieve the cached response based on the requesting uri, request method and request headers."
android.net.http.HttpResponseCache,int getHitCount(), Returns the number of HTTP requests whose response was provided by the cache.
android.net.http.HttpResponseCache,static HttpResponseCache getInstalled()," Returns the currently-installed HttpResponseCache, or null if there is no cache installed or it is not a HttpResponseCache."
android.net.http.HttpResponseCache,int getNetworkCount(), Returns the number of HTTP requests that required the network to either supply a response or validate a locally cached response.
android.net.http.HttpResponseCache,int getRequestCount(), Returns the total number of HTTP requests that were made.
android.net.http.HttpResponseCache,"static HttpResponseCache install(File directory, long maxSize)", Creates a new HTTP response cache and sets it as the system default cache.
android.net.http.HttpResponseCache,long maxSize(), Returns the maximum number of bytes that this cache should use to store its data.
android.net.http.HttpResponseCache,"CacheRequest put(URI uri, URLConnection urlConnection)"," The protocol handler calls this method after a resource has been retrieved, and the ResponseCache must decide whether or not to store the resource in its cache."
android.net.http.HttpResponseCache,long size(), Returns the number of bytes currently being used to store the values in this cache.
android.net.http.SslCertificate.DName,String getCName(),
android.net.http.SslCertificate.DName,String getDName(),
android.net.http.SslCertificate.DName,String getOName(),
android.net.http.SslCertificate.DName,String getUName(),
android.net.http.SslCertificate,SslCertificate.DName getIssuedBy(),
android.net.http.SslCertificate,SslCertificate.DName getIssuedTo(),
android.net.http.SslCertificate,String getValidNotAfter(), This method was deprecated in API level 8. Use getValidNotAfterDate()
android.net.http.SslCertificate,Date getValidNotAfterDate(),
android.net.http.SslCertificate,String getValidNotBefore(), This method was deprecated in API level 8. Use getValidNotBeforeDate()
android.net.http.SslCertificate,Date getValidNotBeforeDate(),
android.net.http.SslCertificate,static SslCertificate restoreState(Bundle bundle), Restores the certificate stored in the bundle
android.net.http.SslCertificate,static Bundle saveState(SslCertificate certificate), Saves the certificate state to a bundle
android.net.http.SslCertificate,String toString(), Returns a string representation of the object.
android.net.http.SslError,boolean addError(int error), Adds the supplied SSL error to the set.
android.net.http.SslError,SslCertificate getCertificate(), Gets the SSL certificate associated with this object.
android.net.http.SslError,int getPrimaryError(), Gets the most severe SSL error in this object's set of errors.
android.net.http.SslError,String getUrl(), Gets the URL associated with this object.
android.net.http.SslError,boolean hasError(int error), Determines whether this object includes the supplied error.
android.net.http.SslError,String toString(), Returns a string representation of this object.
android.net.http.X509TrustManagerExtensions,"List<X509Certificate> checkServerTrusted(X509Certificate[] chain, String authType, String host)", Verifies the given certificate chain.
android.net.http.X509TrustManagerExtensions,boolean isUserAddedCertificate(X509Certificate cert), Checks whether a CA certificate is added by an user.
android.net.IpPrefix,boolean contains(InetAddress address), Determines whether the prefix contains the specified address.
android.net.IpPrefix,int describeContents(), Implement the Parcelable interface.
android.net.IpPrefix,boolean equals(Object obj), Compares this IpPrefix object against the specified object in obj.
android.net.IpPrefix,InetAddress getAddress(), Returns a copy of the first IP address in the prefix.
android.net.IpPrefix,int getPrefixLength(), Returns the prefix length of this IpPrefix.
android.net.IpPrefix,byte[] getRawAddress(), Returns a copy of the IP address bytes in network order (the highest order byte is the zeroth element).
android.net.IpPrefix,int hashCode(), Gets the hashcode of the represented IP prefix.
android.net.IpPrefix,String toString(), Returns a string representation of this IpPrefix.
android.net.IpPrefix,"void writeToParcel(Parcel dest, int flags)", Implement the Parcelable interface.
android.net.IpSecAlgorithm,int describeContents(), Describe the kinds of special objects contained in this Parcelable instance's marshaled representation.
android.net.IpSecAlgorithm,byte[] getKey(), Get the key for this algorithm
android.net.IpSecAlgorithm,String getName(), Get the algorithm name
android.net.IpSecAlgorithm,int getTruncationLengthBits()," Get the truncation length of this algorithm, in bits"
android.net.IpSecAlgorithm,String toString(), Returns a string representation of the object.
android.net.IpSecAlgorithm,"void writeToParcel(Parcel out, int flags)", Write to parcel
android.net.IpSecManager.ResourceUnavailableException,final void addSuppressed(Throwable exception), Appends the specified exception to the exceptions that were suppressed in order to deliver this exception.
android.net.IpSecManager.ResourceUnavailableException,Throwable fillInStackTrace(), Fills in the execution stack trace.
android.net.IpSecManager.ResourceUnavailableException,Throwable getCause(), Returns the cause of this throwable or null if the cause is nonexistent or unknown.
android.net.IpSecManager.ResourceUnavailableException,String getLocalizedMessage(), Creates a localized description of this throwable.
android.net.IpSecManager.ResourceUnavailableException,String getMessage(), Returns the detail message string of this throwable.
android.net.IpSecManager.ResourceUnavailableException,StackTraceElement[] getStackTrace(), Provides programmatic access to the stack trace information printed by printStackTrace().
android.net.IpSecManager.ResourceUnavailableException,final Throwable[] getSuppressed()," Returns an array containing all of the exceptions that were suppressed, typically by the try-with-resources statement, in order to deliver this exception."
android.net.IpSecManager.ResourceUnavailableException,Throwable initCause(Throwable cause), Initializes the cause of this throwable to the specified value.
android.net.IpSecManager.ResourceUnavailableException,void printStackTrace(), Prints this throwable and its backtrace to the standard error stream.
android.net.IpSecManager.ResourceUnavailableException,void printStackTrace(PrintWriter s), Prints this throwable and its backtrace to the specified print writer.
android.net.IpSecManager.ResourceUnavailableException,void printStackTrace(PrintStream s), Prints this throwable and its backtrace to the specified print stream.
android.net.IpSecManager.ResourceUnavailableException,void setStackTrace(StackTraceElement[] stackTrace), Sets the stack trace elements that will be returned by getStackTrace() and printed by printStackTrace() and related methods.
android.net.IpSecManager.ResourceUnavailableException,String toString(), Returns a short description of this throwable.
android.net.IpSecManager.ResourceUnavailableException,Object clone(), Creates and returns a copy of this object.
android.net.IpSecManager.ResourceUnavailableException,boolean equals(Object obj)," Indicates whether some other object is ""equal to"" this one."
android.net.IpSecManager.ResourceUnavailableException,void finalize(), Called by the garbage collector on an object when garbage collection determines that there are no more references to the object.
android.net.IpSecManager.ResourceUnavailableException,final Class<?> getClass(), Returns the runtime class of this Object.
android.net.IpSecManager.ResourceUnavailableException,int hashCode(), Returns a hash code value for the object.
android.net.IpSecManager.ResourceUnavailableException,final void notify(), Wakes up a single thread that is waiting on this object's monitor.
android.net.IpSecManager.ResourceUnavailableException,final void notifyAll(), Wakes up all threads that are waiting on this object's monitor.
android.net.IpSecManager.ResourceUnavailableException,String toString(), Returns a string representation of the object.
android.net.IpSecManager.ResourceUnavailableException,"final void wait(long millis, int nanos)"," Causes the current thread to wait until another thread invokes the notify() method or the notifyAll() method for this object, or some other thread interrupts the current thread, or a certain amount of real time has elapsed."
android.net.IpSecManager.ResourceUnavailableException,final void wait(long millis)," Causes the current thread to wait until either another thread invokes the notify() method or the notifyAll() method for this object, or a specified amount of time has elapsed."
android.net.IpSecManager.ResourceUnavailableException,final void wait(), Causes the current thread to wait until another thread invokes the notify() method or the notifyAll() method for this object.
android.net.IpSecManager.SecurityParameterIndex,void close(), Release an SPI that was previously reserved.
android.net.IpSecManager.SecurityParameterIndex,int getSpi(), Get the underlying SPI held by this object.
android.net.IpSecManager.SpiUnavailableException,int getSpi(), Get the SPI that caused a collision.
android.net.IpSecManager,IpSecManager.SecurityParameterIndex allocateSecurityParameterIndex(InetAddress destinationAddress), Reserve a random SPI for traffic bound to or from the specified destination address.
android.net.IpSecManager,"IpSecManager.SecurityParameterIndex allocateSecurityParameterIndex(InetAddress destinationAddress, int requestedSpi)", Reserve the requested SPI for traffic bound to or from the specified destination address.
android.net.IpSecManager,"void applyTransportModeTransform(DatagramSocket socket, int direction, IpSecTransform transform)", Apply an IPsec transform to a datagram socket.
android.net.IpSecManager,"void applyTransportModeTransform(FileDescriptor socket, int direction, IpSecTransform transform)", Apply an IPsec transform to a socket.
android.net.IpSecManager,"void applyTransportModeTransform(Socket socket, int direction, IpSecTransform transform)", Apply an IPsec transform to a stream socket.
android.net.IpSecManager,IpSecManager.UdpEncapsulationSocket openUdpEncapsulationSocket(int port), Open a socket for UDP encapsulation and bind to the given port.
android.net.IpSecManager,IpSecManager.UdpEncapsulationSocket openUdpEncapsulationSocket(), Open a socket for UDP encapsulation.
android.net.IpSecManager,void removeTransportModeTransforms(FileDescriptor socket), Remove an IPsec transform from a socket.
android.net.IpSecManager,void removeTransportModeTransforms(DatagramSocket socket), Remove an IPsec transform from a datagram socket.
android.net.IpSecManager,void removeTransportModeTransforms(Socket socket), Remove an IPsec transform from a stream socket.
android.net.IpSecManager.UdpEncapsulationSocket,void close(), Close this socket.
android.net.IpSecManager.UdpEncapsulationSocket,int getPort(), Get the bound port of the wrapped socket.
android.net.IpSecManager.UdpEncapsulationSocket,FileDescriptor getSocket(), Get the wrapped socket.
android.net.IpSecTransform.Builder,"IpSecTransform buildTransportModeTransform(InetAddress sourceAddress, IpSecManager.SecurityParameterIndex spi)", Build a transport mode IpSecTransform.
android.net.IpSecTransform.Builder,IpSecTransform.Builder setAuthenticatedEncryption(IpSecAlgorithm algo), Set the authenticated encryption algorithm.
android.net.IpSecTransform.Builder,IpSecTransform.Builder setAuthentication(IpSecAlgorithm algo), Set the authentication (integrity) algorithm.
android.net.IpSecTransform.Builder,IpSecTransform.Builder setEncryption(IpSecAlgorithm algo), Set the encryption algorithm.
android.net.IpSecTransform.Builder,"IpSecTransform.Builder setIpv4Encapsulation(IpSecManager.UdpEncapsulationSocket localSocket, int remotePort)", Add UDP encapsulation to an IPv4 transform.
android.net.IpSecTransform,void close(), Deactivate this IpSecTransform and free allocated resources.
android.net.LinkAddress,int describeContents(), Implement the Parcelable interface.
android.net.LinkAddress,boolean equals(Object obj), Compares this LinkAddress instance against obj.
android.net.LinkAddress,InetAddress getAddress(), Returns the InetAddress of this LinkAddress.
android.net.LinkAddress,int getFlags(), Returns the flags of this LinkAddress.
android.net.LinkAddress,int getPrefixLength(), Returns the prefix length of this LinkAddress.
android.net.LinkAddress,int getScope(), Returns the scope of this LinkAddress.
android.net.LinkAddress,int hashCode(), Returns a hashcode for this address.
android.net.LinkAddress,String toString()," Returns a string representation of this address, such as ""192.0.2.1/24"" or ""2001:db8::1/64""."
android.net.LinkAddress,"void writeToParcel(Parcel dest, int flags)", Implement the Parcelable interface.
android.net.LinkProperties,int describeContents(), Implement the Parcelable interface
android.net.LinkProperties,boolean equals(Object obj)," Indicates whether some other object is ""equal to"" this one."
android.net.LinkProperties,List<InetAddress> getDnsServers(), Returns all the InetAddress for DNS servers on this link.
android.net.LinkProperties,String getDomains(), Get the DNS domains search path set for this link.
android.net.LinkProperties,ProxyInfo getHttpProxy(), Gets the recommended ProxyInfo (or null) set on this link.
android.net.LinkProperties,String getInterfaceName(), Gets the interface name for this link.
android.net.LinkProperties,List<LinkAddress> getLinkAddresses(), Returns all the LinkAddress on this link.
android.net.LinkProperties,String getPrivateDnsServerName(), Returns the private DNS server name that is in use.
android.net.LinkProperties,List<RouteInfo> getRoutes(), Returns all the RouteInfo set on this link.
android.net.LinkProperties,int hashCode(), Returns a hash code value for the object.
android.net.LinkProperties,boolean isPrivateDnsActive(), Returns whether private DNS is currently in use on this network.
android.net.LinkProperties,String toString(), Returns a string representation of the object.
android.net.LinkProperties,"void writeToParcel(Parcel dest, int flags)", Implement the Parcelable interface.
android.net.LocalServerSocket,LocalSocket accept(), Accepts a new connection to the socket.
android.net.LocalServerSocket,void close(), Closes server socket.
android.net.LocalServerSocket,FileDescriptor getFileDescriptor(), Returns file descriptor or null if not yet open/already closed
android.net.LocalServerSocket,LocalSocketAddress getLocalSocketAddress(), Obtains the socket's local address
android.net.LocalSocket,void bind(LocalSocketAddress bindpoint), Binds this socket to an endpoint name.
android.net.LocalSocket,void close(), Closes the socket.
android.net.LocalSocket,"void connect(LocalSocketAddress endpoint, int timeout)",
android.net.LocalSocket,void connect(LocalSocketAddress endpoint), Connects this socket to an endpoint.
android.net.LocalSocket,FileDescriptor[] getAncillaryFileDescriptors(), Retrieves a set of file descriptors that a peer has sent through an ancillary message.
android.net.LocalSocket,FileDescriptor getFileDescriptor(), Returns file descriptor or null if not yet open/already closed
android.net.LocalSocket,InputStream getInputStream(), Retrieves the input stream for this instance.
android.net.LocalSocket,LocalSocketAddress getLocalSocketAddress()," Retrieves the name that this socket is bound to, if any."
android.net.LocalSocket,OutputStream getOutputStream(), Retrieves the output stream for this instance.
android.net.LocalSocket,Credentials getPeerCredentials(), Retrieves the credentials of this socket's peer.
android.net.LocalSocket,int getReceiveBufferSize(),
android.net.LocalSocket,LocalSocketAddress getRemoteSocketAddress(),
android.net.LocalSocket,int getSendBufferSize(),
android.net.LocalSocket,int getSoTimeout(),
android.net.LocalSocket,boolean isBound(),
android.net.LocalSocket,boolean isClosed(),
android.net.LocalSocket,boolean isConnected(),
android.net.LocalSocket,boolean isInputShutdown(),
android.net.LocalSocket,boolean isOutputShutdown(),
android.net.LocalSocket,void setFileDescriptorsForSend(FileDescriptor[] fds), Enqueues a set of file descriptors to send to the peer.
android.net.LocalSocket,void setReceiveBufferSize(int size),
android.net.LocalSocket,void setSendBufferSize(int n),
android.net.LocalSocket,void setSoTimeout(int n),
android.net.LocalSocket,void shutdownInput(), Shuts down the input side of the socket.
android.net.LocalSocket,void shutdownOutput(), Shuts down the output side of the socket.
android.net.LocalSocket,String toString(), Returns a string representation of the object.
android.net.LocalSocketAddress.Namespace,static LocalSocketAddress.Namespace valueOf(String name),
android.net.LocalSocketAddress.Namespace,static final Namespace[] values(),
android.net.LocalSocketAddress,String getName(), Retrieves the string name of this address
android.net.LocalSocketAddress,LocalSocketAddress.Namespace getNamespace(), Returns the namespace used by this address.
android.net.MacAddress,int describeContents(), Describe the kinds of special objects contained in this Parcelable instance's marshaled representation.
android.net.MacAddress,boolean equals(Object o)," Indicates whether some other object is ""equal to"" this one."
android.net.MacAddress,static MacAddress fromBytes(byte[] addr), Creates a MacAddress from the given byte array representation.
android.net.MacAddress,static MacAddress fromString(String addr), Creates a MacAddress from the given String representation.
android.net.MacAddress,int getAddressType(), Returns the type of this address.
android.net.MacAddress,int hashCode(), Returns a hash code value for the object.
android.net.MacAddress,boolean isLocallyAssigned(),
android.net.MacAddress,byte[] toByteArray(),
android.net.MacAddress,String toOuiString(),
android.net.MacAddress,String toString(), Returns a string representation of the object.
android.net.MacAddress,"void writeToParcel(Parcel out, int flags)", Flatten this object in to a Parcel.
android.net.MailTo,String getBody(), Retrieve the body line from the parsed mailto URL.
android.net.MailTo,String getCc(), Retrieve the CC address line from the parsed mailto URL.
android.net.MailTo,"Map<String,String> getHeaders()", Retrieve all the parsed email headers from the mailto URL
android.net.MailTo,String getSubject(), Retrieve the subject line from the parsed mailto URL.
android.net.MailTo,String getTo(), Retrieve the To address line from the parsed mailto URL.
android.net.MailTo,static boolean isMailTo(String url), Test to see if the given string is a mailto URL
android.net.MailTo,static MailTo parse(String url), Parse and decode a mailto scheme string.
android.net.MailTo,String toString(), Returns a string representation of the object.
android.net.Network,void bindSocket(DatagramSocket socket), Binds the specified DatagramSocket to this Network.
android.net.Network,void bindSocket(Socket socket), Binds the specified Socket to this Network.
android.net.Network,void bindSocket(FileDescriptor fd), Binds the specified FileDescriptor to this Network.
android.net.Network,int describeContents(), Describe the kinds of special objects contained in this Parcelable instance's marshaled representation.
android.net.Network,boolean equals(Object obj)," Indicates whether some other object is ""equal to"" this one."
android.net.Network,InetAddress[] getAllByName(String host), Operates the same as InetAddress.getAllByName except that host resolution is done on this network.
android.net.Network,InetAddress getByName(String host), Operates the same as InetAddress.getByName except that host resolution is done on this network.
android.net.Network,long getNetworkHandle()," Returns a handle representing this Network, for use with the NDK API."
android.net.Network,SocketFactory getSocketFactory(), Returns a SocketFactory bound to this network.
android.net.Network,int hashCode(), Returns a hash code value for the object.
android.net.Network,URLConnection openConnection(URL url)," Opens the specified URL on this Network, such that all traffic will be sent on this Network."
android.net.Network,"URLConnection openConnection(URL url, Proxy proxy)"," Opens the specified URL on this Network, such that all traffic will be sent on this Network."
android.net.Network,String toString(), Returns a string representation of the object.
android.net.Network,"void writeToParcel(Parcel dest, int flags)", Flatten this object in to a Parcel.
android.net.NetworkCapabilities,int describeContents(), Describe the kinds of special objects contained in this Parcelable instance's marshaled representation.
android.net.NetworkCapabilities,boolean equals(Object obj)," Indicates whether some other object is ""equal to"" this one."
android.net.NetworkCapabilities,int getLinkDownstreamBandwidthKbps(), Retrieves the downstream bandwidth for this network in Kbps.
android.net.NetworkCapabilities,int getLinkUpstreamBandwidthKbps(), Retrieves the upstream bandwidth for this network in Kbps.
android.net.NetworkCapabilities,boolean hasCapability(int capability), Tests for the presence of a capabilitity on this instance.
android.net.NetworkCapabilities,boolean hasTransport(int transportType), Tests for the presence of a transport on this instance.
android.net.NetworkCapabilities,int hashCode(), Returns a hash code value for the object.
android.net.NetworkCapabilities,String toString(), Returns a string representation of the object.
android.net.NetworkCapabilities,"void writeToParcel(Parcel dest, int flags)", Flatten this object in to a Parcel.
android.net.NetworkInfo.DetailedState,static NetworkInfo.DetailedState valueOf(String name),
android.net.NetworkInfo.DetailedState,static final DetailedState[] values(),
android.net.NetworkInfo.State,static NetworkInfo.State valueOf(String name),
android.net.NetworkInfo.State,static final State[] values(),
android.net.NetworkInfo,int describeContents(), Describe the kinds of special objects contained in this Parcelable instance's marshaled representation.
android.net.NetworkInfo,NetworkInfo.DetailedState getDetailedState(), Reports the current fine-grained state of the network.
android.net.NetworkInfo,String getExtraInfo()," Report the extra information about the network state, if any was provided by the lower networking layers."
android.net.NetworkInfo,String getReason()," Report the reason an attempt to establish connectivity failed, if one is available."
android.net.NetworkInfo,NetworkInfo.State getState(), Reports the current coarse-grained state of the network.
android.net.NetworkInfo,int getSubtype(), Return a network-type-specific integer describing the subtype of the network.
android.net.NetworkInfo,String getSubtypeName(), Return a human-readable name describing the subtype of the network.
android.net.NetworkInfo,int getType(), Reports the type of network to which the info in this NetworkInfo pertains.
android.net.NetworkInfo,String getTypeName()," Return a human-readable name describe the type of the network, for example ""WIFI"" or ""MOBILE""."
android.net.NetworkInfo,boolean isAvailable(), Indicates whether network connectivity is possible.
android.net.NetworkInfo,boolean isConnected(), Indicates whether network connectivity exists and it is possible to establish connections and pass data.
android.net.NetworkInfo,boolean isConnectedOrConnecting(), Indicates whether network connectivity exists or is in the process of being established.
android.net.NetworkInfo,boolean isFailover(), Indicates whether the current attempt to connect to the network resulted from the ConnectivityManager trying to fail over to this network following a disconnect from another network.
android.net.NetworkInfo,boolean isRoaming()," This method was deprecated in API level P. Callers should switch to checking NET_CAPABILITY_NOT_ROAMING instead, since that handles more complex situations, such as VPNs."
android.net.NetworkInfo,String toString(), Returns a string representation of the object.
android.net.NetworkInfo,"void writeToParcel(Parcel dest, int flags)", Flatten this object in to a Parcel.
android.net.NetworkRequest.Builder,NetworkRequest.Builder addCapability(int capability), Add the given capability requirement to this builder.
android.net.NetworkRequest.Builder,NetworkRequest.Builder addTransportType(int transportType), Adds the given transport requirement to this builder.
android.net.NetworkRequest.Builder,NetworkRequest build(), Build NetworkRequest give the current set of capabilities.
android.net.NetworkRequest.Builder,NetworkRequest.Builder removeCapability(int capability), Removes (if found) the given capability from this builder instance.
android.net.NetworkRequest.Builder,NetworkRequest.Builder removeTransportType(int transportType), Removes (if found) the given transport from this builder instance.
android.net.NetworkRequest.Builder,NetworkRequest.Builder setNetworkSpecifier(NetworkSpecifier networkSpecifier), Sets the optional bearer specific network specifier.
android.net.NetworkRequest.Builder,NetworkRequest.Builder setNetworkSpecifier(String networkSpecifier), Sets the optional bearer specific network specifier.
android.net.NetworkRequest,int describeContents(), Describe the kinds of special objects contained in this Parcelable instance's marshaled representation.
android.net.NetworkRequest,boolean equals(Object obj)," Indicates whether some other object is ""equal to"" this one."
android.net.NetworkRequest,int hashCode(), Returns a hash code value for the object.
android.net.NetworkRequest,String toString(), Returns a string representation of the object.
android.net.NetworkRequest,"void writeToParcel(Parcel dest, int flags)", Flatten this object in to a Parcel.
android.net.NetworkSpecifier,Object clone(), Creates and returns a copy of this object.
android.net.NetworkSpecifier,boolean equals(Object obj)," Indicates whether some other object is ""equal to"" this one."
android.net.NetworkSpecifier,void finalize(), Called by the garbage collector on an object when garbage collection determines that there are no more references to the object.
android.net.NetworkSpecifier,final Class<?> getClass(), Returns the runtime class of this Object.
android.net.NetworkSpecifier,int hashCode(), Returns a hash code value for the object.
android.net.NetworkSpecifier,final void notify(), Wakes up a single thread that is waiting on this object's monitor.
android.net.NetworkSpecifier,final void notifyAll(), Wakes up all threads that are waiting on this object's monitor.
android.net.NetworkSpecifier,String toString(), Returns a string representation of the object.
android.net.NetworkSpecifier,"final void wait(long millis, int nanos)"," Causes the current thread to wait until another thread invokes the notify() method or the notifyAll() method for this object, or some other thread interrupts the current thread, or a certain amount of real time has elapsed."
android.net.NetworkSpecifier,final void wait(long millis)," Causes the current thread to wait until either another thread invokes the notify() method or the notifyAll() method for this object, or a specified amount of time has elapsed."
android.net.NetworkSpecifier,final void wait(), Causes the current thread to wait until another thread invokes the notify() method or the notifyAll() method for this object.
android.net.nsd.NsdManager.DiscoveryListener,abstract void onDiscoveryStarted(String serviceType),
android.net.nsd.NsdManager.DiscoveryListener,abstract void onDiscoveryStopped(String serviceType),
android.net.nsd.NsdManager.DiscoveryListener,abstract void onServiceFound(NsdServiceInfo serviceInfo),
android.net.nsd.NsdManager.DiscoveryListener,abstract void onServiceLost(NsdServiceInfo serviceInfo),
android.net.nsd.NsdManager.DiscoveryListener,"abstract void onStartDiscoveryFailed(String serviceType, int errorCode)",
android.net.nsd.NsdManager.DiscoveryListener,"abstract void onStopDiscoveryFailed(String serviceType, int errorCode)",
android.net.nsd.NsdManager.RegistrationListener,"abstract void onRegistrationFailed(NsdServiceInfo serviceInfo, int errorCode)",
android.net.nsd.NsdManager.RegistrationListener,abstract void onServiceRegistered(NsdServiceInfo serviceInfo),
android.net.nsd.NsdManager.RegistrationListener,abstract void onServiceUnregistered(NsdServiceInfo serviceInfo),
android.net.nsd.NsdManager.RegistrationListener,"abstract void onUnregistrationFailed(NsdServiceInfo serviceInfo, int errorCode)",
android.net.nsd.NsdManager.ResolveListener,"abstract void onResolveFailed(NsdServiceInfo serviceInfo, int errorCode)",
android.net.nsd.NsdManager.ResolveListener,abstract void onServiceResolved(NsdServiceInfo serviceInfo),
android.net.nsd.NsdManager,"void discoverServices(String serviceType, int protocolType, NsdManager.DiscoveryListener listener)", Initiate service discovery to browse for instances of a service type.
android.net.nsd.NsdManager,"void registerService(NsdServiceInfo serviceInfo, int protocolType, NsdManager.RegistrationListener listener)", Register a service to be discovered by other services.
android.net.nsd.NsdManager,"void resolveService(NsdServiceInfo serviceInfo, NsdManager.ResolveListener listener)", Resolve a discovered service.
android.net.nsd.NsdManager,void stopServiceDiscovery(NsdManager.DiscoveryListener listener)," Stop service discovery initiated with discoverServices(String, int, NsdManager.DiscoveryListener)."
android.net.nsd.NsdManager,void unregisterService(NsdManager.RegistrationListener listener)," Unregister a service registered through registerService(NsdServiceInfo, int, NsdManager.RegistrationListener)."
android.net.nsd.NsdServiceInfo,int describeContents(), Implement the Parcelable interface
android.net.nsd.NsdServiceInfo,"Map<String,byte[]> getAttributes()", Retrieve attributes as a map of String keys to byte[] values.
android.net.nsd.NsdServiceInfo,InetAddress getHost(), Get the host address.
android.net.nsd.NsdServiceInfo,int getPort(), Get port number.
android.net.nsd.NsdServiceInfo,String getServiceName(), Get the service name
android.net.nsd.NsdServiceInfo,String getServiceType(), Get the service type
android.net.nsd.NsdServiceInfo,void removeAttribute(String key), Remove an attribute by key
android.net.nsd.NsdServiceInfo,"void setAttribute(String key, String value)", Add a service attribute as a key/value pair.
android.net.nsd.NsdServiceInfo,void setHost(InetAddress s), Set the host address
android.net.nsd.NsdServiceInfo,void setPort(int p), Set port number
android.net.nsd.NsdServiceInfo,void setServiceName(String s), Set the service name
android.net.nsd.NsdServiceInfo,void setServiceType(String s), Set the service type
android.net.nsd.NsdServiceInfo,String toString(), Returns a string representation of the object.
android.net.nsd.NsdServiceInfo,"void writeToParcel(Parcel dest, int flags)", Implement the Parcelable interface
android.net.ParseException,final void addSuppressed(Throwable exception), Appends the specified exception to the exceptions that were suppressed in order to deliver this exception.
android.net.ParseException,Throwable fillInStackTrace(), Fills in the execution stack trace.
android.net.ParseException,Throwable getCause(), Returns the cause of this throwable or null if the cause is nonexistent or unknown.
android.net.ParseException,String getLocalizedMessage(), Creates a localized description of this throwable.
android.net.ParseException,String getMessage(), Returns the detail message string of this throwable.
android.net.ParseException,StackTraceElement[] getStackTrace(), Provides programmatic access to the stack trace information printed by printStackTrace().
android.net.ParseException,final Throwable[] getSuppressed()," Returns an array containing all of the exceptions that were suppressed, typically by the try-with-resources statement, in order to deliver this exception."
android.net.ParseException,Throwable initCause(Throwable cause), Initializes the cause of this throwable to the specified value.
android.net.ParseException,void printStackTrace(), Prints this throwable and its backtrace to the standard error stream.
android.net.ParseException,void printStackTrace(PrintWriter s), Prints this throwable and its backtrace to the specified print writer.
android.net.ParseException,void printStackTrace(PrintStream s), Prints this throwable and its backtrace to the specified print stream.
android.net.ParseException,void setStackTrace(StackTraceElement[] stackTrace), Sets the stack trace elements that will be returned by getStackTrace() and printed by printStackTrace() and related methods.
android.net.ParseException,String toString(), Returns a short description of this throwable.
android.net.ParseException,Object clone(), Creates and returns a copy of this object.
android.net.ParseException,boolean equals(Object obj)," Indicates whether some other object is ""equal to"" this one."
android.net.ParseException,void finalize(), Called by the garbage collector on an object when garbage collection determines that there are no more references to the object.
android.net.ParseException,final Class<?> getClass(), Returns the runtime class of this Object.
android.net.ParseException,int hashCode(), Returns a hash code value for the object.
android.net.ParseException,final void notify(), Wakes up a single thread that is waiting on this object's monitor.
android.net.ParseException,final void notifyAll(), Wakes up all threads that are waiting on this object's monitor.
android.net.ParseException,String toString(), Returns a string representation of the object.
android.net.ParseException,"final void wait(long millis, int nanos)"," Causes the current thread to wait until another thread invokes the notify() method or the notifyAll() method for this object, or some other thread interrupts the current thread, or a certain amount of real time has elapsed."
android.net.ParseException,final void wait(long millis)," Causes the current thread to wait until either another thread invokes the notify() method or the notifyAll() method for this object, or a specified amount of time has elapsed."
android.net.ParseException,final void wait(), Causes the current thread to wait until another thread invokes the notify() method or the notifyAll() method for this object.
android.net.Proxy,static String getDefaultHost()," This method was deprecated in API level 11. Use standard java vm proxy values to find the host, port and exclusion list. This call ignores the exclusion list and no longer reports only mobile-data apn-based proxy values."
android.net.Proxy,static int getDefaultPort()," This method was deprecated in API level 11. Use standard java vm proxy values to find the host, port and exclusion list. This call ignores the exclusion list and no longer reports only mobile-data apn-based proxy values."
android.net.Proxy,static String getHost(Context ctx)," This method was deprecated in API level 11. Use standard java vm proxy values to find the host, port and exclusion list. This call ignores the exclusion list."
android.net.Proxy,static int getPort(Context ctx)," This method was deprecated in API level 11. Use standard java vm proxy values to find the host, port and exclusion list. This call ignores the exclusion list."
android.net.ProxyInfo,"static ProxyInfo buildDirectProxy(String host, int port, List<String> exclList)", Constructs a ProxyInfo object that points at a Direct proxy on the specified host and port.
android.net.ProxyInfo,"static ProxyInfo buildDirectProxy(String host, int port)", Constructs a ProxyInfo object that points at a Direct proxy on the specified host and port.
android.net.ProxyInfo,static ProxyInfo buildPacProxy(Uri pacUri), Construct a ProxyInfo that will download and run the PAC script at the specified URL.
android.net.ProxyInfo,boolean equals(Object o)," Indicates whether some other object is ""equal to"" this one."
android.net.ProxyInfo,String[] getExclusionList(), When configured to use a Direct Proxy this returns the list of hosts for which the proxy is ignored.
android.net.ProxyInfo,String getHost(), When configured to use a Direct Proxy this returns the host of the proxy.
android.net.ProxyInfo,Uri getPacFileUrl(), Returns the URL of the current PAC script or null if there is no PAC script.
android.net.ProxyInfo,int getPort(), When configured to use a Direct Proxy this returns the port of the proxy
android.net.ProxyInfo,int hashCode(), Returns a hash code value for the object.
android.net.ProxyInfo,String toString(), Returns a string representation of the object.
android.net.RouteInfo,int describeContents(), Implement the Parcelable interface
android.net.RouteInfo,boolean equals(Object obj), Compares this RouteInfo object against the specified object and indicates if they are equal.
android.net.RouteInfo,IpPrefix getDestination(), Retrieves the destination address and prefix length in the form of an IpPrefix.
android.net.RouteInfo,InetAddress getGateway(), Retrieves the gateway or next hop InetAddress for this route.
android.net.RouteInfo,String getInterface()," Retrieves the interface used for this route if specified, else null."
android.net.RouteInfo,int hashCode(), Returns a hashcode for this RouteInfo object.
android.net.RouteInfo,boolean isDefaultRoute()," Indicates if this route is a default route (ie, has no destination specified)."
android.net.RouteInfo,boolean matches(InetAddress destination), Determines whether the destination and prefix of this route includes the specified address.
android.net.RouteInfo,String toString(), Returns a human-readable description of this object.
android.net.RouteInfo,"void writeToParcel(Parcel dest, int flags)", Implement the Parcelable interface
android.net.rtp.AudioCodec,"static AudioCodec getCodec(int type, String rtpmap, String fmtp)", Creates an AudioCodec according to the given configuration.
android.net.rtp.AudioCodec,static AudioCodec[] getCodecs(), Returns system supported audio codecs.
android.net.rtp.AudioGroup,void clear(), Removes every AudioStream in this group.
android.net.rtp.AudioGroup,int getMode(), Returns the current mode.
android.net.rtp.AudioGroup,AudioStream[] getStreams(), Returns the AudioStreams in this group.
android.net.rtp.AudioGroup,void sendDtmf(int event), Sends a DTMF digit to every AudioStream in this group.
android.net.rtp.AudioGroup,void setMode(int mode), Changes the current mode.
android.net.rtp.AudioStream,AudioCodec getCodec()," Returns the AudioCodec, or null if it is not set."
android.net.rtp.AudioStream,int getDtmfType()," Returns the RTP payload type for dual-tone multi-frequency (DTMF) digits, or -1 if it is not enabled."
android.net.rtp.AudioStream,AudioGroup getGroup(), Returns the joined AudioGroup.
android.net.rtp.AudioStream,final boolean isBusy(), Returns true if the stream has already joined an AudioGroup.
android.net.rtp.AudioStream,void join(AudioGroup group), Joins an AudioGroup.
android.net.rtp.AudioStream,void setCodec(AudioCodec codec), Sets the AudioCodec.
android.net.rtp.AudioStream,void setDtmfType(int type), Sets the RTP payload type for dual-tone multi-frequency (DTMF) digits.
android.net.rtp.RtpStream,"void associate(InetAddress address, int port)", Associates with a remote host.
android.net.rtp.RtpStream,InetAddress getLocalAddress(), Returns the network address of the local host.
android.net.rtp.RtpStream,int getLocalPort(), Returns the network port of the local host.
android.net.rtp.RtpStream,int getMode(), Returns the current mode.
android.net.rtp.RtpStream,InetAddress getRemoteAddress(), Returns the network address of the remote host or null if the stream is not associated.
android.net.rtp.RtpStream,int getRemotePort(), Returns the network port of the remote host or -1 if the stream is not associated.
android.net.rtp.RtpStream,boolean isBusy(), Returns true if the stream is busy.
android.net.rtp.RtpStream,void release(), Releases allocated resources.
android.net.rtp.RtpStream,void setMode(int mode), Changes the current mode.
android.net.sip.SipAudioCall.Listener,void onCallBusy(SipAudioCall call), Called when the peer is busy during session initialization.
android.net.sip.SipAudioCall.Listener,void onCallEnded(SipAudioCall call), Called when the session is terminated.
android.net.sip.SipAudioCall.Listener,void onCallEstablished(SipAudioCall call), Called when the session is established.
android.net.sip.SipAudioCall.Listener,void onCallHeld(SipAudioCall call), Called when the call is on hold.
android.net.sip.SipAudioCall.Listener,void onCalling(SipAudioCall call), Called when a request is sent out to initiate a new call.
android.net.sip.SipAudioCall.Listener,void onChanged(SipAudioCall call), Called when an event occurs and the corresponding callback is not overridden.
android.net.sip.SipAudioCall.Listener,"void onError(SipAudioCall call, int errorCode, String errorMessage)", Called when an error occurs.
android.net.sip.SipAudioCall.Listener,void onReadyToCall(SipAudioCall call), Called when the call object is ready to make another call.
android.net.sip.SipAudioCall.Listener,"void onRinging(SipAudioCall call, SipProfile caller)", Called when a new call comes in.
android.net.sip.SipAudioCall.Listener,void onRingingBack(SipAudioCall call), Called when a RINGING response is received for the INVITE request sent.
android.net.sip.SipAudioCall,void answerCall(int timeout), Answers a call.
android.net.sip.SipAudioCall,"void attachCall(SipSession session, String sessionDescription)", Attaches an incoming call to this call object.
android.net.sip.SipAudioCall,void close(), Closes this object.
android.net.sip.SipAudioCall,void continueCall(int timeout), Continues a call that's on hold.
android.net.sip.SipAudioCall,void endCall(), Ends a call.
android.net.sip.SipAudioCall,SipProfile getLocalProfile(), Gets the local SIP profile.
android.net.sip.SipAudioCall,SipProfile getPeerProfile(), Gets the peer's SIP profile.
android.net.sip.SipAudioCall,int getState(), Gets the state of the SipSession that carries this call.
android.net.sip.SipAudioCall,void holdCall(int timeout), Puts a call on hold.
android.net.sip.SipAudioCall,boolean isInCall(), Checks if the call is established.
android.net.sip.SipAudioCall,boolean isMuted(), Checks if the call is muted.
android.net.sip.SipAudioCall,boolean isOnHold(), Checks if the call is on hold.
android.net.sip.SipAudioCall,"void makeCall(SipProfile peerProfile, SipSession sipSession, int timeout)", Initiates an audio call to the specified profile.
android.net.sip.SipAudioCall,void sendDtmf(int code), Sends a DTMF code.
android.net.sip.SipAudioCall,"void sendDtmf(int code, Message result)", Sends a DTMF code.
android.net.sip.SipAudioCall,"void setListener(SipAudioCall.Listener listener, boolean callbackImmediately)", Sets the listener to listen to the audio call events.
android.net.sip.SipAudioCall,void setListener(SipAudioCall.Listener listener), Sets the listener to listen to the audio call events.
android.net.sip.SipAudioCall,void setSpeakerMode(boolean speakerMode), Puts the device to speaker mode.
android.net.sip.SipAudioCall,void startAudio(), Starts the audio for the established call.
android.net.sip.SipAudioCall,void toggleMute(), Toggles mute.
android.net.sip.SipErrorCode,static String toString(int errorCode),
android.net.sip.SipException,final void addSuppressed(Throwable exception), Appends the specified exception to the exceptions that were suppressed in order to deliver this exception.
android.net.sip.SipException,Throwable fillInStackTrace(), Fills in the execution stack trace.
android.net.sip.SipException,Throwable getCause(), Returns the cause of this throwable or null if the cause is nonexistent or unknown.
android.net.sip.SipException,String getLocalizedMessage(), Creates a localized description of this throwable.
android.net.sip.SipException,String getMessage(), Returns the detail message string of this throwable.
android.net.sip.SipException,StackTraceElement[] getStackTrace(), Provides programmatic access to the stack trace information printed by printStackTrace().
android.net.sip.SipException,final Throwable[] getSuppressed()," Returns an array containing all of the exceptions that were suppressed, typically by the try-with-resources statement, in order to deliver this exception."
android.net.sip.SipException,Throwable initCause(Throwable cause), Initializes the cause of this throwable to the specified value.
android.net.sip.SipException,void printStackTrace(), Prints this throwable and its backtrace to the standard error stream.
android.net.sip.SipException,void printStackTrace(PrintWriter s), Prints this throwable and its backtrace to the specified print writer.
android.net.sip.SipException,void printStackTrace(PrintStream s), Prints this throwable and its backtrace to the specified print stream.
android.net.sip.SipException,void setStackTrace(StackTraceElement[] stackTrace), Sets the stack trace elements that will be returned by getStackTrace() and printed by printStackTrace() and related methods.
android.net.sip.SipException,String toString(), Returns a short description of this throwable.
android.net.sip.SipException,Object clone(), Creates and returns a copy of this object.
android.net.sip.SipException,boolean equals(Object obj)," Indicates whether some other object is ""equal to"" this one."
android.net.sip.SipException,void finalize(), Called by the garbage collector on an object when garbage collection determines that there are no more references to the object.
android.net.sip.SipException,final Class<?> getClass(), Returns the runtime class of this Object.
android.net.sip.SipException,int hashCode(), Returns a hash code value for the object.
android.net.sip.SipException,final void notify(), Wakes up a single thread that is waiting on this object's monitor.
android.net.sip.SipException,final void notifyAll(), Wakes up all threads that are waiting on this object's monitor.
android.net.sip.SipException,String toString(), Returns a string representation of the object.
android.net.sip.SipException,"final void wait(long millis, int nanos)"," Causes the current thread to wait until another thread invokes the notify() method or the notifyAll() method for this object, or some other thread interrupts the current thread, or a certain amount of real time has elapsed."
android.net.sip.SipException,final void wait(long millis)," Causes the current thread to wait until either another thread invokes the notify() method or the notifyAll() method for this object, or a specified amount of time has elapsed."
android.net.sip.SipException,final void wait(), Causes the current thread to wait until another thread invokes the notify() method or the notifyAll() method for this object.
android.net.sip.SipManager,void close(String localProfileUri), Closes the specified profile to not make/receive calls.
android.net.sip.SipManager,"SipSession createSipSession(SipProfile localProfile, SipSession.Listener listener)", Creates a SipSession with the specified profile.
android.net.sip.SipManager,static String getCallId(Intent incomingCallIntent), Gets the call ID from the specified incoming call broadcast intent.
android.net.sip.SipManager,static String getOfferSessionDescription(Intent incomingCallIntent), Gets the offer session description from the specified incoming call broadcast intent.
android.net.sip.SipManager,SipSession getSessionFor(Intent incomingCallIntent), Gets the SipSession that handles the incoming call.
android.net.sip.SipManager,static boolean isApiSupported(Context context), Returns true if the SIP API is supported by the system.
android.net.sip.SipManager,static boolean isIncomingCallIntent(Intent intent), Checks if the intent is an incoming call broadcast intent.
android.net.sip.SipManager,boolean isOpened(String localProfileUri), Checks if the specified profile is opened in the SIP service for making and/or receiving calls.
android.net.sip.SipManager,boolean isRegistered(String localProfileUri), Checks if the SIP service has successfully registered the profile to the SIP provider (specified in the profile) for receiving calls.
android.net.sip.SipManager,static boolean isSipWifiOnly(Context context), Returns true if SIP is only available on WIFI.
android.net.sip.SipManager,static boolean isVoipSupported(Context context), Returns true if the system supports SIP-based VOIP API.
android.net.sip.SipManager,"SipAudioCall makeAudioCall(String localProfileUri, String peerProfileUri, SipAudioCall.Listener listener, int timeout)", Creates a SipAudioCall to make an audio call.
android.net.sip.SipManager,"SipAudioCall makeAudioCall(SipProfile localProfile, SipProfile peerProfile, SipAudioCall.Listener listener, int timeout)", Creates a SipAudioCall to make a call.
android.net.sip.SipManager,static SipManager newInstance(Context context), Creates a manager instance.
android.net.sip.SipManager,"void open(SipProfile localProfile, PendingIntent incomingCallPendingIntent, SipRegistrationListener listener)", Opens the profile for making calls and/or receiving generic SIP calls.
android.net.sip.SipManager,void open(SipProfile localProfile), Opens the profile for making generic SIP calls.
android.net.sip.SipManager,"void register(SipProfile localProfile, int expiryTime, SipRegistrationListener listener)", Manually registers the profile to the corresponding SIP provider for receiving calls.
android.net.sip.SipManager,"void setRegistrationListener(String localProfileUri, SipRegistrationListener listener)", Sets the listener to listen to registration events.
android.net.sip.SipManager,"SipAudioCall takeAudioCall(Intent incomingCallIntent, SipAudioCall.Listener listener)", Creates a SipAudioCall to take an incoming call.
android.net.sip.SipManager,"void unregister(SipProfile localProfile, SipRegistrationListener listener)", Manually unregisters the profile from the corresponding SIP provider for stop receiving further calls.
android.net.sip.SipProfile.Builder,SipProfile build(), Builds and returns the SIP profile object.
android.net.sip.SipProfile.Builder,SipProfile.Builder setAuthUserName(String name), Sets the username used for authentication.
android.net.sip.SipProfile.Builder,SipProfile.Builder setAutoRegistration(boolean flag), Sets the auto.
android.net.sip.SipProfile.Builder,SipProfile.Builder setDisplayName(String displayName), Sets the display name of the user.
android.net.sip.SipProfile.Builder,SipProfile.Builder setOutboundProxy(String outboundProxy), Sets the outbound proxy of the SIP server.
android.net.sip.SipProfile.Builder,SipProfile.Builder setPassword(String password), Sets the password of the SIP account
android.net.sip.SipProfile.Builder,SipProfile.Builder setPort(int port), Sets the port number of the server.
android.net.sip.SipProfile.Builder,SipProfile.Builder setProfileName(String name), Sets the name of the profile.
android.net.sip.SipProfile.Builder,SipProfile.Builder setProtocol(String protocol), Sets the protocol used to connect to the SIP server.
android.net.sip.SipProfile.Builder,SipProfile.Builder setSendKeepAlive(boolean flag), Sets the send keep-alive flag.
android.net.sip.SipProfile,int describeContents(), Describe the kinds of special objects contained in this Parcelable instance's marshaled representation.
android.net.sip.SipProfile,String getAuthUserName(), Gets the username for authentication.
android.net.sip.SipProfile,boolean getAutoRegistration(), Gets the flag of 'Auto Registration'.
android.net.sip.SipProfile,String getDisplayName(), Gets the display name of the user.
android.net.sip.SipProfile,String getPassword(), Gets the password.
android.net.sip.SipProfile,int getPort(), Gets the port number of the SIP server.
android.net.sip.SipProfile,String getProfileName(), Gets the (user-defined) name of the profile.
android.net.sip.SipProfile,String getProtocol(), Gets the protocol used to connect to the server.
android.net.sip.SipProfile,String getProxyAddress(), Gets the network address of the server outbound proxy.
android.net.sip.SipProfile,boolean getSendKeepAlive(), Gets the flag of 'Sending keep-alive'.
android.net.sip.SipProfile,String getSipDomain(), Gets the SIP domain.
android.net.sip.SipProfile,String getUriString(), Gets the SIP URI string of this profile.
android.net.sip.SipProfile,String getUserName(), Gets the username.
android.net.sip.SipProfile,"void writeToParcel(Parcel out, int flags)", Flatten this object in to a Parcel.
android.net.sip.SipRegistrationListener,abstract void onRegistering(String localProfileUri), Called when a registration request is sent.
android.net.sip.SipRegistrationListener,"abstract void onRegistrationDone(String localProfileUri, long expiryTime)", Called when the registration succeeded.
android.net.sip.SipRegistrationListener,"abstract void onRegistrationFailed(String localProfileUri, int errorCode, String errorMessage)", Called when the registration failed.
android.net.sip.SipSession.Listener,void onCallBusy(SipSession session), Called when the peer is busy during session initialization.
android.net.sip.SipSession.Listener,"void onCallChangeFailed(SipSession session, int errorCode, String errorMessage)", Called when an error occurs during session modification negotiation.
android.net.sip.SipSession.Listener,void onCallEnded(SipSession session), Called when the session is terminated.
android.net.sip.SipSession.Listener,"void onCallEstablished(SipSession session, String sessionDescription)", Called when the session is established.
android.net.sip.SipSession.Listener,void onCalling(SipSession session), Called when an INVITE request is sent to initiate a new call.
android.net.sip.SipSession.Listener,"void onError(SipSession session, int errorCode, String errorMessage)", Called when an error occurs during session initialization and termination.
android.net.sip.SipSession.Listener,void onRegistering(SipSession session), Called when a registration request is sent.
android.net.sip.SipSession.Listener,"void onRegistrationDone(SipSession session, int duration)", Called when registration is successfully done.
android.net.sip.SipSession.Listener,"void onRegistrationFailed(SipSession session, int errorCode, String errorMessage)", Called when the registration fails.
android.net.sip.SipSession.Listener,void onRegistrationTimeout(SipSession session), Called when the registration gets timed out.
android.net.sip.SipSession.Listener,"void onRinging(SipSession session, SipProfile caller, String sessionDescription)", Called when an INVITE request is received.
android.net.sip.SipSession.Listener,void onRingingBack(SipSession session), Called when a RINGING response is received for the INVITE request sent
android.net.sip.SipSession.State,static String toString(int state), Converts the state to string.
android.net.sip.SipSession,"void answerCall(String sessionDescription, int timeout)", Answers an incoming call with the specified session description.
android.net.sip.SipSession,"void changeCall(String sessionDescription, int timeout)", Changes the session description during a call.
android.net.sip.SipSession,void endCall()," Ends an established call, terminates an outgoing call or rejects an incoming call."
android.net.sip.SipSession,String getCallId(), Gets the call ID of the session.
android.net.sip.SipSession,String getLocalIp(), Gets the IP address of the local host on which this SIP session runs.
android.net.sip.SipSession,SipProfile getLocalProfile(), Gets the SIP profile that this session is associated with.
android.net.sip.SipSession,SipProfile getPeerProfile(), Gets the SIP profile that this session is connected to.
android.net.sip.SipSession,int getState(), Gets the session state.
android.net.sip.SipSession,boolean isInCall(), Checks if the session is in a call.
android.net.sip.SipSession,"void makeCall(SipProfile callee, String sessionDescription, int timeout)", Initiates a call to the specified profile.
android.net.sip.SipSession,void register(int duration), Performs registration to the server specified by the associated local profile.
android.net.sip.SipSession,void setListener(SipSession.Listener listener), Sets the listener to listen to the session events.
android.net.sip.SipSession,void unregister(), Performs unregistration to the server specified by the associated local profile.
android.net.SSLCertificateSocketFactory,"Socket createSocket(String host, int port)"," Creates a socket and connects it to the specified remote host at the specified remote port. This method verifies the peer's certificate hostname after connecting (unless created with getInsecure(int, SSLSessionCache))."
android.net.SSLCertificateSocketFactory,"Socket createSocket(Socket k, String host, int port, boolean close)"," Returns a socket layered over an existing socket connected to the named host, at the given port. This method verifies the peer's certificate hostname after connecting (unless created with getInsecure(int, SSLSessionCache))."
android.net.SSLCertificateSocketFactory,Socket createSocket(), Creates a new socket which is not connected to any remote host.
android.net.SSLCertificateSocketFactory,"Socket createSocket(InetAddress addr, int port, InetAddress localAddr, int localPort)", Creates a socket and connect it to the specified remote address on the specified remote port. Warning: Hostname verification is not performed with this method.
android.net.SSLCertificateSocketFactory,"Socket createSocket(InetAddress addr, int port)", Creates a socket and connects it to the specified port number at the specified address. Warning: Hostname verification is not performed with this method.
android.net.SSLCertificateSocketFactory,"Socket createSocket(String host, int port, InetAddress localAddr, int localPort)"," Creates a socket and connects it to the specified remote host on the specified remote port. This method verifies the peer's certificate hostname after connecting (unless created with getInsecure(int, SSLSessionCache))."
android.net.SSLCertificateSocketFactory,static SocketFactory getDefault(int handshakeTimeoutMillis), Returns a new socket factory instance with an optional handshake timeout.
android.net.SSLCertificateSocketFactory,"static SSLSocketFactory getDefault(int handshakeTimeoutMillis, SSLSessionCache cache)", Returns a new socket factory instance with an optional handshake timeout and SSL session cache.
android.net.SSLCertificateSocketFactory,String[] getDefaultCipherSuites(), Returns the list of cipher suites which are enabled by default.
android.net.SSLCertificateSocketFactory,"static SSLSocketFactory getInsecure(int handshakeTimeoutMillis, SSLSessionCache cache)"," Returns a new instance of a socket factory with all SSL security checks disabled, using an optional handshake timeout and SSL session cache."
android.net.SSLCertificateSocketFactory,byte[] getNpnSelectedProtocol(Socket socket)," Returns the Next Protocol Negotiation (NPN) protocol selected by client and server, or null if no protocol was negotiated."
android.net.SSLCertificateSocketFactory,String[] getSupportedCipherSuites(), Returns the names of the cipher suites which could be enabled for use on an SSL connection.
android.net.SSLCertificateSocketFactory,"void setHostname(Socket socket, String hostName)", Turns on Server Name Indication (SNI) on a given socket.
android.net.SSLCertificateSocketFactory,void setKeyManagers(KeyManager[] keyManagers), Sets the KeyManagers to be used for connections made by this factory.
android.net.SSLCertificateSocketFactory,void setNpnProtocols(byte[][] npnProtocols), Sets the Next Protocol Negotiation (NPN) protocols that this peer is interested in.
android.net.SSLCertificateSocketFactory,void setTrustManagers(TrustManager[] trustManager), Sets the TrustManagers to be used for connections made by this factory.
android.net.SSLCertificateSocketFactory,"void setUseSessionTickets(Socket socket, boolean useSessionTickets)", Enables session ticket support on the given socket.
android.net.SSLSessionCache,Object clone(), Creates and returns a copy of this object.
android.net.SSLSessionCache,boolean equals(Object obj)," Indicates whether some other object is ""equal to"" this one."
android.net.SSLSessionCache,void finalize(), Called by the garbage collector on an object when garbage collection determines that there are no more references to the object.
android.net.SSLSessionCache,final Class<?> getClass(), Returns the runtime class of this Object.
android.net.SSLSessionCache,int hashCode(), Returns a hash code value for the object.
android.net.SSLSessionCache,final void notify(), Wakes up a single thread that is waiting on this object's monitor.
android.net.SSLSessionCache,final void notifyAll(), Wakes up all threads that are waiting on this object's monitor.
android.net.SSLSessionCache,String toString(), Returns a string representation of the object.
android.net.SSLSessionCache,"final void wait(long millis, int nanos)"," Causes the current thread to wait until another thread invokes the notify() method or the notifyAll() method for this object, or some other thread interrupts the current thread, or a certain amount of real time has elapsed."
android.net.SSLSessionCache,final void wait(long millis)," Causes the current thread to wait until either another thread invokes the notify() method or the notifyAll() method for this object, or a specified amount of time has elapsed."
android.net.SSLSessionCache,final void wait(), Causes the current thread to wait until another thread invokes the notify() method or the notifyAll() method for this object.
android.net.TrafficStats,static void clearThreadStatsTag(), Clear any active tag set to account Socket traffic originating from the current thread.
android.net.TrafficStats,static void clearThreadStatsUid(), Clear any active UID set to account Socket traffic originating from the current thread.
android.net.TrafficStats,static int getAndSetThreadStatsTag(int tag), Set active tag to use when accounting Socket traffic originating from the current thread.
android.net.TrafficStats,static long getMobileRxBytes(), Return number of bytes received across mobile networks since device boot.
android.net.TrafficStats,static long getMobileRxPackets(), Return number of packets received across mobile networks since device boot.
android.net.TrafficStats,static long getMobileTxBytes(), Return number of bytes transmitted across mobile networks since device boot.
android.net.TrafficStats,static long getMobileTxPackets(), Return number of packets transmitted across mobile networks since device boot.
android.net.TrafficStats,static int getThreadStatsTag(), Get the active tag used when accounting Socket traffic originating from the current thread.
android.net.TrafficStats,static long getTotalRxBytes(), Return number of bytes received since device boot.
android.net.TrafficStats,static long getTotalRxPackets(), Return number of packets received since device boot.
android.net.TrafficStats,static long getTotalTxBytes(), Return number of bytes transmitted since device boot.
android.net.TrafficStats,static long getTotalTxPackets(), Return number of packets transmitted since device boot.
android.net.TrafficStats,static long getUidRxBytes(int uid), Return number of bytes received by the given UID since device boot.
android.net.TrafficStats,static long getUidRxPackets(int uid), Return number of packets received by the given UID since device boot.
android.net.TrafficStats,static long getUidTcpRxBytes(int uid)," This method was deprecated in API level 18. Starting in JELLY_BEAN_MR2, transport layer statistics are no longer available, and will always return UNSUPPORTED."
android.net.TrafficStats,static long getUidTcpRxSegments(int uid)," This method was deprecated in API level 18. Starting in JELLY_BEAN_MR2, transport layer statistics are no longer available, and will always return UNSUPPORTED."
android.net.TrafficStats,static long getUidTcpTxBytes(int uid)," This method was deprecated in API level 18. Starting in JELLY_BEAN_MR2, transport layer statistics are no longer available, and will always return UNSUPPORTED."
android.net.TrafficStats,static long getUidTcpTxSegments(int uid)," This method was deprecated in API level 18. Starting in JELLY_BEAN_MR2, transport layer statistics are no longer available, and will always return UNSUPPORTED."
android.net.TrafficStats,static long getUidTxBytes(int uid), Return number of bytes transmitted by the given UID since device boot.
android.net.TrafficStats,static long getUidTxPackets(int uid), Return number of packets transmitted by the given UID since device boot.
android.net.TrafficStats,static long getUidUdpRxBytes(int uid)," This method was deprecated in API level 18. Starting in JELLY_BEAN_MR2, transport layer statistics are no longer available, and will always return UNSUPPORTED."
android.net.TrafficStats,static long getUidUdpRxPackets(int uid)," This method was deprecated in API level 18. Starting in JELLY_BEAN_MR2, transport layer statistics are no longer available, and will always return UNSUPPORTED."
android.net.TrafficStats,static long getUidUdpTxBytes(int uid)," This method was deprecated in API level 18. Starting in JELLY_BEAN_MR2, transport layer statistics are no longer available, and will always return UNSUPPORTED."
android.net.TrafficStats,static long getUidUdpTxPackets(int uid)," This method was deprecated in API level 18. Starting in JELLY_BEAN_MR2, transport layer statistics are no longer available, and will always return UNSUPPORTED."
android.net.TrafficStats,static void incrementOperationCount(int operationCount), Increment count of network operations performed under the accounting tag currently active on the calling thread.
android.net.TrafficStats,"static void incrementOperationCount(int tag, int operationCount)", Increment count of network operations performed under the given accounting tag.
android.net.TrafficStats,static void setThreadStatsTag(int tag), Set active tag to use when accounting Socket traffic originating from the current thread.
android.net.TrafficStats,static void setThreadStatsUidSelf(), Set specific UID to use when accounting Socket traffic originating from the current thread as the calling UID.
android.net.TrafficStats,static void tagDatagramSocket(DatagramSocket socket), Tag the given DatagramSocket with any statistics parameters active for the current thread.
android.net.TrafficStats,static void tagFileDescriptor(FileDescriptor fd), Tag the given FileDescriptor socket with any statistics parameters active for the current thread.
android.net.TrafficStats,static void tagSocket(Socket socket), Tag the given Socket with any statistics parameters active for the current thread.
android.net.TrafficStats,static void untagDatagramSocket(DatagramSocket socket), Remove any statistics parameters from the given DatagramSocket.
android.net.TrafficStats,static void untagFileDescriptor(FileDescriptor fd), Remove any statistics parameters from the given FileDescriptor socket.
android.net.TrafficStats,static void untagSocket(Socket socket), Remove any statistics parameters from the given Socket.
android.net.Uri.Builder,Uri.Builder appendEncodedPath(String newSegment), Appends the given segment to the path.
android.net.Uri.Builder,Uri.Builder appendPath(String newSegment), Encodes the given segment and appends it to the path.
android.net.Uri.Builder,"Uri.Builder appendQueryParameter(String key, String value)", Encodes the key and value and then appends the parameter to the query string.
android.net.Uri.Builder,Uri.Builder authority(String authority), Encodes and sets the authority.
android.net.Uri.Builder,Uri build(), Constructs a Uri with the current attributes.
android.net.Uri.Builder,Uri.Builder clearQuery(), Clears the the previously set query.
android.net.Uri.Builder,Uri.Builder encodedAuthority(String authority), Sets the previously encoded authority.
android.net.Uri.Builder,Uri.Builder encodedFragment(String fragment), Sets the previously encoded fragment.
android.net.Uri.Builder,Uri.Builder encodedOpaquePart(String opaquePart), Sets the previously encoded opaque scheme-specific-part.
android.net.Uri.Builder,Uri.Builder encodedPath(String path), Sets the previously encoded path.
android.net.Uri.Builder,Uri.Builder encodedQuery(String query), Sets the previously encoded query.
android.net.Uri.Builder,Uri.Builder fragment(String fragment), Encodes and sets the fragment.
android.net.Uri.Builder,Uri.Builder opaquePart(String opaquePart), Encodes and sets the given opaque scheme-specific-part.
android.net.Uri.Builder,Uri.Builder path(String path), Sets the path.
android.net.Uri.Builder,Uri.Builder query(String query), Encodes and sets the query.
android.net.Uri.Builder,Uri.Builder scheme(String scheme), Sets the scheme.
android.net.Uri.Builder,String toString(), Returns a string representation of the object.
android.net.Uri,abstract Uri.Builder buildUpon()," Constructs a new builder, copying the attributes from this Uri."
android.net.Uri,int compareTo(Uri other), Compares the string representation of this Uri with that of another.
android.net.Uri,static String decode(String s), Decodes '%'-escaped octets in the given string using the UTF-8 scheme.
android.net.Uri,"static String encode(String s, String allow)", Encodes characters in the given string as '%'-escaped octets using the UTF-8 scheme.
android.net.Uri,static String encode(String s), Encodes characters in the given string as '%'-escaped octets using the UTF-8 scheme.
android.net.Uri,boolean equals(Object o), Compares this Uri to another object for equality.
android.net.Uri,static Uri fromFile(File file), Creates a Uri from a file.
android.net.Uri,"static Uri fromParts(String scheme, String ssp, String fragment)", Creates an opaque Uri from the given components.
android.net.Uri,abstract String getAuthority(), Gets the decoded authority part of this URI.
android.net.Uri,"boolean getBooleanQueryParameter(String key, boolean defaultValue)", Searches the query string for the first value with the given key and interprets it as a boolean value.
android.net.Uri,abstract String getEncodedAuthority(), Gets the encoded authority part of this URI.
android.net.Uri,abstract String getEncodedFragment()," Gets the encoded fragment part of this URI, everything after the '#'."
android.net.Uri,abstract String getEncodedPath(), Gets the encoded path.
android.net.Uri,abstract String getEncodedQuery(), Gets the encoded query component from this URI.
android.net.Uri,abstract String getEncodedSchemeSpecificPart()," Gets the scheme-specific part of this URI, i.e.everything between the scheme separator ':' and the fragment separator '#'."
android.net.Uri,abstract String getEncodedUserInfo(), Gets the encoded user information from the authority.
android.net.Uri,abstract String getFragment()," Gets the decoded fragment part of this URI, everything after the '#'."
android.net.Uri,abstract String getHost(), Gets the encoded host from the authority for this URI.
android.net.Uri,abstract String getLastPathSegment(), Gets the decoded last segment in the path.
android.net.Uri,abstract String getPath(), Gets the decoded path.
android.net.Uri,abstract List<String> getPathSegments(), Gets the decoded path segments.
android.net.Uri,abstract int getPort(), Gets the port from the authority for this URI.
android.net.Uri,abstract String getQuery(), Gets the decoded query component from this URI.
android.net.Uri,String getQueryParameter(String key), Searches the query string for the first value with the given key.
android.net.Uri,Set<String> getQueryParameterNames(), Returns a set of the unique names of all query parameters.
android.net.Uri,List<String> getQueryParameters(String key), Searches the query string for parameter values with the given key.
android.net.Uri,abstract String getScheme(), Gets the scheme of this URI.
android.net.Uri,abstract String getSchemeSpecificPart()," Gets the scheme-specific part of this URI, i.e.everything between the scheme separator ':' and the fragment separator '#'."
android.net.Uri,abstract String getUserInfo(), Gets the decoded user information from the authority.
android.net.Uri,int hashCode(), Hashes the encoded string represention of this Uri consistently with equals(Object).
android.net.Uri,boolean isAbsolute()," Returns true if this URI is absolute, i.e.if it contains an explicit scheme."
android.net.Uri,abstract boolean isHierarchical()," Returns true if this URI is hierarchical like ""http://google.com""."
android.net.Uri,boolean isOpaque()," Returns true if this URI is opaque like ""mailto:nobody@google.com""."
android.net.Uri,abstract boolean isRelative()," Returns true if this URI is relative, i.e.if it doesn't contain an explicit scheme."
android.net.Uri,Uri normalizeScheme(), Return an equivalent URI with a lowercase scheme component.
android.net.Uri,static Uri parse(String uriString), Creates a Uri which parses the given encoded URI string.
android.net.Uri,abstract String toString(), Returns the encoded string representation of this URI.
android.net.Uri,"static Uri withAppendedPath(Uri baseUri, String pathSegment)", Creates a new Uri by appending an already-encoded path segment to a base Uri.
android.net.Uri,"static void writeToParcel(Parcel out, Uri uri)", Writes a Uri to a Parcel.
android.net.UrlQuerySanitizer.IllegalCharacterValueSanitizer,String sanitize(String value), Sanitize a value.
android.net.UrlQuerySanitizer.ParameterValuePair,Object clone(), Creates and returns a copy of this object.
android.net.UrlQuerySanitizer.ParameterValuePair,boolean equals(Object obj)," Indicates whether some other object is ""equal to"" this one."
android.net.UrlQuerySanitizer.ParameterValuePair,void finalize(), Called by the garbage collector on an object when garbage collection determines that there are no more references to the object.
android.net.UrlQuerySanitizer.ParameterValuePair,final Class<?> getClass(), Returns the runtime class of this Object.
android.net.UrlQuerySanitizer.ParameterValuePair,int hashCode(), Returns a hash code value for the object.
android.net.UrlQuerySanitizer.ParameterValuePair,final void notify(), Wakes up a single thread that is waiting on this object's monitor.
android.net.UrlQuerySanitizer.ParameterValuePair,final void notifyAll(), Wakes up all threads that are waiting on this object's monitor.
android.net.UrlQuerySanitizer.ParameterValuePair,String toString(), Returns a string representation of the object.
android.net.UrlQuerySanitizer.ParameterValuePair,"final void wait(long millis, int nanos)"," Causes the current thread to wait until another thread invokes the notify() method or the notifyAll() method for this object, or some other thread interrupts the current thread, or a certain amount of real time has elapsed."
android.net.UrlQuerySanitizer.ParameterValuePair,final void wait(long millis)," Causes the current thread to wait until either another thread invokes the notify() method or the notifyAll() method for this object, or a specified amount of time has elapsed."
android.net.UrlQuerySanitizer.ParameterValuePair,final void wait(), Causes the current thread to wait until another thread invokes the notify() method or the notifyAll() method for this object.
android.net.UrlQuerySanitizer,static final UrlQuerySanitizer.ValueSanitizer getAllButNulAndAngleBracketsLegal(), Return a value sanitizer that allows any special characters except angle brackets ('<' and '>') and Nul ('\0').
android.net.UrlQuerySanitizer,static final UrlQuerySanitizer.ValueSanitizer getAllButNulLegal(), Return a value sanitizer that allows everything except Nul ('\0') characters.
android.net.UrlQuerySanitizer,static final UrlQuerySanitizer.ValueSanitizer getAllButWhitespaceLegal()," Return a value sanitizer that allows everything except Nul ('\0') characters, space (' '), and other whitespace characters."
android.net.UrlQuerySanitizer,static final UrlQuerySanitizer.ValueSanitizer getAllIllegal()," Return a value sanitizer that does not allow any special characters, and also does not allow script URLs."
android.net.UrlQuerySanitizer,boolean getAllowUnregisteredParamaters(), Get whether or not unregistered parameters are allowed.
android.net.UrlQuerySanitizer,static final UrlQuerySanitizer.ValueSanitizer getAmpAndSpaceLegal(), Return a value sanitizer that does not allow any special characters except ampersand ('&') and space (' ').
android.net.UrlQuerySanitizer,static final UrlQuerySanitizer.ValueSanitizer getAmpLegal(), Return a value sanitizer that does not allow any special characters except ampersand ('&').
android.net.UrlQuerySanitizer,UrlQuerySanitizer.ValueSanitizer getEffectiveValueSanitizer(String parameter), Get the effective value sanitizer for a parameter.
android.net.UrlQuerySanitizer,List<UrlQuerySanitizer.ParameterValuePair> getParameterList()," An array list of all of the parameter value pairs in the sanitized query, in the order they appeared in the query."
android.net.UrlQuerySanitizer,Set<String> getParameterSet(), Get a set of all of the parameters found in the sanitized query.
android.net.UrlQuerySanitizer,boolean getPreferFirstRepeatedParameter(), Get whether or not the first occurrence of a repeated parameter is preferred.
android.net.UrlQuerySanitizer,static final UrlQuerySanitizer.ValueSanitizer getSpaceLegal(), Return a value sanitizer that does not allow any special characters except space (' ').
android.net.UrlQuerySanitizer,UrlQuerySanitizer.ValueSanitizer getUnregisteredParameterValueSanitizer(), Get the current value sanitizer used when processing unregistered parameter values.
android.net.UrlQuerySanitizer,static final UrlQuerySanitizer.ValueSanitizer getUrlAndSpaceLegal()," Return a value sanitizer that allows all the characters used by encoded URLs and allows spaces, which are not technically legal in encoded URLs, but commonly appear anyway."
android.net.UrlQuerySanitizer,static final UrlQuerySanitizer.ValueSanitizer getUrlLegal(), Return a value sanitizer that allows all the characters used by encoded URLs.
android.net.UrlQuerySanitizer,String getValue(String parameter), Get the value for a parameter in the current sanitized query.
android.net.UrlQuerySanitizer,UrlQuerySanitizer.ValueSanitizer getValueSanitizer(String parameter), Get the value sanitizer for a parameter.
android.net.UrlQuerySanitizer,boolean hasParameter(String parameter), Check if a parameter exists in the current sanitized query.
android.net.UrlQuerySanitizer,void parseQuery(String query), Parse a query.
android.net.UrlQuerySanitizer,void parseUrl(String url), Parse the query parameters out of an encoded URL.
android.net.UrlQuerySanitizer,"void registerParameter(String parameter, UrlQuerySanitizer.ValueSanitizer valueSanitizer)", Register a value sanitizer for a particular parameter.
android.net.UrlQuerySanitizer,"void registerParameters(String[] parameters, UrlQuerySanitizer.ValueSanitizer valueSanitizer)", Register a value sanitizer for an array of parameters.
android.net.UrlQuerySanitizer,void setAllowUnregisteredParamaters(boolean allowUnregisteredParamaters), Set whether or not unregistered parameters are allowed.
android.net.UrlQuerySanitizer,void setPreferFirstRepeatedParameter(boolean preferFirstRepeatedParameter), Set whether or not the first occurrence of a repeated parameter is preferred.
android.net.UrlQuerySanitizer,void setUnregisteredParameterValueSanitizer(UrlQuerySanitizer.ValueSanitizer sanitizer), Set the value sanitizer used when processing unregistered parameter values.
android.net.UrlQuerySanitizer,String unescape(String string), Unescape an escaped string.
android.net.UrlQuerySanitizer.ValueSanitizer,abstract String sanitize(String value), Sanitize an unencoded value.
android.net.VpnService.Builder,"VpnService.Builder addAddress(InetAddress address, int prefixLength)", Add a network address to the VPN interface.
android.net.VpnService.Builder,"VpnService.Builder addAddress(String address, int prefixLength)", Convenience method to add a network address to the VPN interface using a numeric address string.
android.net.VpnService.Builder,VpnService.Builder addAllowedApplication(String packageName), Adds an application that's allowed to access the VPN connection.
android.net.VpnService.Builder,VpnService.Builder addDisallowedApplication(String packageName), Adds an application that's denied access to the VPN connection.
android.net.VpnService.Builder,VpnService.Builder addDnsServer(String address), Convenience method to add a DNS server to the VPN connection using a numeric address string.
android.net.VpnService.Builder,VpnService.Builder addDnsServer(InetAddress address), Add a DNS server to the VPN connection.
android.net.VpnService.Builder,"VpnService.Builder addRoute(InetAddress address, int prefixLength)", Add a network route to the VPN interface.
android.net.VpnService.Builder,"VpnService.Builder addRoute(String address, int prefixLength)", Convenience method to add a network route to the VPN interface using a numeric address string.
android.net.VpnService.Builder,VpnService.Builder addSearchDomain(String domain), Add a search domain to the DNS resolver.
android.net.VpnService.Builder,VpnService.Builder allowBypass(), Allows all apps to bypass this VPN connection.
android.net.VpnService.Builder,VpnService.Builder allowFamily(int family), Allows traffic from the specified address family.
android.net.VpnService.Builder,ParcelFileDescriptor establish(), Create a VPN interface using the parameters supplied to this builder.
android.net.VpnService.Builder,VpnService.Builder setBlocking(boolean blocking), Sets the VPN interface's file descriptor to be in blocking/non-blocking mode.
android.net.VpnService.Builder,VpnService.Builder setConfigureIntent(PendingIntent intent), Set the PendingIntent to an activity for users to configure the VPN connection.
android.net.VpnService.Builder,VpnService.Builder setMtu(int mtu), Set the maximum transmission unit (MTU) of the VPN interface.
android.net.VpnService.Builder,VpnService.Builder setSession(String session), Set the name of this session.
android.net.VpnService.Builder,VpnService.Builder setUnderlyingNetworks(Network[] networks), Sets the underlying networks used by the VPN for its upstream connections.
android.net.VpnService,IBinder onBind(Intent intent), Return the communication interface to the service.
android.net.VpnService,void onRevoke(), Invoked when the application is revoked.
android.net.VpnService,static Intent prepare(Context context), Prepare to establish a VPN connection.
android.net.VpnService,boolean protect(Socket socket), Convenience method to protect a Socket from VPN connections.
android.net.VpnService,boolean protect(int socket), Protect a socket from VPN connections.
android.net.VpnService,boolean protect(DatagramSocket socket), Convenience method to protect a DatagramSocket from VPN connections.
android.net.VpnService,boolean setUnderlyingNetworks(Network[] networks), Sets the underlying networks used by the VPN for its upstream connections.
android.net.wifi.aware.AttachCallback,void onAttachFailed()," Called when Aware attach operation attach(AttachCallback, android.os.Handler) failed."
android.net.wifi.aware.AttachCallback,void onAttached(WifiAwareSession session)," Called when Aware attach operation attach(AttachCallback, android.os.Handler) is completed and that we can now start discovery sessions or connections."
android.net.wifi.aware.Characteristics,int describeContents(), Describe the kinds of special objects contained in this Parcelable instance's marshaled representation.
android.net.wifi.aware.Characteristics,int getMaxMatchFilterLength(), Returns the maximum length of byte array that can be used to specify a Aware match filter.
android.net.wifi.aware.Characteristics,int getMaxServiceNameLength(), Returns the maximum string length that can be used to specify a Aware service name.
android.net.wifi.aware.Characteristics,int getMaxServiceSpecificInfoLength(), Returns the maximum length of byte array that can be used to specify a Aware service specific information field: the arbitrary load used in discovery or the message length of Aware message exchange.
android.net.wifi.aware.Characteristics,"void writeToParcel(Parcel dest, int flags)", Flatten this object in to a Parcel.
android.net.wifi.aware.DiscoverySession,void close()," Destroy the publish or subscribe session - free any resources, and stop transmitting packets on-air (for an active session) or listening for matches (for a passive session)."
android.net.wifi.aware.DiscoverySession,NetworkSpecifier createNetworkSpecifierOpen(PeerHandle peerHandle), Create a setNetworkSpecifier(NetworkSpecifier) for an unencrypted WiFi Aware connection (link) to the specified peer.
android.net.wifi.aware.DiscoverySession,"NetworkSpecifier createNetworkSpecifierPassphrase(PeerHandle peerHandle, String passphrase)", Create a setNetworkSpecifier(NetworkSpecifier) for an encrypted WiFi Aware connection (link) to the specified peer.
android.net.wifi.aware.DiscoverySession,"void sendMessage(PeerHandle peerHandle, int messageId, byte[] message)", Sends a message to the specified destination.
android.net.wifi.aware.DiscoverySessionCallback,"void onMessageReceived(PeerHandle peerHandle, byte[] message)"," Called when a message is received from a discovery session peer - in response to the peer's sendMessage(PeerHandle, int, byte[])."
android.net.wifi.aware.DiscoverySessionCallback,void onMessageSendFailed(int messageId)," Called when message transmission initiated with sendMessage(PeerHandle, int, byte[]) fails."
android.net.wifi.aware.DiscoverySessionCallback,void onMessageSendSucceeded(int messageId)," Called in response to sendMessage(PeerHandle, int, byte[]) when a message is transmitted successfully - i.e."
android.net.wifi.aware.DiscoverySessionCallback,void onPublishStarted(PublishDiscoverySession session)," Called when a publish operation is started successfully in response to a publish(PublishConfig, DiscoverySessionCallback, android.os.Handler) operation."
android.net.wifi.aware.DiscoverySessionCallback,"void onServiceDiscovered(PeerHandle peerHandle, byte[] serviceSpecificInfo, List<byte[]> matchFilter)", Called when a discovery (publish or subscribe) operation results in a service discovery.
android.net.wifi.aware.DiscoverySessionCallback,"void onServiceDiscoveredWithinRange(PeerHandle peerHandle, byte[] serviceSpecificInfo, List<byte[]> matchFilter, int distanceMm)", Called when a discovery (publish or subscribe) operation results in a service discovery.
android.net.wifi.aware.DiscoverySessionCallback,void onSessionConfigFailed()," Called when a publish or subscribe discovery session cannot be created: publish(PublishConfig, DiscoverySessionCallback, android.os.Handler) or subscribe(SubscribeConfig, DiscoverySessionCallback, android.os.Handler), or when a configuration update fails: updatePublish(PublishConfig) or updateSubscribe(SubscribeConfig)."
android.net.wifi.aware.DiscoverySessionCallback,void onSessionConfigUpdated(), Called when a publish or subscribe discovery session configuration update request succeeds.
android.net.wifi.aware.DiscoverySessionCallback,void onSessionTerminated(), Called when a discovery session (publish or subscribe) terminates.
android.net.wifi.aware.DiscoverySessionCallback,void onSubscribeStarted(SubscribeDiscoverySession session)," Called when a subscribe operation is started successfully in response to a subscribe(SubscribeConfig, DiscoverySessionCallback, android.os.Handler) operation."
android.net.wifi.aware.IdentityChangedListener,void onIdentityChanged(byte[] mac),
android.net.wifi.aware.PeerHandle,boolean equals(Object o)," Indicates whether some other object is ""equal to"" this one."
android.net.wifi.aware.PeerHandle,int hashCode(), Returns a hash code value for the object.
android.net.wifi.aware.PublishConfig.Builder,PublishConfig build(), Build PublishConfig given the current requests made on the builder.
android.net.wifi.aware.PublishConfig.Builder,PublishConfig.Builder setMatchFilter(List<byte[]> matchFilter), The match filter for a publish session.
android.net.wifi.aware.PublishConfig.Builder,PublishConfig.Builder setPublishType(int publishType)," Specify the type of the publish session: solicited (aka active - publish packets are transmitted over-the-air), or unsolicited (aka passive - no publish packets are transmitted, a match is made against an active subscribe session whose packets are transmitted over-the-air)."
android.net.wifi.aware.PublishConfig.Builder,PublishConfig.Builder setRangingEnabled(boolean enable), Configure whether the publish discovery session supports ranging and allows peers to measure distance to it.
android.net.wifi.aware.PublishConfig.Builder,PublishConfig.Builder setServiceName(String serviceName), Specify the service name of the publish session.
android.net.wifi.aware.PublishConfig.Builder,PublishConfig.Builder setServiceSpecificInfo(byte[] serviceSpecificInfo), Specify service specific information for the publish session.
android.net.wifi.aware.PublishConfig.Builder,PublishConfig.Builder setTerminateNotificationEnabled(boolean enable), Configure whether a publish terminate notification onSessionTerminated() is reported back to the callback.
android.net.wifi.aware.PublishConfig.Builder,PublishConfig.Builder setTtlSec(int ttlSec), Sets the time interval (in seconds) an unsolicited ( setPublishType(int)) publish session will be alive - broadcasting a packet.
android.net.wifi.aware.PublishConfig,int describeContents(), Describe the kinds of special objects contained in this Parcelable instance's marshaled representation.
android.net.wifi.aware.PublishConfig,boolean equals(Object o)," Indicates whether some other object is ""equal to"" this one."
android.net.wifi.aware.PublishConfig,int hashCode(), Returns a hash code value for the object.
android.net.wifi.aware.PublishConfig,String toString(), Returns a string representation of the object.
android.net.wifi.aware.PublishConfig,"void writeToParcel(Parcel dest, int flags)", Flatten this object in to a Parcel.
android.net.wifi.aware.PublishDiscoverySession,void updatePublish(PublishConfig publishConfig), Re-configure the currently active publish session.
android.net.wifi.aware.SubscribeConfig.Builder,SubscribeConfig build(), Build SubscribeConfig given the current requests made on the builder.
android.net.wifi.aware.SubscribeConfig.Builder,SubscribeConfig.Builder setMatchFilter(List<byte[]> matchFilter), The match filter for a subscribe session.
android.net.wifi.aware.SubscribeConfig.Builder,SubscribeConfig.Builder setMaxDistanceMm(int maxDistanceMm), Configure the maximum distance to a discovered publisher at which to trigger a discovery notification.
android.net.wifi.aware.SubscribeConfig.Builder,SubscribeConfig.Builder setMinDistanceMm(int minDistanceMm), Configure the minimum distance to a discovered publisher at which to trigger a discovery notification.
android.net.wifi.aware.SubscribeConfig.Builder,SubscribeConfig.Builder setServiceName(String serviceName), Specify the service name of the subscribe session.
android.net.wifi.aware.SubscribeConfig.Builder,SubscribeConfig.Builder setServiceSpecificInfo(byte[] serviceSpecificInfo), Specify service specific information for the subscribe session.
android.net.wifi.aware.SubscribeConfig.Builder,SubscribeConfig.Builder setSubscribeType(int subscribeType)," Sets the type of the subscribe session: active (subscribe packets are transmitted over-the-air), or passive (no subscribe packets are transmitted, a match is made against a solicited/active publish session whose packets are transmitted over-the-air)."
android.net.wifi.aware.SubscribeConfig.Builder,SubscribeConfig.Builder setTerminateNotificationEnabled(boolean enable), Configure whether a subscribe terminate notification onSessionTerminated() is reported back to the callback.
android.net.wifi.aware.SubscribeConfig.Builder,SubscribeConfig.Builder setTtlSec(int ttlSec), Sets the time interval (in seconds) an active ( setSubscribeType(int)) subscribe session will be alive - i.e.
android.net.wifi.aware.SubscribeConfig,int describeContents(), Describe the kinds of special objects contained in this Parcelable instance's marshaled representation.
android.net.wifi.aware.SubscribeConfig,boolean equals(Object o)," Indicates whether some other object is ""equal to"" this one."
android.net.wifi.aware.SubscribeConfig,int hashCode(), Returns a hash code value for the object.
android.net.wifi.aware.SubscribeConfig,String toString(), Returns a string representation of the object.
android.net.wifi.aware.SubscribeConfig,"void writeToParcel(Parcel dest, int flags)", Flatten this object in to a Parcel.
android.net.wifi.aware.SubscribeDiscoverySession,void updateSubscribe(SubscribeConfig subscribeConfig), Re-configure the currently active subscribe session.
android.net.wifi.aware.WifiAwareManager,"void attach(AttachCallback attachCallback, Handler handler)", Attach to the Wi-Fi Aware service - enabling the application to create discovery sessions or create connections to peers.
android.net.wifi.aware.WifiAwareManager,"void attach(AttachCallback attachCallback, IdentityChangedListener identityChangedListener, Handler handler)", Attach to the Wi-Fi Aware service - enabling the application to create discovery sessions or create connections to peers.
android.net.wifi.aware.WifiAwareManager,Characteristics getCharacteristics()," Returns the characteristics of the Wi-Fi Aware interface: a set of parameters which specify limitations on configurations, e.g."
android.net.wifi.aware.WifiAwareManager,boolean isAvailable(), Returns the current status of Aware API: whether or not Aware is available.
android.net.wifi.aware.WifiAwareSession,void close()," Destroy the Wi-Fi Aware service session and, if no other applications are attached to Aware, also disable Aware."
android.net.wifi.aware.WifiAwareSession,"NetworkSpecifier createNetworkSpecifierOpen(int role, byte[] peer)", Create a setNetworkSpecifier(NetworkSpecifier) for an unencrypted WiFi Aware connection (link) to the specified peer.
android.net.wifi.aware.WifiAwareSession,"NetworkSpecifier createNetworkSpecifierPassphrase(int role, byte[] peer, String passphrase)", Create a setNetworkSpecifier(NetworkSpecifier) for an encrypted WiFi Aware connection (link) to the specified peer.
android.net.wifi.aware.WifiAwareSession,"void publish(PublishConfig publishConfig, DiscoverySessionCallback callback, Handler handler)"," Issue a request to the Aware service to create a new Aware publish discovery session, using the specified publishConfig configuration."
android.net.wifi.aware.WifiAwareSession,"void subscribe(SubscribeConfig subscribeConfig, DiscoverySessionCallback callback, Handler handler)"," Issue a request to the Aware service to create a new Aware subscribe discovery session, using the specified subscribeConfig configuration."
android.net.wifi.hotspot2.ConfigParser,"static PasspointConfiguration parsePasspointConfig(String mimeType, byte[] data)", Parse the Hotspot 2.0 Release 1 configuration data into a PasspointConfiguration object.
android.net.wifi.hotspot2.omadm.PpsMoParser,static PasspointConfiguration parseMoText(String xmlString), Convert a XML string representation of a PPS MO (PerProviderSubscription Management Object) tree to a PasspointConfiguration object.
android.net.wifi.hotspot2.PasspointConfiguration,int describeContents(), Describe the kinds of special objects contained in this Parcelable instance's marshaled representation.
android.net.wifi.hotspot2.PasspointConfiguration,boolean equals(Object thatObject)," Indicates whether some other object is ""equal to"" this one."
android.net.wifi.hotspot2.PasspointConfiguration,Credential getCredential(), Get the credential information.
android.net.wifi.hotspot2.PasspointConfiguration,HomeSp getHomeSp(), Get the Home SP (Service Provider) information.
android.net.wifi.hotspot2.PasspointConfiguration,int hashCode(), Returns a hash code value for the object.
android.net.wifi.hotspot2.PasspointConfiguration,void setCredential(Credential credential), Set the credential information.
android.net.wifi.hotspot2.PasspointConfiguration,void setHomeSp(HomeSp homeSp), Set the Home SP (Service Provider) information.
android.net.wifi.hotspot2.PasspointConfiguration,String toString(), Returns a string representation of the object.
android.net.wifi.hotspot2.PasspointConfiguration,"void writeToParcel(Parcel dest, int flags)", Flatten this object in to a Parcel.
android.net.wifi.hotspot2.pps.Credential.CertificateCredential,int describeContents(), Describe the kinds of special objects contained in this Parcelable instance's marshaled representation.
android.net.wifi.hotspot2.pps.Credential.CertificateCredential,boolean equals(Object thatObject)," Indicates whether some other object is ""equal to"" this one."
android.net.wifi.hotspot2.pps.Credential.CertificateCredential,byte[] getCertSha256Fingerprint(), Get the certificate SHA-256 fingerprint associated with this certificate credential.
android.net.wifi.hotspot2.pps.Credential.CertificateCredential,String getCertType(), Get the certificate type associated with this certificate credential.
android.net.wifi.hotspot2.pps.Credential.CertificateCredential,int hashCode(), Returns a hash code value for the object.
android.net.wifi.hotspot2.pps.Credential.CertificateCredential,void setCertSha256Fingerprint(byte[] certSha256Fingerprint), Set the certificate SHA-256 fingerprint associated with this certificate credential.
android.net.wifi.hotspot2.pps.Credential.CertificateCredential,void setCertType(String certType), Set the certificate type associated with this certificate credential.
android.net.wifi.hotspot2.pps.Credential.CertificateCredential,String toString(), Returns a string representation of the object.
android.net.wifi.hotspot2.pps.Credential.CertificateCredential,"void writeToParcel(Parcel dest, int flags)", Flatten this object in to a Parcel.
android.net.wifi.hotspot2.pps.Credential.SimCredential,int describeContents(), Describe the kinds of special objects contained in this Parcelable instance's marshaled representation.
android.net.wifi.hotspot2.pps.Credential.SimCredential,boolean equals(Object thatObject)," Indicates whether some other object is ""equal to"" this one."
android.net.wifi.hotspot2.pps.Credential.SimCredential,int getEapType(), Get the EAP (Extensible Authentication Protocol) method type associated with this SIM credential.
android.net.wifi.hotspot2.pps.Credential.SimCredential,String getImsi(), Get the IMSI (International Mobile Subscriber Identity) associated with this SIM credential.
android.net.wifi.hotspot2.pps.Credential.SimCredential,int hashCode(), Returns a hash code value for the object.
android.net.wifi.hotspot2.pps.Credential.SimCredential,void setEapType(int eapType), Set the EAP (Extensible Authentication Protocol) method type associated with this SIM credential.
android.net.wifi.hotspot2.pps.Credential.SimCredential,void setImsi(String imsi), Set the IMSI (International Mobile Subscriber Identity) associated with this SIM credential.
android.net.wifi.hotspot2.pps.Credential.SimCredential,String toString(), Returns a string representation of the object.
android.net.wifi.hotspot2.pps.Credential.SimCredential,"void writeToParcel(Parcel dest, int flags)", Flatten this object in to a Parcel.
android.net.wifi.hotspot2.pps.Credential,int describeContents(), Describe the kinds of special objects contained in this Parcelable instance's marshaled representation.
android.net.wifi.hotspot2.pps.Credential,boolean equals(Object thatObject)," Indicates whether some other object is ""equal to"" this one."
android.net.wifi.hotspot2.pps.Credential,X509Certificate getCaCertificate(), Get the CA (Certification Authority) certificate associated with this credential.
android.net.wifi.hotspot2.pps.Credential,Credential.CertificateCredential getCertCredential(), Get the certificate credential information.
android.net.wifi.hotspot2.pps.Credential,X509Certificate[] getClientCertificateChain(), Get the client certificate chain associated with this credential.
android.net.wifi.hotspot2.pps.Credential,PrivateKey getClientPrivateKey(), Get the client private key associated with this credential.
android.net.wifi.hotspot2.pps.Credential,String getRealm(), Get the realm associated with this credential.
android.net.wifi.hotspot2.pps.Credential,Credential.SimCredential getSimCredential(), Get the SIM credential information.
android.net.wifi.hotspot2.pps.Credential,Credential.UserCredential getUserCredential(), Get the user credential information.
android.net.wifi.hotspot2.pps.Credential,int hashCode(), Returns a hash code value for the object.
android.net.wifi.hotspot2.pps.Credential,void setCaCertificate(X509Certificate caCertificate), Set the CA (Certification Authority) certificate associated with this credential.
android.net.wifi.hotspot2.pps.Credential,void setCertCredential(Credential.CertificateCredential certCredential), Set the certificate credential information.
android.net.wifi.hotspot2.pps.Credential,void setClientCertificateChain(X509Certificate[] certificateChain), Set the client certificate chain associated with this credential.
android.net.wifi.hotspot2.pps.Credential,void setClientPrivateKey(PrivateKey clientPrivateKey), Set the client private key associated with this credential.
android.net.wifi.hotspot2.pps.Credential,void setRealm(String realm), Set the realm associated with this credential.
android.net.wifi.hotspot2.pps.Credential,void setSimCredential(Credential.SimCredential simCredential), Set the SIM credential information.
android.net.wifi.hotspot2.pps.Credential,void setUserCredential(Credential.UserCredential userCredential), Set the user credential information.
android.net.wifi.hotspot2.pps.Credential,String toString(), Returns a string representation of the object.
android.net.wifi.hotspot2.pps.Credential,"void writeToParcel(Parcel dest, int flags)", Flatten this object in to a Parcel.
android.net.wifi.hotspot2.pps.Credential.UserCredential,int describeContents(), Describe the kinds of special objects contained in this Parcelable instance's marshaled representation.
android.net.wifi.hotspot2.pps.Credential.UserCredential,boolean equals(Object thatObject)," Indicates whether some other object is ""equal to"" this one."
android.net.wifi.hotspot2.pps.Credential.UserCredential,int getEapType(), Get the EAP (Extensible Authentication Protocol) method type associated with this user credential.
android.net.wifi.hotspot2.pps.Credential.UserCredential,String getNonEapInnerMethod(), Get the inner non-EAP method associated with this user credential.
android.net.wifi.hotspot2.pps.Credential.UserCredential,String getPassword(), Get the Base64-encoded password associated with this user credential.
android.net.wifi.hotspot2.pps.Credential.UserCredential,String getUsername(), Get the username associated with this user credential.
android.net.wifi.hotspot2.pps.Credential.UserCredential,int hashCode(), Returns a hash code value for the object.
android.net.wifi.hotspot2.pps.Credential.UserCredential,void setEapType(int eapType), Set the EAP (Extensible Authentication Protocol) method type associated with this user credential.
android.net.wifi.hotspot2.pps.Credential.UserCredential,void setNonEapInnerMethod(String nonEapInnerMethod), Set the inner non-EAP method associated with this user credential.
android.net.wifi.hotspot2.pps.Credential.UserCredential,void setPassword(String password), Set the Base64-encoded password associated with this user credential.
android.net.wifi.hotspot2.pps.Credential.UserCredential,void setUsername(String username), Set the username associated with this user credential.
android.net.wifi.hotspot2.pps.Credential.UserCredential,String toString(), Returns a string representation of the object.
android.net.wifi.hotspot2.pps.Credential.UserCredential,"void writeToParcel(Parcel dest, int flags)", Flatten this object in to a Parcel.
android.net.wifi.hotspot2.pps.HomeSp,int describeContents(), Describe the kinds of special objects contained in this Parcelable instance's marshaled representation.
android.net.wifi.hotspot2.pps.HomeSp,boolean equals(Object thatObject)," Indicates whether some other object is ""equal to"" this one."
android.net.wifi.hotspot2.pps.HomeSp,String getFqdn(), Get the FQDN (Fully Qualified Domain Name) associated with this home service provider.
android.net.wifi.hotspot2.pps.HomeSp,String getFriendlyName(), Get the friendly name associated with this home service provider.
android.net.wifi.hotspot2.pps.HomeSp,long[] getRoamingConsortiumOis(), Get the Organization Identifiers (OIs) identifying a roaming consortium of which this provider is a member.
android.net.wifi.hotspot2.pps.HomeSp,int hashCode(), Returns a hash code value for the object.
android.net.wifi.hotspot2.pps.HomeSp,void setFqdn(String fqdn), Set the FQDN (Fully Qualified Domain Name) associated with this home service provider.
android.net.wifi.hotspot2.pps.HomeSp,void setFriendlyName(String friendlyName), Set the friendly name associated with this home service provider.
android.net.wifi.hotspot2.pps.HomeSp,void setRoamingConsortiumOis(long[] roamingConsortiumOis), Set the Organization Identifiers (OIs) identifying a roaming consortium of which this provider is a member.
android.net.wifi.hotspot2.pps.HomeSp,String toString(), Returns a string representation of the object.
android.net.wifi.hotspot2.pps.HomeSp,"void writeToParcel(Parcel dest, int flags)", Flatten this object in to a Parcel.
android.net.wifi.p2p.nsd.WifiP2pDnsSdServiceInfo,"static WifiP2pDnsSdServiceInfo newInstance(String instanceName, String serviceType, Map<String,String> txtMap)", Create a Bonjour service information object.
android.net.wifi.p2p.nsd.WifiP2pDnsSdServiceRequest,static WifiP2pDnsSdServiceRequest newInstance(), Create a service discovery request to search all Bonjour services.
android.net.wifi.p2p.nsd.WifiP2pDnsSdServiceRequest,static WifiP2pDnsSdServiceRequest newInstance(String serviceType), Create a service discovery to search for Bonjour services with the specified service type.
android.net.wifi.p2p.nsd.WifiP2pDnsSdServiceRequest,"static WifiP2pDnsSdServiceRequest newInstance(String instanceName, String serviceType)", Create a service discovery request to get the TXT data from the specified Bonjour service.
android.net.wifi.p2p.nsd.WifiP2pServiceInfo,boolean equals(Object o)," Indicates whether some other object is ""equal to"" this one."
android.net.wifi.p2p.nsd.WifiP2pServiceInfo,int hashCode(), Returns a hash code value for the object.
android.net.wifi.p2p.nsd.WifiP2pServiceRequest,boolean equals(Object o)," Indicates whether some other object is ""equal to"" this one."
android.net.wifi.p2p.nsd.WifiP2pServiceRequest,int hashCode(), Returns a hash code value for the object.
android.net.wifi.p2p.nsd.WifiP2pServiceRequest,"static WifiP2pServiceRequest newInstance(int protocolType, String queryData)", Create a service discovery request.
android.net.wifi.p2p.nsd.WifiP2pServiceRequest,static WifiP2pServiceRequest newInstance(int protocolType), Create a service discovery request.
android.net.wifi.p2p.nsd.WifiP2pUpnpServiceInfo,"static WifiP2pUpnpServiceInfo newInstance(String uuid, String device, List<String> services)", Create UPnP service information object.
android.net.wifi.p2p.nsd.WifiP2pUpnpServiceRequest,static WifiP2pUpnpServiceRequest newInstance(), Create a service discovery request to search all UPnP services.
android.net.wifi.p2p.nsd.WifiP2pUpnpServiceRequest,static WifiP2pUpnpServiceRequest newInstance(String st), Create a service discovery request to search specified UPnP services.
android.net.wifi.p2p.WifiP2pConfig,int describeContents(), Implement the Parcelable interface
android.net.wifi.p2p.WifiP2pConfig,String toString(), Returns a string representation of the object.
android.net.wifi.p2p.WifiP2pConfig,"void writeToParcel(Parcel dest, int flags)", Implement the Parcelable interface
android.net.wifi.p2p.WifiP2pDevice,int describeContents(), Implement the Parcelable interface
android.net.wifi.p2p.WifiP2pDevice,boolean equals(Object obj)," Indicates whether some other object is ""equal to"" this one."
android.net.wifi.p2p.WifiP2pDevice,boolean isGroupOwner(), Returns true if the device is a group owner
android.net.wifi.p2p.WifiP2pDevice,boolean isServiceDiscoveryCapable(), Returns true if the device is capable of service discovery
android.net.wifi.p2p.WifiP2pDevice,String toString(), Returns a string representation of the object.
android.net.wifi.p2p.WifiP2pDevice,boolean wpsDisplaySupported(), Returns true if WPS display configuration is supported
android.net.wifi.p2p.WifiP2pDevice,boolean wpsKeypadSupported(), Returns true if WPS keypad configuration is supported
android.net.wifi.p2p.WifiP2pDevice,boolean wpsPbcSupported(), Returns true if WPS push button configuration is supported
android.net.wifi.p2p.WifiP2pDevice,"void writeToParcel(Parcel dest, int flags)", Implement the Parcelable interface
android.net.wifi.p2p.WifiP2pDeviceList,int describeContents(), Implement the Parcelable interface
android.net.wifi.p2p.WifiP2pDeviceList,WifiP2pDevice get(String deviceAddress), Fetch a device from the list
android.net.wifi.p2p.WifiP2pDeviceList,Collection<WifiP2pDevice> getDeviceList(), Get the list of devices
android.net.wifi.p2p.WifiP2pDeviceList,String toString(), Returns a string representation of the object.
android.net.wifi.p2p.WifiP2pDeviceList,"void writeToParcel(Parcel dest, int flags)", Implement the Parcelable interface
android.net.wifi.p2p.WifiP2pGroup,int describeContents(), Implement the Parcelable interface
android.net.wifi.p2p.WifiP2pGroup,Collection<WifiP2pDevice> getClientList(), Get the list of clients currently part of the p2p group
android.net.wifi.p2p.WifiP2pGroup,String getInterface(), Get the interface name on which the group is created
android.net.wifi.p2p.WifiP2pGroup,String getNetworkName(), Get the network name (SSID) of the group.
android.net.wifi.p2p.WifiP2pGroup,WifiP2pDevice getOwner(), Get the details of the group owner as a WifiP2pDevice object
android.net.wifi.p2p.WifiP2pGroup,String getPassphrase(), Get the passphrase of the group.
android.net.wifi.p2p.WifiP2pGroup,boolean isGroupOwner(), Check whether this device is the group owner of the created p2p group
android.net.wifi.p2p.WifiP2pGroup,String toString(), Returns a string representation of the object.
android.net.wifi.p2p.WifiP2pGroup,"void writeToParcel(Parcel dest, int flags)", Implement the Parcelable interface
android.net.wifi.p2p.WifiP2pInfo,int describeContents(), Implement the Parcelable interface
android.net.wifi.p2p.WifiP2pInfo,String toString(), Returns a string representation of the object.
android.net.wifi.p2p.WifiP2pInfo,"void writeToParcel(Parcel dest, int flags)", Implement the Parcelable interface
android.net.wifi.p2p.WifiP2pManager.ActionListener,abstract void onFailure(int reason), The operation failed
android.net.wifi.p2p.WifiP2pManager.ActionListener,abstract void onSuccess(), The operation succeeded
android.net.wifi.p2p.WifiP2pManager.Channel,void close(), Close the current P2P connection and indicate to the P2P service that connections created by the app can be removed.
android.net.wifi.p2p.WifiP2pManager.ChannelListener,abstract void onChannelDisconnected(), The channel to the framework has been disconnected.
android.net.wifi.p2p.WifiP2pManager.ConnectionInfoListener,abstract void onConnectionInfoAvailable(WifiP2pInfo info), The requested connection info is available
android.net.wifi.p2p.WifiP2pManager.DnsSdServiceResponseListener,"abstract void onDnsSdServiceAvailable(String instanceName, String registrationType, WifiP2pDevice srcDevice)", The requested Bonjour service response is available.
android.net.wifi.p2p.WifiP2pManager.DnsSdTxtRecordListener,"abstract void onDnsSdTxtRecordAvailable(String fullDomainName, Map<String,String> txtRecordMap, WifiP2pDevice srcDevice)", The requested Bonjour service response is available.
android.net.wifi.p2p.WifiP2pManager.GroupInfoListener,abstract void onGroupInfoAvailable(WifiP2pGroup group), The requested p2p group info is available
android.net.wifi.p2p.WifiP2pManager.PeerListListener,abstract void onPeersAvailable(WifiP2pDeviceList peers), The requested peer list is available
android.net.wifi.p2p.WifiP2pManager.ServiceResponseListener,"abstract void onServiceAvailable(int protocolType, byte[] responseData, WifiP2pDevice srcDevice)", The requested service response is available.
android.net.wifi.p2p.WifiP2pManager,"void addLocalService(WifiP2pManager.Channel c, WifiP2pServiceInfo servInfo, WifiP2pManager.ActionListener listener)", Register a local service for service discovery.
android.net.wifi.p2p.WifiP2pManager,"void addServiceRequest(WifiP2pManager.Channel c, WifiP2pServiceRequest req, WifiP2pManager.ActionListener listener)", Add a service discovery request.
android.net.wifi.p2p.WifiP2pManager,"void cancelConnect(WifiP2pManager.Channel c, WifiP2pManager.ActionListener listener)", Cancel any ongoing p2p group negotiation The function call immediately returns after sending a connection cancellation request to the framework.
android.net.wifi.p2p.WifiP2pManager,"void clearLocalServices(WifiP2pManager.Channel c, WifiP2pManager.ActionListener listener)", Clear all registered local services of service discovery.
android.net.wifi.p2p.WifiP2pManager,"void clearServiceRequests(WifiP2pManager.Channel c, WifiP2pManager.ActionListener listener)", Clear all registered service discovery requests.
android.net.wifi.p2p.WifiP2pManager,"void connect(WifiP2pManager.Channel c, WifiP2pConfig config, WifiP2pManager.ActionListener listener)", Start a p2p connection to a device with the specified configuration.
android.net.wifi.p2p.WifiP2pManager,"void createGroup(WifiP2pManager.Channel c, WifiP2pManager.ActionListener listener)", Create a p2p group with the current device as the group owner.
android.net.wifi.p2p.WifiP2pManager,"void discoverPeers(WifiP2pManager.Channel c, WifiP2pManager.ActionListener listener)", Initiate peer discovery.
android.net.wifi.p2p.WifiP2pManager,"void discoverServices(WifiP2pManager.Channel c, WifiP2pManager.ActionListener listener)", Initiate service discovery.
android.net.wifi.p2p.WifiP2pManager,"WifiP2pManager.Channel initialize(Context srcContext, Looper srcLooper, WifiP2pManager.ChannelListener listener)", Registers the application with the Wi-Fi framework.
android.net.wifi.p2p.WifiP2pManager,"void removeGroup(WifiP2pManager.Channel c, WifiP2pManager.ActionListener listener)", Remove the current p2p group.
android.net.wifi.p2p.WifiP2pManager,"void removeLocalService(WifiP2pManager.Channel c, WifiP2pServiceInfo servInfo, WifiP2pManager.ActionListener listener)"," Remove a registered local service added with addLocalService(WifiP2pManager.Channel, WifiP2pServiceInfo, WifiP2pManager.ActionListener) The function call immediately returns after sending a request to remove a local service to the framework."
android.net.wifi.p2p.WifiP2pManager,"void removeServiceRequest(WifiP2pManager.Channel c, WifiP2pServiceRequest req, WifiP2pManager.ActionListener listener)"," Remove a specified service discovery request added with addServiceRequest(WifiP2pManager.Channel, WifiP2pServiceRequest, WifiP2pManager.ActionListener) The function call immediately returns after sending a request to remove service discovery request to the framework."
android.net.wifi.p2p.WifiP2pManager,"void requestConnectionInfo(WifiP2pManager.Channel c, WifiP2pManager.ConnectionInfoListener listener)", Request device connection info.
android.net.wifi.p2p.WifiP2pManager,"void requestGroupInfo(WifiP2pManager.Channel c, WifiP2pManager.GroupInfoListener listener)", Request p2p group info.
android.net.wifi.p2p.WifiP2pManager,"void requestPeers(WifiP2pManager.Channel c, WifiP2pManager.PeerListListener listener)", Request the current list of peers.
android.net.wifi.p2p.WifiP2pManager,"void setDnsSdResponseListeners(WifiP2pManager.Channel c, WifiP2pManager.DnsSdServiceResponseListener servListener, WifiP2pManager.DnsSdTxtRecordListener txtListener)", Register a callback to be invoked on receiving Bonjour service discovery response.
android.net.wifi.p2p.WifiP2pManager,"void setServiceResponseListener(WifiP2pManager.Channel c, WifiP2pManager.ServiceResponseListener listener)", Register a callback to be invoked on receiving service discovery response.
android.net.wifi.p2p.WifiP2pManager,"void setUpnpServiceResponseListener(WifiP2pManager.Channel c, WifiP2pManager.UpnpServiceResponseListener listener)", Register a callback to be invoked on receiving upnp service discovery response.
android.net.wifi.p2p.WifiP2pManager,"void stopPeerDiscovery(WifiP2pManager.Channel c, WifiP2pManager.ActionListener listener)", Stop an ongoing peer discovery The function call immediately returns after sending a stop request to the framework.
android.net.wifi.p2p.WifiP2pManager.UpnpServiceResponseListener,"abstract void onUpnpServiceAvailable(List<String> uniqueServiceNames, WifiP2pDevice srcDevice)", The requested upnp service response is available.
android.net.wifi.rtt.LocationCivic,boolean equals(Object o)," Indicates whether some other object is ""equal to"" this one."
android.net.wifi.rtt.LocationCivic,byte[] getData(), Return the Location Civic data reported by the peer.
android.net.wifi.rtt.LocationCivic,int hashCode(), Returns a hash code value for the object.
android.net.wifi.rtt.LocationConfigurationInformation,boolean equals(Object o)," Indicates whether some other object is ""equal to"" this one."
android.net.wifi.rtt.LocationConfigurationInformation,double getAltitude(), The altitude is interpreted according to the getAltitudeType().
android.net.wifi.rtt.LocationConfigurationInformation,int getAltitudeType(), Specifies the type of the altitude measurement returned by getAltitude() and getAltitudeUncertainty().
android.net.wifi.rtt.LocationConfigurationInformation,double getAltitudeUncertainty(), Only valid if the the getAltitudeType() is equal to ALTITUDE_IN_METERS - otherwise this method will throw an exception.
android.net.wifi.rtt.LocationConfigurationInformation,double getLatitude(), Get latitude in degrees.
android.net.wifi.rtt.LocationConfigurationInformation,double getLatitudeUncertainty(), Get the uncertainty of the latitude getLatitude() in degrees.
android.net.wifi.rtt.LocationConfigurationInformation,double getLongitude(), Get longitude in degrees.
android.net.wifi.rtt.LocationConfigurationInformation,double getLongitudeUncertainty(), Get the uncertainty of the longitude getLongitude() ()} in degrees.
android.net.wifi.rtt.LocationConfigurationInformation,int hashCode(), Returns a hash code value for the object.
android.net.wifi.rtt.RangingRequest.Builder,RangingRequest.Builder addAccessPoint(ScanResult apInfo), Add the device specified by the ScanResult to the list of devices with which to measure range.
android.net.wifi.rtt.RangingRequest.Builder,RangingRequest.Builder addAccessPoints(List<ScanResult> apInfos), Add the devices specified by the ScanResults to the list of devices with which to measure range.
android.net.wifi.rtt.RangingRequest.Builder,RangingRequest.Builder addWifiAwarePeer(MacAddress peerMacAddress), Add the device specified by the peerMacAddress to the list of devices with which to measure range.
android.net.wifi.rtt.RangingRequest.Builder,RangingRequest.Builder addWifiAwarePeer(PeerHandle peerHandle), Add a device specified by a PeerHandle to the list of devices with which to measure range.
android.net.wifi.rtt.RangingRequest.Builder,RangingRequest build(), Build RangingRequest given the current configurations made on the builder.
android.net.wifi.rtt.RangingRequest,int describeContents(), Describe the kinds of special objects contained in this Parcelable instance's marshaled representation.
android.net.wifi.rtt.RangingRequest,boolean equals(Object o)," Indicates whether some other object is ""equal to"" this one."
android.net.wifi.rtt.RangingRequest,static int getMaxPeers(), Returns the maximum number of peers to range which can be specified in a single RangingRequest.
android.net.wifi.rtt.RangingRequest,int hashCode(), Returns a hash code value for the object.
android.net.wifi.rtt.RangingRequest,"void writeToParcel(Parcel dest, int flags)", Flatten this object in to a Parcel.
android.net.wifi.rtt.RangingResult,int describeContents(), Describe the kinds of special objects contained in this Parcelable instance's marshaled representation.
android.net.wifi.rtt.RangingResult,boolean equals(Object o)," Indicates whether some other object is ""equal to"" this one."
android.net.wifi.rtt.RangingResult,int getDistanceMm(),
android.net.wifi.rtt.RangingResult,int getDistanceStdDevMm(),
android.net.wifi.rtt.RangingResult,MacAddress getMacAddress(),
android.net.wifi.rtt.RangingResult,PeerHandle getPeerHandle(),
android.net.wifi.rtt.RangingResult,long getRangingTimestampUs(),
android.net.wifi.rtt.RangingResult,LocationCivic getReportedLocationCivic(),
android.net.wifi.rtt.RangingResult,LocationConfigurationInformation getReportedLocationConfigurationInformation(),
android.net.wifi.rtt.RangingResult,int getRssi(),
android.net.wifi.rtt.RangingResult,int getStatus(),
android.net.wifi.rtt.RangingResult,int hashCode(), Returns a hash code value for the object.
android.net.wifi.rtt.RangingResult,"void writeToParcel(Parcel dest, int flags)", Flatten this object in to a Parcel.
android.net.wifi.rtt.RangingResultCallback,abstract void onRangingFailure(int code), Called when a ranging operation failed in whole - i.e.
android.net.wifi.rtt.RangingResultCallback,abstract void onRangingResults(List<RangingResult> results), Called when a ranging operation was executed.
android.net.wifi.rtt.WifiRttManager,boolean isAvailable(), Returns the current status of RTT API: whether or not RTT is available.
android.net.wifi.rtt.WifiRttManager,"void startRanging(RangingRequest request, RangingResultCallback callback, Handler handler)", Initiate a request to range to a set of devices specified in the RangingRequest.
android.net.wifi.ScanResult,boolean is80211mcResponder(),
android.net.wifi.ScanResult,boolean isPasspointNetwork(),
android.net.wifi.ScanResult,String toString(), Returns a string representation of the object.
android.net.wifi.SupplicantState,static boolean isValidState(SupplicantState state), Returns true if the supplicant state is valid and false otherwise.
android.net.wifi.SupplicantState,static SupplicantState valueOf(String name),
android.net.wifi.SupplicantState,static final SupplicantState[] values(),
android.net.wifi.WifiConfiguration.AuthAlgorithm,Object clone(), Creates and returns a copy of this object.
android.net.wifi.WifiConfiguration.AuthAlgorithm,boolean equals(Object obj)," Indicates whether some other object is ""equal to"" this one."
android.net.wifi.WifiConfiguration.AuthAlgorithm,void finalize(), Called by the garbage collector on an object when garbage collection determines that there are no more references to the object.
android.net.wifi.WifiConfiguration.AuthAlgorithm,final Class<?> getClass(), Returns the runtime class of this Object.
android.net.wifi.WifiConfiguration.AuthAlgorithm,int hashCode(), Returns a hash code value for the object.
android.net.wifi.WifiConfiguration.AuthAlgorithm,final void notify(), Wakes up a single thread that is waiting on this object's monitor.
android.net.wifi.WifiConfiguration.AuthAlgorithm,final void notifyAll(), Wakes up all threads that are waiting on this object's monitor.
android.net.wifi.WifiConfiguration.AuthAlgorithm,String toString(), Returns a string representation of the object.
android.net.wifi.WifiConfiguration.AuthAlgorithm,"final void wait(long millis, int nanos)"," Causes the current thread to wait until another thread invokes the notify() method or the notifyAll() method for this object, or some other thread interrupts the current thread, or a certain amount of real time has elapsed."
android.net.wifi.WifiConfiguration.AuthAlgorithm,final void wait(long millis)," Causes the current thread to wait until either another thread invokes the notify() method or the notifyAll() method for this object, or a specified amount of time has elapsed."
android.net.wifi.WifiConfiguration.AuthAlgorithm,final void wait(), Causes the current thread to wait until another thread invokes the notify() method or the notifyAll() method for this object.
android.net.wifi.WifiConfiguration.GroupCipher,Object clone(), Creates and returns a copy of this object.
android.net.wifi.WifiConfiguration.GroupCipher,boolean equals(Object obj)," Indicates whether some other object is ""equal to"" this one."
android.net.wifi.WifiConfiguration.GroupCipher,void finalize(), Called by the garbage collector on an object when garbage collection determines that there are no more references to the object.
android.net.wifi.WifiConfiguration.GroupCipher,final Class<?> getClass(), Returns the runtime class of this Object.
android.net.wifi.WifiConfiguration.GroupCipher,int hashCode(), Returns a hash code value for the object.
android.net.wifi.WifiConfiguration.GroupCipher,final void notify(), Wakes up a single thread that is waiting on this object's monitor.
android.net.wifi.WifiConfiguration.GroupCipher,final void notifyAll(), Wakes up all threads that are waiting on this object's monitor.
android.net.wifi.WifiConfiguration.GroupCipher,String toString(), Returns a string representation of the object.
android.net.wifi.WifiConfiguration.GroupCipher,"final void wait(long millis, int nanos)"," Causes the current thread to wait until another thread invokes the notify() method or the notifyAll() method for this object, or some other thread interrupts the current thread, or a certain amount of real time has elapsed."
android.net.wifi.WifiConfiguration.GroupCipher,final void wait(long millis)," Causes the current thread to wait until either another thread invokes the notify() method or the notifyAll() method for this object, or a specified amount of time has elapsed."
android.net.wifi.WifiConfiguration.GroupCipher,final void wait(), Causes the current thread to wait until another thread invokes the notify() method or the notifyAll() method for this object.
android.net.wifi.WifiConfiguration.KeyMgmt,Object clone(), Creates and returns a copy of this object.
android.net.wifi.WifiConfiguration.KeyMgmt,boolean equals(Object obj)," Indicates whether some other object is ""equal to"" this one."
android.net.wifi.WifiConfiguration.KeyMgmt,void finalize(), Called by the garbage collector on an object when garbage collection determines that there are no more references to the object.
android.net.wifi.WifiConfiguration.KeyMgmt,final Class<?> getClass(), Returns the runtime class of this Object.
android.net.wifi.WifiConfiguration.KeyMgmt,int hashCode(), Returns a hash code value for the object.
android.net.wifi.WifiConfiguration.KeyMgmt,final void notify(), Wakes up a single thread that is waiting on this object's monitor.
android.net.wifi.WifiConfiguration.KeyMgmt,final void notifyAll(), Wakes up all threads that are waiting on this object's monitor.
android.net.wifi.WifiConfiguration.KeyMgmt,String toString(), Returns a string representation of the object.
android.net.wifi.WifiConfiguration.KeyMgmt,"final void wait(long millis, int nanos)"," Causes the current thread to wait until another thread invokes the notify() method or the notifyAll() method for this object, or some other thread interrupts the current thread, or a certain amount of real time has elapsed."
android.net.wifi.WifiConfiguration.KeyMgmt,final void wait(long millis)," Causes the current thread to wait until either another thread invokes the notify() method or the notifyAll() method for this object, or a specified amount of time has elapsed."
android.net.wifi.WifiConfiguration.KeyMgmt,final void wait(), Causes the current thread to wait until another thread invokes the notify() method or the notifyAll() method for this object.
android.net.wifi.WifiConfiguration.PairwiseCipher,Object clone(), Creates and returns a copy of this object.
android.net.wifi.WifiConfiguration.PairwiseCipher,boolean equals(Object obj)," Indicates whether some other object is ""equal to"" this one."
android.net.wifi.WifiConfiguration.PairwiseCipher,void finalize(), Called by the garbage collector on an object when garbage collection determines that there are no more references to the object.
android.net.wifi.WifiConfiguration.PairwiseCipher,final Class<?> getClass(), Returns the runtime class of this Object.
android.net.wifi.WifiConfiguration.PairwiseCipher,int hashCode(), Returns a hash code value for the object.
android.net.wifi.WifiConfiguration.PairwiseCipher,final void notify(), Wakes up a single thread that is waiting on this object's monitor.
android.net.wifi.WifiConfiguration.PairwiseCipher,final void notifyAll(), Wakes up all threads that are waiting on this object's monitor.
android.net.wifi.WifiConfiguration.PairwiseCipher,String toString(), Returns a string representation of the object.
android.net.wifi.WifiConfiguration.PairwiseCipher,"final void wait(long millis, int nanos)"," Causes the current thread to wait until another thread invokes the notify() method or the notifyAll() method for this object, or some other thread interrupts the current thread, or a certain amount of real time has elapsed."
android.net.wifi.WifiConfiguration.PairwiseCipher,final void wait(long millis)," Causes the current thread to wait until either another thread invokes the notify() method or the notifyAll() method for this object, or a specified amount of time has elapsed."
android.net.wifi.WifiConfiguration.PairwiseCipher,final void wait(), Causes the current thread to wait until another thread invokes the notify() method or the notifyAll() method for this object.
android.net.wifi.WifiConfiguration.Protocol,Object clone(), Creates and returns a copy of this object.
android.net.wifi.WifiConfiguration.Protocol,boolean equals(Object obj)," Indicates whether some other object is ""equal to"" this one."
android.net.wifi.WifiConfiguration.Protocol,void finalize(), Called by the garbage collector on an object when garbage collection determines that there are no more references to the object.
android.net.wifi.WifiConfiguration.Protocol,final Class<?> getClass(), Returns the runtime class of this Object.
android.net.wifi.WifiConfiguration.Protocol,int hashCode(), Returns a hash code value for the object.
android.net.wifi.WifiConfiguration.Protocol,final void notify(), Wakes up a single thread that is waiting on this object's monitor.
android.net.wifi.WifiConfiguration.Protocol,final void notifyAll(), Wakes up all threads that are waiting on this object's monitor.
android.net.wifi.WifiConfiguration.Protocol,String toString(), Returns a string representation of the object.
android.net.wifi.WifiConfiguration.Protocol,"final void wait(long millis, int nanos)"," Causes the current thread to wait until another thread invokes the notify() method or the notifyAll() method for this object, or some other thread interrupts the current thread, or a certain amount of real time has elapsed."
android.net.wifi.WifiConfiguration.Protocol,final void wait(long millis)," Causes the current thread to wait until either another thread invokes the notify() method or the notifyAll() method for this object, or a specified amount of time has elapsed."
android.net.wifi.WifiConfiguration.Protocol,final void wait(), Causes the current thread to wait until another thread invokes the notify() method or the notifyAll() method for this object.
android.net.wifi.WifiConfiguration.Status,Object clone(), Creates and returns a copy of this object.
android.net.wifi.WifiConfiguration.Status,boolean equals(Object obj)," Indicates whether some other object is ""equal to"" this one."
android.net.wifi.WifiConfiguration.Status,void finalize(), Called by the garbage collector on an object when garbage collection determines that there are no more references to the object.
android.net.wifi.WifiConfiguration.Status,final Class<?> getClass(), Returns the runtime class of this Object.
android.net.wifi.WifiConfiguration.Status,int hashCode(), Returns a hash code value for the object.
android.net.wifi.WifiConfiguration.Status,final void notify(), Wakes up a single thread that is waiting on this object's monitor.
android.net.wifi.WifiConfiguration.Status,final void notifyAll(), Wakes up all threads that are waiting on this object's monitor.
android.net.wifi.WifiConfiguration.Status,String toString(), Returns a string representation of the object.
android.net.wifi.WifiConfiguration.Status,"final void wait(long millis, int nanos)"," Causes the current thread to wait until another thread invokes the notify() method or the notifyAll() method for this object, or some other thread interrupts the current thread, or a certain amount of real time has elapsed."
android.net.wifi.WifiConfiguration.Status,final void wait(long millis)," Causes the current thread to wait until either another thread invokes the notify() method or the notifyAll() method for this object, or a specified amount of time has elapsed."
android.net.wifi.WifiConfiguration.Status,final void wait(), Causes the current thread to wait until another thread invokes the notify() method or the notifyAll() method for this object.
android.net.wifi.WifiConfiguration,ProxyInfo getHttpProxy(), Returns the HTTP proxy used by this object.
android.net.wifi.WifiConfiguration,boolean isPasspoint(), Identify if this configuration represents a Passpoint network
android.net.wifi.WifiConfiguration,void setHttpProxy(ProxyInfo httpProxy), Set the ProxyInfo for this WifiConfiguration.
android.net.wifi.WifiConfiguration,String toString(), Returns a string representation of the object.
android.net.wifi.WifiEnterpriseConfig.Eap,Object clone(), Creates and returns a copy of this object.
android.net.wifi.WifiEnterpriseConfig.Eap,boolean equals(Object obj)," Indicates whether some other object is ""equal to"" this one."
android.net.wifi.WifiEnterpriseConfig.Eap,void finalize(), Called by the garbage collector on an object when garbage collection determines that there are no more references to the object.
android.net.wifi.WifiEnterpriseConfig.Eap,final Class<?> getClass(), Returns the runtime class of this Object.
android.net.wifi.WifiEnterpriseConfig.Eap,int hashCode(), Returns a hash code value for the object.
android.net.wifi.WifiEnterpriseConfig.Eap,final void notify(), Wakes up a single thread that is waiting on this object's monitor.
android.net.wifi.WifiEnterpriseConfig.Eap,final void notifyAll(), Wakes up all threads that are waiting on this object's monitor.
android.net.wifi.WifiEnterpriseConfig.Eap,String toString(), Returns a string representation of the object.
android.net.wifi.WifiEnterpriseConfig.Eap,"final void wait(long millis, int nanos)"," Causes the current thread to wait until another thread invokes the notify() method or the notifyAll() method for this object, or some other thread interrupts the current thread, or a certain amount of real time has elapsed."
android.net.wifi.WifiEnterpriseConfig.Eap,final void wait(long millis)," Causes the current thread to wait until either another thread invokes the notify() method or the notifyAll() method for this object, or a specified amount of time has elapsed."
android.net.wifi.WifiEnterpriseConfig.Eap,final void wait(), Causes the current thread to wait until another thread invokes the notify() method or the notifyAll() method for this object.
android.net.wifi.WifiEnterpriseConfig.Phase2,Object clone(), Creates and returns a copy of this object.
android.net.wifi.WifiEnterpriseConfig.Phase2,boolean equals(Object obj)," Indicates whether some other object is ""equal to"" this one."
android.net.wifi.WifiEnterpriseConfig.Phase2,void finalize(), Called by the garbage collector on an object when garbage collection determines that there are no more references to the object.
android.net.wifi.WifiEnterpriseConfig.Phase2,final Class<?> getClass(), Returns the runtime class of this Object.
android.net.wifi.WifiEnterpriseConfig.Phase2,int hashCode(), Returns a hash code value for the object.
android.net.wifi.WifiEnterpriseConfig.Phase2,final void notify(), Wakes up a single thread that is waiting on this object's monitor.
android.net.wifi.WifiEnterpriseConfig.Phase2,final void notifyAll(), Wakes up all threads that are waiting on this object's monitor.
android.net.wifi.WifiEnterpriseConfig.Phase2,String toString(), Returns a string representation of the object.
android.net.wifi.WifiEnterpriseConfig.Phase2,"final void wait(long millis, int nanos)"," Causes the current thread to wait until another thread invokes the notify() method or the notifyAll() method for this object, or some other thread interrupts the current thread, or a certain amount of real time has elapsed."
android.net.wifi.WifiEnterpriseConfig.Phase2,final void wait(long millis)," Causes the current thread to wait until either another thread invokes the notify() method or the notifyAll() method for this object, or a specified amount of time has elapsed."
android.net.wifi.WifiEnterpriseConfig.Phase2,final void wait(), Causes the current thread to wait until another thread invokes the notify() method or the notifyAll() method for this object.
android.net.wifi.WifiEnterpriseConfig,int describeContents(), Describe the kinds of special objects contained in this Parcelable instance's marshaled representation.
android.net.wifi.WifiEnterpriseConfig,String getAltSubjectMatch(), Get alternate subject match
android.net.wifi.WifiEnterpriseConfig,String getAnonymousIdentity(), Get the anonymous identity
android.net.wifi.WifiEnterpriseConfig,X509Certificate getCaCertificate(), Get CA certificate.
android.net.wifi.WifiEnterpriseConfig,X509Certificate[] getCaCertificates(), Get CA certificates.
android.net.wifi.WifiEnterpriseConfig,X509Certificate getClientCertificate(), Get client certificate
android.net.wifi.WifiEnterpriseConfig,X509Certificate[] getClientCertificateChain(), Get the complete client certificate chain in the same order as it was last supplied.
android.net.wifi.WifiEnterpriseConfig,String getDomainSuffixMatch(), Get the domain_suffix_match value.
android.net.wifi.WifiEnterpriseConfig,int getEapMethod(), Get the eap method.
android.net.wifi.WifiEnterpriseConfig,String getIdentity(), Get the identity
android.net.wifi.WifiEnterpriseConfig,String getPassword(), Get the password.
android.net.wifi.WifiEnterpriseConfig,int getPhase2Method(), Get the phase 2 authentication method.
android.net.wifi.WifiEnterpriseConfig,String getPlmn(), Get plmn (Public Land Mobile Network) for Passpoint credential; see (String) for more information
android.net.wifi.WifiEnterpriseConfig,String getRealm(), Get realm for Passpoint credential; see setRealm(String) for more information
android.net.wifi.WifiEnterpriseConfig,String getSubjectMatch(), This method was deprecated in API level 23. in favor of altSubjectMatch
android.net.wifi.WifiEnterpriseConfig,void setAltSubjectMatch(String altSubjectMatch), Set alternate subject match.
android.net.wifi.WifiEnterpriseConfig,void setAnonymousIdentity(String anonymousIdentity), Set anonymous identity.
android.net.wifi.WifiEnterpriseConfig,void setCaCertificate(X509Certificate cert), Specify a X.509 certificate that identifies the server.
android.net.wifi.WifiEnterpriseConfig,void setCaCertificates(X509Certificate[] certs), Specify a list of X.509 certificates that identifies the server.
android.net.wifi.WifiEnterpriseConfig,"void setClientKeyEntry(PrivateKey privateKey, X509Certificate clientCertificate)", Specify a private key and client certificate for client authorization.
android.net.wifi.WifiEnterpriseConfig,"void setClientKeyEntryWithCertificateChain(PrivateKey privateKey, X509Certificate[] clientCertificateChain)", Specify a private key and client certificate chain for client authorization.
android.net.wifi.WifiEnterpriseConfig,void setDomainSuffixMatch(String domain), Set the domain_suffix_match directive on wpa_supplicant.
android.net.wifi.WifiEnterpriseConfig,void setEapMethod(int eapMethod), Set the EAP authentication method.
android.net.wifi.WifiEnterpriseConfig,void setIdentity(String identity), Set the identity
android.net.wifi.WifiEnterpriseConfig,void setPassword(String password), Set the password.
android.net.wifi.WifiEnterpriseConfig,void setPhase2Method(int phase2Method), Set Phase 2 authentication method.
android.net.wifi.WifiEnterpriseConfig,void setPlmn(String plmn), Set plmn (Public Land Mobile Network) of the provider of Passpoint credential
android.net.wifi.WifiEnterpriseConfig,void setRealm(String realm), Set realm for Passpoint credential; realm identifies a set of networks where your Passpoint credential can be used
android.net.wifi.WifiEnterpriseConfig,void setSubjectMatch(String subjectMatch), This method was deprecated in API level 23. in favor of altSubjectMatch
android.net.wifi.WifiEnterpriseConfig,String toString(), Returns a string representation of the object.
android.net.wifi.WifiEnterpriseConfig,"void writeToParcel(Parcel dest, int flags)", Flatten this object in to a Parcel.
android.net.wifi.WifiInfo,String getBSSID(), Return the basic service set identifier (BSSID) of the current access point.
android.net.wifi.WifiInfo,static NetworkInfo.DetailedState getDetailedStateOf(SupplicantState suppState), Map a supplicant state into a fine-grained network connectivity state.
android.net.wifi.WifiInfo,int getFrequency(), Returns the current frequency in FREQUENCY_UNITS.
android.net.wifi.WifiInfo,boolean getHiddenSSID(),
android.net.wifi.WifiInfo,int getIpAddress(),
android.net.wifi.WifiInfo,int getLinkSpeed(), Returns the current link speed in LINK_SPEED_UNITS.
android.net.wifi.WifiInfo,String getMacAddress(),
android.net.wifi.WifiInfo,int getNetworkId()," Each configured network has a unique small integer ID, used to identify the network when performing operations on the supplicant."
android.net.wifi.WifiInfo,int getRssi()," Returns the received signal strength indicator of the current 802.11 network, in dBm."
android.net.wifi.WifiInfo,String getSSID(), Returns the service set identifier (SSID) of the current 802.11 network.
android.net.wifi.WifiInfo,SupplicantState getSupplicantState()," Return the detailed state of the supplicant's negotiation with an access point, in the form of a SupplicantState object."
android.net.wifi.WifiInfo,String toString(), Returns a string representation of the object.
android.net.wifi.WifiManager.LocalOnlyHotspotCallback,void onFailed(int reason), LocalOnlyHotspot failed to start.
android.net.wifi.WifiManager.LocalOnlyHotspotCallback,void onStarted(WifiManager.LocalOnlyHotspotReservation reservation), LocalOnlyHotspot start succeeded.
android.net.wifi.WifiManager.LocalOnlyHotspotCallback,void onStopped(), LocalOnlyHotspot stopped.
android.net.wifi.WifiManager.LocalOnlyHotspotReservation,void close()," Closes this resource, relinquishing any underlying resources."
android.net.wifi.WifiManager.LocalOnlyHotspotReservation,WifiConfiguration getWifiConfiguration(),
android.net.wifi.WifiManager.MulticastLock,void acquire(), Locks Wifi Multicast on until release() is called.
android.net.wifi.WifiManager.MulticastLock,boolean isHeld(), Checks whether this MulticastLock is currently held.
android.net.wifi.WifiManager.MulticastLock,void release()," Unlocks Wifi Multicast, restoring the filter of packets not addressed specifically to this device and saving power."
android.net.wifi.WifiManager.MulticastLock,void setReferenceCounted(boolean refCounted), Controls whether this is a reference-counted or non-reference- counted MulticastLock.
android.net.wifi.WifiManager.MulticastLock,String toString(), Returns a string representation of the object.
android.net.wifi.WifiManager,int addNetwork(WifiConfiguration config), Add a new network description to the set of configured networks.
android.net.wifi.WifiManager,void addOrUpdatePasspointConfiguration(PasspointConfiguration config), Add or update a Passpoint configuration.
android.net.wifi.WifiManager,"static int calculateSignalLevel(int rssi, int numLevels)", Calculates the level of the signal.
android.net.wifi.WifiManager,void cancelWps(WifiManager.WpsCallback listener), This method was deprecated in API level P. This API is deprecated
android.net.wifi.WifiManager,"static int compareSignalLevel(int rssiA, int rssiB)", Compares two signal strengths.
android.net.wifi.WifiManager,WifiManager.MulticastLock createMulticastLock(String tag), Create a new MulticastLock
android.net.wifi.WifiManager,WifiManager.WifiLock createWifiLock(String tag), Creates a new WifiLock.
android.net.wifi.WifiManager,"WifiManager.WifiLock createWifiLock(int lockType, String tag)", Creates a new WifiLock.
android.net.wifi.WifiManager,boolean disableNetwork(int netId), Disable a configured network.
android.net.wifi.WifiManager,boolean disconnect(), Disassociate from the currently active access point.
android.net.wifi.WifiManager,"boolean enableNetwork(int netId, boolean attemptConnect)", Allow a previously configured network to be associated with.
android.net.wifi.WifiManager,List<WifiConfiguration> getConfiguredNetworks(), Return a list of all the networks configured for the current foreground user.
android.net.wifi.WifiManager,WifiInfo getConnectionInfo()," Return dynamic information about the current Wi-Fi connection, if any is active."
android.net.wifi.WifiManager,DhcpInfo getDhcpInfo()," Return the DHCP-assigned addresses from the last successful DHCP request, if any."
android.net.wifi.WifiManager,List<PasspointConfiguration> getPasspointConfigurations(), Return the list of installed Passpoint configurations.
android.net.wifi.WifiManager,List<ScanResult> getScanResults(), Return the results of the latest access point scan.
android.net.wifi.WifiManager,int getWifiState(), Gets the Wi-Fi enabled state.
android.net.wifi.WifiManager,boolean is5GHzBandSupported(),
android.net.wifi.WifiManager,boolean isDeviceToApRttSupported(),
android.net.wifi.WifiManager,boolean isEnhancedPowerReportingSupported(),
android.net.wifi.WifiManager,boolean isP2pSupported(),
android.net.wifi.WifiManager,boolean isPreferredNetworkOffloadSupported(),
android.net.wifi.WifiManager,boolean isScanAlwaysAvailable(), Check if scanning is always available.
android.net.wifi.WifiManager,boolean isTdlsSupported(),
android.net.wifi.WifiManager,boolean isWifiEnabled(), Return whether Wi-Fi is enabled or disabled.
android.net.wifi.WifiManager,boolean pingSupplicant(), This method was deprecated in API level 26. Will return the output of isWifiEnabled() instead.
android.net.wifi.WifiManager,boolean reassociate()," Reconnect to the currently active access point, even if we are already connected."
android.net.wifi.WifiManager,boolean reconnect()," Reconnect to the currently active access point, if we are currently disconnected."
android.net.wifi.WifiManager,boolean removeNetwork(int netId), Remove the specified network from the list of configured networks.
android.net.wifi.WifiManager,void removePasspointConfiguration(String fqdn), Remove the Passpoint configuration identified by its FQDN (Fully Qualified Domain Name).
android.net.wifi.WifiManager,boolean saveConfiguration()," This method was deprecated in API level 26. There is no need to call this method - addNetwork(WifiConfiguration), updateNetwork(WifiConfiguration) and removeNetwork(int) already persist the configurations automatically."
android.net.wifi.WifiManager,"void setTdlsEnabled(InetAddress remoteIPAddress, boolean enable)", Enable/Disable TDLS on a specific local route.
android.net.wifi.WifiManager,"void setTdlsEnabledWithMacAddress(String remoteMacAddress, boolean enable)"," Similar to setTdlsEnabled(InetAddress, boolean), except this version allows you to specify remote endpoint with a MAC address."
android.net.wifi.WifiManager,boolean setWifiEnabled(boolean enabled), Enable or disable Wi-Fi.
android.net.wifi.WifiManager,"void startLocalOnlyHotspot(WifiManager.LocalOnlyHotspotCallback callback, Handler handler)", Request a local only hotspot that an application can use to communicate between co-located devices connected to the created WiFi hotspot.
android.net.wifi.WifiManager,boolean startScan(), This method was deprecated in API level P. The ability for apps to trigger scan requests will be removed in a future release.
android.net.wifi.WifiManager,"void startWps(WpsInfo config, WifiManager.WpsCallback listener)", This method was deprecated in API level P. This API is deprecated
android.net.wifi.WifiManager,int updateNetwork(WifiConfiguration config), Update the network description of an existing configured network.
android.net.wifi.WifiManager.WifiLock,void acquire(), Locks the Wi-Fi radio on until release() is called.
android.net.wifi.WifiManager.WifiLock,boolean isHeld(), Checks whether this WifiLock is currently held.
android.net.wifi.WifiManager.WifiLock,void release()," Unlocks the Wi-Fi radio, allowing it to turn off when the device is idle."
android.net.wifi.WifiManager.WifiLock,void setReferenceCounted(boolean refCounted), Controls whether this is a reference-counted or non-reference-counted WifiLock.
android.net.wifi.WifiManager.WifiLock,void setWorkSource(WorkSource ws),
android.net.wifi.WifiManager.WifiLock,String toString(), Returns a string representation of the object.
android.net.wifi.WifiManager.WpsCallback,abstract void onFailed(int reason), This method was deprecated in API level P. This API is deprecated
android.net.wifi.WifiManager.WpsCallback,abstract void onStarted(String pin), This method was deprecated in API level P. This API is deprecated
android.net.wifi.WifiManager.WpsCallback,abstract void onSucceeded(), This method was deprecated in API level P. This API is deprecated
android.net.wifi.WpsInfo,int describeContents(), Implement the Parcelable interface
android.net.wifi.WpsInfo,String toString(), Returns a string representation of the object.
android.net.wifi.WpsInfo,"void writeToParcel(Parcel dest, int flags)", Implement the Parcelable interface
android.view.AbsSavedState,int describeContents(), Describe the kinds of special objects contained in this Parcelable instance's marshaled representation.
android.view.AbsSavedState,final Parcelable getSuperState(),
android.view.AbsSavedState,"void writeToParcel(Parcel dest, int flags)", Flatten this object in to a Parcel.
android.view.accessibility.AccessibilityEvent,void appendRecord(AccessibilityRecord record), Appends an AccessibilityRecord to the end of event records.
android.view.accessibility.AccessibilityEvent,int describeContents(), Describe the kinds of special objects contained in this Parcelable instance's marshaled representation.
android.view.accessibility.AccessibilityEvent,static String eventTypeToString(int eventType), Returns the string representation of an event type.
android.view.accessibility.AccessibilityEvent,int getAction(), Gets the performed action that triggered this event.
android.view.accessibility.AccessibilityEvent,int getContentChangeTypes(), Gets the bit mask of change types signaled by an TYPE_WINDOW_CONTENT_CHANGED event.
android.view.accessibility.AccessibilityEvent,long getEventTime(), Gets the time in which this event was sent.
android.view.accessibility.AccessibilityEvent,int getEventType(), Gets the event type.
android.view.accessibility.AccessibilityEvent,int getMovementGranularity(), Gets the movement granularity that was traversed.
android.view.accessibility.AccessibilityEvent,CharSequence getPackageName(), Gets the package name of the source.
android.view.accessibility.AccessibilityEvent,AccessibilityRecord getRecord(int index), Gets the record at a given index.
android.view.accessibility.AccessibilityEvent,int getRecordCount(), Gets the number of records contained in the event.
android.view.accessibility.AccessibilityEvent,int getWindowChanges(), Get the bit mask of change types signaled by a TYPE_WINDOWS_CHANGED event.
android.view.accessibility.AccessibilityEvent,void initFromParcel(Parcel parcel), Creates a new instance from a Parcel.
android.view.accessibility.AccessibilityEvent,static AccessibilityEvent obtain(AccessibilityEvent event), Returns a cached instance if such is available or a new one is created.
android.view.accessibility.AccessibilityEvent,static AccessibilityEvent obtain(), Returns a cached instance if such is available or a new one is instantiated.
android.view.accessibility.AccessibilityEvent,static AccessibilityEvent obtain(int eventType), Returns a cached instance if such is available or a new one is instantiated with its type property set.
android.view.accessibility.AccessibilityEvent,void recycle(), Recycles an instance back to be reused.
android.view.accessibility.AccessibilityEvent,void setAction(int action), Sets the performed action that triggered this event.
android.view.accessibility.AccessibilityEvent,void setContentChangeTypes(int changeTypes), Sets the bit mask of node tree changes signaled by an TYPE_WINDOW_CONTENT_CHANGED event.
android.view.accessibility.AccessibilityEvent,void setEventTime(long eventTime), Sets the time in which this event was sent.
android.view.accessibility.AccessibilityEvent,void setEventType(int eventType), Sets the event type.
android.view.accessibility.AccessibilityEvent,void setMovementGranularity(int granularity), Sets the movement granularity that was traversed.
android.view.accessibility.AccessibilityEvent,void setPackageName(CharSequence packageName), Sets the package name of the source.
android.view.accessibility.AccessibilityEvent,String toString(), Returns a string representation of the object.
android.view.accessibility.AccessibilityEvent,"void writeToParcel(Parcel parcel, int flags)", Flatten this object in to a Parcel.
android.view.accessibility.AccessibilityEventSource,abstract void sendAccessibilityEvent(int eventType), Handles the request for sending an AccessibilityEvent given the event type.
android.view.accessibility.AccessibilityEventSource,abstract void sendAccessibilityEventUnchecked(AccessibilityEvent event), Handles the request for sending an AccessibilityEvent.
android.view.accessibility.AccessibilityManager.AccessibilityStateChangeListener,abstract void onAccessibilityStateChanged(boolean enabled), Called when the accessibility enabled state changes.
android.view.accessibility.AccessibilityManager.TouchExplorationStateChangeListener,abstract void onTouchExplorationStateChanged(boolean enabled), Called when the touch exploration enabled state changes.
android.view.accessibility.AccessibilityManager,void addAccessibilityRequestPreparer(AccessibilityRequestPreparer preparer), Registers a AccessibilityRequestPreparer.
android.view.accessibility.AccessibilityManager,boolean addAccessibilityStateChangeListener(AccessibilityManager.AccessibilityStateChangeListener listener), Registers an AccessibilityManager.AccessibilityStateChangeListener for changes in the global accessibility state of the system.
android.view.accessibility.AccessibilityManager,"void addAccessibilityStateChangeListener(AccessibilityManager.AccessibilityStateChangeListener listener, Handler handler)", Registers an AccessibilityManager.AccessibilityStateChangeListener for changes in the global accessibility state of the system.
android.view.accessibility.AccessibilityManager,"void addTouchExplorationStateChangeListener(AccessibilityManager.TouchExplorationStateChangeListener listener, Handler handler)", Registers an AccessibilityManager.TouchExplorationStateChangeListener for changes in the global touch exploration state of the system.
android.view.accessibility.AccessibilityManager,boolean addTouchExplorationStateChangeListener(AccessibilityManager.TouchExplorationStateChangeListener listener), Registers a AccessibilityManager.TouchExplorationStateChangeListener for changes in the global touch exploration state of the system.
android.view.accessibility.AccessibilityManager,List<ServiceInfo> getAccessibilityServiceList(), This method was deprecated in API level 14. Use getInstalledAccessibilityServiceList()
android.view.accessibility.AccessibilityManager,List<AccessibilityServiceInfo> getEnabledAccessibilityServiceList(int feedbackTypeFlags), Returns the AccessibilityServiceInfos of the enabled accessibility services for a given feedback type.
android.view.accessibility.AccessibilityManager,List<AccessibilityServiceInfo> getInstalledAccessibilityServiceList(), Returns the AccessibilityServiceInfos of the installed accessibility services.
android.view.accessibility.AccessibilityManager,void interrupt(), Requests feedback interruption from all accessibility services.
android.view.accessibility.AccessibilityManager,static boolean isAccessibilityButtonSupported(), Determines if the accessibility button within the system navigation area is supported.
android.view.accessibility.AccessibilityManager,boolean isEnabled(), Returns if the accessibility in the system is enabled.
android.view.accessibility.AccessibilityManager,boolean isTouchExplorationEnabled(), Returns if the touch exploration in the system is enabled.
android.view.accessibility.AccessibilityManager,void removeAccessibilityRequestPreparer(AccessibilityRequestPreparer preparer), Unregisters a AccessibilityRequestPreparer.
android.view.accessibility.AccessibilityManager,boolean removeAccessibilityStateChangeListener(AccessibilityManager.AccessibilityStateChangeListener listener), Unregisters an AccessibilityManager.AccessibilityStateChangeListener.
android.view.accessibility.AccessibilityManager,boolean removeTouchExplorationStateChangeListener(AccessibilityManager.TouchExplorationStateChangeListener listener), Unregisters a AccessibilityManager.TouchExplorationStateChangeListener.
android.view.accessibility.AccessibilityManager,void sendAccessibilityEvent(AccessibilityEvent event), Sends an AccessibilityEvent.
android.view.accessibility.AccessibilityNodeInfo.AccessibilityAction,boolean equals(Object other)," Indicates whether some other object is ""equal to"" this one."
android.view.accessibility.AccessibilityNodeInfo.AccessibilityAction,int getId(), Gets the id for this action.
android.view.accessibility.AccessibilityNodeInfo.AccessibilityAction,CharSequence getLabel(), Gets the label for this action.
android.view.accessibility.AccessibilityNodeInfo.AccessibilityAction,int hashCode(), Returns a hash code value for the object.
android.view.accessibility.AccessibilityNodeInfo.AccessibilityAction,String toString(), Returns a string representation of the object.
android.view.accessibility.AccessibilityNodeInfo.CollectionInfo,int getColumnCount(), Gets the number of columns.
android.view.accessibility.AccessibilityNodeInfo.CollectionInfo,int getRowCount(), Gets the number of rows.
android.view.accessibility.AccessibilityNodeInfo.CollectionInfo,int getSelectionMode(), Gets the collection's selection mode.
android.view.accessibility.AccessibilityNodeInfo.CollectionInfo,boolean isHierarchical(), Gets if the collection is a hierarchically ordered.
android.view.accessibility.AccessibilityNodeInfo.CollectionInfo,"static AccessibilityNodeInfo.CollectionInfo obtain(int rowCount, int columnCount, boolean hierarchical, int selectionMode)", Obtains a pooled instance.
android.view.accessibility.AccessibilityNodeInfo.CollectionInfo,"static AccessibilityNodeInfo.CollectionInfo obtain(int rowCount, int columnCount, boolean hierarchical)", Obtains a pooled instance.
android.view.accessibility.AccessibilityNodeInfo.CollectionItemInfo,int getColumnIndex(), Gets the column index at which the item is located.
android.view.accessibility.AccessibilityNodeInfo.CollectionItemInfo,int getColumnSpan(), Gets the number of columns the item spans.
android.view.accessibility.AccessibilityNodeInfo.CollectionItemInfo,int getRowIndex(), Gets the row index at which the item is located.
android.view.accessibility.AccessibilityNodeInfo.CollectionItemInfo,int getRowSpan(), Gets the number of rows the item spans.
android.view.accessibility.AccessibilityNodeInfo.CollectionItemInfo,boolean isHeading(), This method was deprecated in API level P. Use isHeading()
android.view.accessibility.AccessibilityNodeInfo.CollectionItemInfo,boolean isSelected(), Gets if the collection item is selected.
android.view.accessibility.AccessibilityNodeInfo.CollectionItemInfo,"static AccessibilityNodeInfo.CollectionItemInfo obtain(int rowIndex, int rowSpan, int columnIndex, int columnSpan, boolean heading)", Obtains a pooled instance.
android.view.accessibility.AccessibilityNodeInfo.CollectionItemInfo,"static AccessibilityNodeInfo.CollectionItemInfo obtain(int rowIndex, int rowSpan, int columnIndex, int columnSpan, boolean heading, boolean selected)", Obtains a pooled instance.
android.view.accessibility.AccessibilityNodeInfo.RangeInfo,float getCurrent(), Gets the current value.
android.view.accessibility.AccessibilityNodeInfo.RangeInfo,float getMax(), Gets the maximum value.
android.view.accessibility.AccessibilityNodeInfo.RangeInfo,float getMin(), Gets the minimum value.
android.view.accessibility.AccessibilityNodeInfo.RangeInfo,int getType(), Gets the range type.
android.view.accessibility.AccessibilityNodeInfo.RangeInfo,"static AccessibilityNodeInfo.RangeInfo obtain(int type, float min, float max, float current)", Obtains a pooled instance.
android.view.accessibility.AccessibilityNodeInfo,void addAction(int action), This method was deprecated in API level 21. This has been deprecated for addAction(AccessibilityAction)
android.view.accessibility.AccessibilityNodeInfo,void addAction(AccessibilityNodeInfo.AccessibilityAction action), Adds an action that can be performed on the node.
android.view.accessibility.AccessibilityNodeInfo,"void addChild(View root, int virtualDescendantId)", Adds a virtual child which is a descendant of the given root.
android.view.accessibility.AccessibilityNodeInfo,void addChild(View child), Adds a child.
android.view.accessibility.AccessibilityNodeInfo,boolean canOpenPopup(), Gets if this node opens a popup or a dialog.
android.view.accessibility.AccessibilityNodeInfo,int describeContents(), Describe the kinds of special objects contained in this Parcelable instance's marshaled representation.
android.view.accessibility.AccessibilityNodeInfo,boolean equals(Object object)," Indicates whether some other object is ""equal to"" this one."
android.view.accessibility.AccessibilityNodeInfo,List<AccessibilityNodeInfo> findAccessibilityNodeInfosByText(String text), Finds AccessibilityNodeInfos by text.
android.view.accessibility.AccessibilityNodeInfo,List<AccessibilityNodeInfo> findAccessibilityNodeInfosByViewId(String viewId)," Finds AccessibilityNodeInfos by the fully qualified view id's resource name where a fully qualified id is of the from ""package:id/id_resource_name""."
android.view.accessibility.AccessibilityNodeInfo,AccessibilityNodeInfo findFocus(int focus), Find the view that has the specified focus type.
android.view.accessibility.AccessibilityNodeInfo,AccessibilityNodeInfo focusSearch(int direction), Searches for the nearest view in the specified direction that can take the input focus.
android.view.accessibility.AccessibilityNodeInfo,List<AccessibilityNodeInfo.AccessibilityAction> getActionList(), Gets the actions that can be performed on the node.
android.view.accessibility.AccessibilityNodeInfo,int getActions(), This method was deprecated in API level 21. Use getActionList().
android.view.accessibility.AccessibilityNodeInfo,List<String> getAvailableExtraData(), Get the extra data available for this node.
android.view.accessibility.AccessibilityNodeInfo,void getBoundsInParent(Rect outBounds), Gets the node bounds in parent coordinates.
android.view.accessibility.AccessibilityNodeInfo,void getBoundsInScreen(Rect outBounds), Gets the node bounds in screen coordinates.
android.view.accessibility.AccessibilityNodeInfo,AccessibilityNodeInfo getChild(int index), Get the child at given index.
android.view.accessibility.AccessibilityNodeInfo,int getChildCount(), Gets the number of children.
android.view.accessibility.AccessibilityNodeInfo,CharSequence getClassName(), Gets the class this node comes from.
android.view.accessibility.AccessibilityNodeInfo,AccessibilityNodeInfo.CollectionInfo getCollectionInfo(), Gets the collection info if the node is a collection.
android.view.accessibility.AccessibilityNodeInfo,AccessibilityNodeInfo.CollectionItemInfo getCollectionItemInfo(), Gets the collection item info if the node is a collection item.
android.view.accessibility.AccessibilityNodeInfo,CharSequence getContentDescription(), Gets the content description of this node.
android.view.accessibility.AccessibilityNodeInfo,int getDrawingOrder(), Get the drawing order of the view corresponding it this node.
android.view.accessibility.AccessibilityNodeInfo,CharSequence getError(), Gets the error text of this node.
android.view.accessibility.AccessibilityNodeInfo,Bundle getExtras(), Gets an optional bundle with extra data.
android.view.accessibility.AccessibilityNodeInfo,CharSequence getHintText(), Gets the hint text of this node.
android.view.accessibility.AccessibilityNodeInfo,int getInputType(), Gets the input type of the source as defined by InputType.
android.view.accessibility.AccessibilityNodeInfo,AccessibilityNodeInfo getLabelFor(), Gets the node info for which the view represented by this info serves as a label for accessibility purposes.
android.view.accessibility.AccessibilityNodeInfo,AccessibilityNodeInfo getLabeledBy(), Gets the node info which serves as the label of the view represented by this info for accessibility purposes.
android.view.accessibility.AccessibilityNodeInfo,int getLiveRegion(), Gets the node's live region mode.
android.view.accessibility.AccessibilityNodeInfo,int getMaxTextLength(), Returns the maximum text length for this node.
android.view.accessibility.AccessibilityNodeInfo,int getMovementGranularities(), Gets the movement granularities for traversing the text of this node.
android.view.accessibility.AccessibilityNodeInfo,CharSequence getPackageName(), Gets the package this node comes from.
android.view.accessibility.AccessibilityNodeInfo,CharSequence getPaneTitle(), Get the title of the pane represented by this node.
android.view.accessibility.AccessibilityNodeInfo,AccessibilityNodeInfo getParent(), Gets the parent.
android.view.accessibility.AccessibilityNodeInfo,AccessibilityNodeInfo.RangeInfo getRangeInfo(), Gets the range info if this node is a range.
android.view.accessibility.AccessibilityNodeInfo,CharSequence getText(), Gets the text of this node.
android.view.accessibility.AccessibilityNodeInfo,int getTextSelectionEnd(), Gets the text selection end if text is selected.
android.view.accessibility.AccessibilityNodeInfo,int getTextSelectionStart(), Gets the text selection start or the cursor position.
android.view.accessibility.AccessibilityNodeInfo,CharSequence getTooltipText(), Gets the tooltip text of this node.
android.view.accessibility.AccessibilityNodeInfo,AccessibilityNodeInfo getTraversalAfter(), Gets the node after which this one is visited in accessibility traversal.
android.view.accessibility.AccessibilityNodeInfo,AccessibilityNodeInfo getTraversalBefore(), Gets the node before which this one is visited during traversal.
android.view.accessibility.AccessibilityNodeInfo,String getViewIdResourceName(), Gets the fully qualified resource name of the source view's id.
android.view.accessibility.AccessibilityNodeInfo,AccessibilityWindowInfo getWindow(), Gets the window to which this node belongs.
android.view.accessibility.AccessibilityNodeInfo,int getWindowId(), Gets the id of the window from which the info comes from.
android.view.accessibility.AccessibilityNodeInfo,int hashCode(), Returns a hash code value for the object.
android.view.accessibility.AccessibilityNodeInfo,boolean isAccessibilityFocused(), Gets whether this node is accessibility focused.
android.view.accessibility.AccessibilityNodeInfo,boolean isCheckable(), Gets whether this node is checkable.
android.view.accessibility.AccessibilityNodeInfo,boolean isChecked(), Gets whether this node is checked.
android.view.accessibility.AccessibilityNodeInfo,boolean isClickable(), Gets whether this node is clickable.
android.view.accessibility.AccessibilityNodeInfo,boolean isContentInvalid(), Gets if the content of this node is invalid.
android.view.accessibility.AccessibilityNodeInfo,boolean isContextClickable(), Gets whether this node is context clickable.
android.view.accessibility.AccessibilityNodeInfo,boolean isDismissable(), Gets if the node can be dismissed.
android.view.accessibility.AccessibilityNodeInfo,boolean isEditable(), Gets if the node is editable.
android.view.accessibility.AccessibilityNodeInfo,boolean isEnabled(), Gets whether this node is enabled.
android.view.accessibility.AccessibilityNodeInfo,boolean isFocusable(), Gets whether this node is focusable.
android.view.accessibility.AccessibilityNodeInfo,boolean isFocused(), Gets whether this node is focused.
android.view.accessibility.AccessibilityNodeInfo,boolean isHeading(), Returns whether node represents a heading.
android.view.accessibility.AccessibilityNodeInfo,boolean isImportantForAccessibility(), Returns whether the node originates from a view considered important for accessibility.
android.view.accessibility.AccessibilityNodeInfo,boolean isLongClickable(), Gets whether this node is long clickable.
android.view.accessibility.AccessibilityNodeInfo,boolean isMultiLine(), Gets if the node is a multi line editable text.
android.view.accessibility.AccessibilityNodeInfo,boolean isPassword(), Gets whether this node is a password.
android.view.accessibility.AccessibilityNodeInfo,boolean isScreenReaderFocusable(), Returns whether the node is explicitly marked as a focusable unit by a screen reader.
android.view.accessibility.AccessibilityNodeInfo,boolean isScrollable(), Gets if the node is scrollable.
android.view.accessibility.AccessibilityNodeInfo,boolean isSelected(), Gets whether this node is selected.
android.view.accessibility.AccessibilityNodeInfo,boolean isShowingHintText(), Returns whether the node's text represents a hint for the user to enter text.
android.view.accessibility.AccessibilityNodeInfo,boolean isVisibleToUser(), Gets whether this node is visible to the user.
android.view.accessibility.AccessibilityNodeInfo,"static AccessibilityNodeInfo obtain(View root, int virtualDescendantId)", Returns a cached instance if such is available otherwise a new one and sets the source.
android.view.accessibility.AccessibilityNodeInfo,static AccessibilityNodeInfo obtain(AccessibilityNodeInfo info), Returns a cached instance if such is available or a new one is create.
android.view.accessibility.AccessibilityNodeInfo,static AccessibilityNodeInfo obtain(), Returns a cached instance if such is available otherwise a new one.
android.view.accessibility.AccessibilityNodeInfo,static AccessibilityNodeInfo obtain(View source), Returns a cached instance if such is available otherwise a new one and sets the source.
android.view.accessibility.AccessibilityNodeInfo,"boolean performAction(int action, Bundle arguments)", Performs an action on the node.
android.view.accessibility.AccessibilityNodeInfo,boolean performAction(int action), Performs an action on the node.
android.view.accessibility.AccessibilityNodeInfo,void recycle(), Return an instance back to be reused.
android.view.accessibility.AccessibilityNodeInfo,boolean refresh(), Refreshes this info with the latest state of the view it represents.
android.view.accessibility.AccessibilityNodeInfo,"boolean refreshWithExtraData(String extraDataKey, Bundle args)"," Refreshes this info with the latest state of the view it represents, and request new data be added by the View."
android.view.accessibility.AccessibilityNodeInfo,boolean removeAction(AccessibilityNodeInfo.AccessibilityAction action), Removes an action that can be performed on the node.
android.view.accessibility.AccessibilityNodeInfo,void removeAction(int action), This method was deprecated in API level 21. Use removeAction(AccessibilityAction)
android.view.accessibility.AccessibilityNodeInfo,"boolean removeChild(View root, int virtualDescendantId)", Removes a virtual child which is a descendant of the given root.
android.view.accessibility.AccessibilityNodeInfo,boolean removeChild(View child), Removes a child.
android.view.accessibility.AccessibilityNodeInfo,void setAccessibilityFocused(boolean focused), Sets whether this node is accessibility focused.
android.view.accessibility.AccessibilityNodeInfo,void setAvailableExtraData(List<String> extraDataKeys), Set the extra data available for this node.
android.view.accessibility.AccessibilityNodeInfo,void setBoundsInParent(Rect bounds), Sets the node bounds in parent coordinates.
android.view.accessibility.AccessibilityNodeInfo,void setBoundsInScreen(Rect bounds), Sets the node bounds in screen coordinates.
android.view.accessibility.AccessibilityNodeInfo,void setCanOpenPopup(boolean opensPopup), Sets if this node opens a popup or a dialog.
android.view.accessibility.AccessibilityNodeInfo,void setCheckable(boolean checkable), Sets whether this node is checkable.
android.view.accessibility.AccessibilityNodeInfo,void setChecked(boolean checked), Sets whether this node is checked.
android.view.accessibility.AccessibilityNodeInfo,void setClassName(CharSequence className), Sets the class this node comes from.
android.view.accessibility.AccessibilityNodeInfo,void setClickable(boolean clickable), Sets whether this node is clickable.
android.view.accessibility.AccessibilityNodeInfo,void setCollectionInfo(AccessibilityNodeInfo.CollectionInfo collectionInfo), Sets the collection info if the node is a collection.
android.view.accessibility.AccessibilityNodeInfo,void setCollectionItemInfo(AccessibilityNodeInfo.CollectionItemInfo collectionItemInfo), Sets the collection item info if the node is a collection item.
android.view.accessibility.AccessibilityNodeInfo,void setContentDescription(CharSequence contentDescription), Sets the content description of this node.
android.view.accessibility.AccessibilityNodeInfo,void setContentInvalid(boolean contentInvalid), Sets if the content of this node is invalid.
android.view.accessibility.AccessibilityNodeInfo,void setContextClickable(boolean contextClickable), Sets whether this node is context clickable.
android.view.accessibility.AccessibilityNodeInfo,void setDismissable(boolean dismissable), Sets if the node can be dismissed.
android.view.accessibility.AccessibilityNodeInfo,void setDrawingOrder(int drawingOrderInParent), Set the drawing order of the view corresponding it this node.
android.view.accessibility.AccessibilityNodeInfo,void setEditable(boolean editable), Sets whether this node is editable.
android.view.accessibility.AccessibilityNodeInfo,void setEnabled(boolean enabled), Sets whether this node is enabled.
android.view.accessibility.AccessibilityNodeInfo,void setError(CharSequence error), Sets the error text of this node.
android.view.accessibility.AccessibilityNodeInfo,void setFocusable(boolean focusable), Sets whether this node is focusable.
android.view.accessibility.AccessibilityNodeInfo,void setFocused(boolean focused), Sets whether this node is focused.
android.view.accessibility.AccessibilityNodeInfo,void setHeading(boolean isHeading), Sets whether the node represents a heading.
android.view.accessibility.AccessibilityNodeInfo,void setHintText(CharSequence hintText), Sets the hint text of this node.
android.view.accessibility.AccessibilityNodeInfo,void setImportantForAccessibility(boolean important), Sets whether the node is considered important for accessibility.
android.view.accessibility.AccessibilityNodeInfo,void setInputType(int inputType), Sets the input type of the source as defined by InputType.
android.view.accessibility.AccessibilityNodeInfo,"void setLabelFor(View root, int virtualDescendantId)", Sets the view for which the view represented by this info serves as a label for accessibility purposes.
android.view.accessibility.AccessibilityNodeInfo,void setLabelFor(View labeled), Sets the view for which the view represented by this info serves as a label for accessibility purposes.
android.view.accessibility.AccessibilityNodeInfo,void setLabeledBy(View label), Sets the view which serves as the label of the view represented by this info for accessibility purposes.
android.view.accessibility.AccessibilityNodeInfo,"void setLabeledBy(View root, int virtualDescendantId)", Sets the view which serves as the label of the view represented by this info for accessibility purposes.
android.view.accessibility.AccessibilityNodeInfo,void setLiveRegion(int mode), Sets the node's live region mode.
android.view.accessibility.AccessibilityNodeInfo,void setLongClickable(boolean longClickable), Sets whether this node is long clickable.
android.view.accessibility.AccessibilityNodeInfo,void setMaxTextLength(int max)," Sets the maximum text length, or -1 for no limit."
android.view.accessibility.AccessibilityNodeInfo,void setMovementGranularities(int granularities), Sets the movement granularities for traversing the text of this node.
android.view.accessibility.AccessibilityNodeInfo,void setMultiLine(boolean multiLine), Sets if the node is a multi line editable text.
android.view.accessibility.AccessibilityNodeInfo,void setPackageName(CharSequence packageName), Sets the package this node comes from.
android.view.accessibility.AccessibilityNodeInfo,void setPaneTitle(CharSequence paneTitle)," If this node represents a visually distinct region of the screen that may update separately from the rest of the window, it is considered a pane."
android.view.accessibility.AccessibilityNodeInfo,"void setParent(View root, int virtualDescendantId)", Sets the parent to be a virtual descendant of the given root.
android.view.accessibility.AccessibilityNodeInfo,void setParent(View parent), Sets the parent.
android.view.accessibility.AccessibilityNodeInfo,void setPassword(boolean password), Sets whether this node is a password.
android.view.accessibility.AccessibilityNodeInfo,void setRangeInfo(AccessibilityNodeInfo.RangeInfo rangeInfo), Sets the range info if this node is a range.
android.view.accessibility.AccessibilityNodeInfo,void setScreenReaderFocusable(boolean screenReaderFocusable), Sets whether the node should be considered a focusable unit by a screen reader.
android.view.accessibility.AccessibilityNodeInfo,void setScrollable(boolean scrollable), Sets if the node is scrollable.
android.view.accessibility.AccessibilityNodeInfo,void setSelected(boolean selected), Sets whether this node is selected.
android.view.accessibility.AccessibilityNodeInfo,void setShowingHintText(boolean showingHintText), Sets whether the node's text represents a hint for the user to enter text.
android.view.accessibility.AccessibilityNodeInfo,void setSource(View source), Sets the source.
android.view.accessibility.AccessibilityNodeInfo,"void setSource(View root, int virtualDescendantId)", Sets the source to be a virtual descendant of the given root.
android.view.accessibility.AccessibilityNodeInfo,void setText(CharSequence text), Sets the text of this node.
android.view.accessibility.AccessibilityNodeInfo,"void setTextSelection(int start, int end)", Sets the text selection start and end.
android.view.accessibility.AccessibilityNodeInfo,void setTooltipText(CharSequence tooltipText), Sets the tooltip text of this node.
android.view.accessibility.AccessibilityNodeInfo,void setTraversalAfter(View view), Sets the view whose node is visited after this one in accessibility traversal.
android.view.accessibility.AccessibilityNodeInfo,"void setTraversalAfter(View root, int virtualDescendantId)", Sets the node after which this one is visited in accessibility traversal.
android.view.accessibility.AccessibilityNodeInfo,void setTraversalBefore(View view), Sets the view before whose node this one should be visited during traversal.
android.view.accessibility.AccessibilityNodeInfo,"void setTraversalBefore(View root, int virtualDescendantId)", Sets the node before which this one is visited during traversal.
android.view.accessibility.AccessibilityNodeInfo,void setViewIdResourceName(String viewIdResName), Sets the fully qualified resource name of the source view's id.
android.view.accessibility.AccessibilityNodeInfo,void setVisibleToUser(boolean visibleToUser), Sets whether this node is visible to the user.
android.view.accessibility.AccessibilityNodeInfo,String toString(), Returns a string representation of the object.
android.view.accessibility.AccessibilityNodeInfo,"void writeToParcel(Parcel parcel, int flags)", Flatten this object in to a Parcel. Note: After the instance is written to a parcel it is recycled.
android.view.accessibility.AccessibilityNodeProvider,"void addExtraDataToAccessibilityNodeInfo(int virtualViewId, AccessibilityNodeInfo info, String extraDataKey, Bundle arguments)", Adds extra data to an AccessibilityNodeInfo based on an explicit request for the additional data.
android.view.accessibility.AccessibilityNodeProvider,AccessibilityNodeInfo createAccessibilityNodeInfo(int virtualViewId)," Returns an AccessibilityNodeInfo representing a virtual view, such as a descendant of the host View, with the given virtualViewId or the host View itself if virtualViewId equals to HOST_VIEW_ID."
android.view.accessibility.AccessibilityNodeProvider,"List<AccessibilityNodeInfo> findAccessibilityNodeInfosByText(String text, int virtualViewId)", Finds AccessibilityNodeInfos by text.
android.view.accessibility.AccessibilityNodeProvider,AccessibilityNodeInfo findFocus(int focus)," Find the virtual view, such as a descendant of the host View, that has the specified focus type."
android.view.accessibility.AccessibilityNodeProvider,"boolean performAction(int virtualViewId, int action, Bundle arguments)"," Performs an accessibility action on a virtual view, such as a descendant of the host View, with the given virtualViewId or the host View itself if virtualViewId equals to HOST_VIEW_ID."
android.view.accessibility.AccessibilityRecord,int getAddedCount(), Gets the number of added characters.
android.view.accessibility.AccessibilityRecord,CharSequence getBeforeText(), Sets the text before a change.
android.view.accessibility.AccessibilityRecord,CharSequence getClassName(), Gets the class name of the source.
android.view.accessibility.AccessibilityRecord,CharSequence getContentDescription(), Gets the description of the source.
android.view.accessibility.AccessibilityRecord,int getCurrentItemIndex(), Gets the index of the source in the list of items the can be visited.
android.view.accessibility.AccessibilityRecord,int getFromIndex()," Gets the index of the first character of the changed sequence, or the beginning of a text selection or the index of the first visible item when scrolling."
android.view.accessibility.AccessibilityRecord,int getItemCount(), Gets the number of items that can be visited.
android.view.accessibility.AccessibilityRecord,int getMaxScrollX(), Gets the max scroll offset of the source left edge in pixels.
android.view.accessibility.AccessibilityRecord,int getMaxScrollY(), Gets the max scroll offset of the source top edge in pixels.
android.view.accessibility.AccessibilityRecord,Parcelable getParcelableData(), Gets the Parcelable data.
android.view.accessibility.AccessibilityRecord,int getRemovedCount(), Gets the number of removed characters.
android.view.accessibility.AccessibilityRecord,int getScrollDeltaX(), Gets the difference in pixels between the horizontal position before the scroll and the current horizontal position
android.view.accessibility.AccessibilityRecord,int getScrollDeltaY(), Gets the difference in pixels between the vertical position before the scroll and the current vertical position
android.view.accessibility.AccessibilityRecord,int getScrollX(), Gets the scroll offset of the source left edge in pixels.
android.view.accessibility.AccessibilityRecord,int getScrollY(), Gets the scroll offset of the source top edge in pixels.
android.view.accessibility.AccessibilityRecord,AccessibilityNodeInfo getSource(), Gets the AccessibilityNodeInfo of the event source.
android.view.accessibility.AccessibilityRecord,List<CharSequence> getText(), Gets the text of the event.
android.view.accessibility.AccessibilityRecord,int getToIndex(), Gets the index of text selection end or the index of the last visible item when scrolling.
android.view.accessibility.AccessibilityRecord,int getWindowId(), Gets the id of the window from which the event comes from.
android.view.accessibility.AccessibilityRecord,boolean isChecked(), Gets if the source is checked.
android.view.accessibility.AccessibilityRecord,boolean isEnabled(), Gets if the source is enabled.
android.view.accessibility.AccessibilityRecord,boolean isFullScreen(), Gets if the source is taking the entire screen.
android.view.accessibility.AccessibilityRecord,boolean isPassword(), Gets if the source is a password field.
android.view.accessibility.AccessibilityRecord,boolean isScrollable(), Gets if the source is scrollable.
android.view.accessibility.AccessibilityRecord,static AccessibilityRecord obtain(AccessibilityRecord record), Returns a cached instance if such is available or a new one is instantiated.
android.view.accessibility.AccessibilityRecord,static AccessibilityRecord obtain(), Returns a cached instance if such is available or a new one is instantiated.
android.view.accessibility.AccessibilityRecord,void recycle(), Return an instance back to be reused.
android.view.accessibility.AccessibilityRecord,void setAddedCount(int addedCount), Sets the number of added characters.
android.view.accessibility.AccessibilityRecord,void setBeforeText(CharSequence beforeText), Sets the text before a change.
android.view.accessibility.AccessibilityRecord,void setChecked(boolean isChecked), Sets if the source is checked.
android.view.accessibility.AccessibilityRecord,void setClassName(CharSequence className), Sets the class name of the source.
android.view.accessibility.AccessibilityRecord,void setContentDescription(CharSequence contentDescription), Sets the description of the source.
android.view.accessibility.AccessibilityRecord,void setCurrentItemIndex(int currentItemIndex), Sets the index of the source in the list of items that can be visited.
android.view.accessibility.AccessibilityRecord,void setEnabled(boolean isEnabled), Sets if the source is enabled.
android.view.accessibility.AccessibilityRecord,void setFromIndex(int fromIndex), Sets the index of the first character of the changed sequence or the beginning of a text selection or the index of the first visible item when scrolling.
android.view.accessibility.AccessibilityRecord,void setFullScreen(boolean isFullScreen), Sets if the source is taking the entire screen.
android.view.accessibility.AccessibilityRecord,void setItemCount(int itemCount), Sets the number of items that can be visited.
android.view.accessibility.AccessibilityRecord,void setMaxScrollX(int maxScrollX), Sets the max scroll offset of the source left edge in pixels.
android.view.accessibility.AccessibilityRecord,void setMaxScrollY(int maxScrollY), Sets the max scroll offset of the source top edge in pixels.
android.view.accessibility.AccessibilityRecord,void setParcelableData(Parcelable parcelableData), Sets the Parcelable data of the event.
android.view.accessibility.AccessibilityRecord,void setPassword(boolean isPassword), Sets if the source is a password field.
android.view.accessibility.AccessibilityRecord,void setRemovedCount(int removedCount), Sets the number of removed characters.
android.view.accessibility.AccessibilityRecord,void setScrollDeltaX(int scrollDeltaX), Sets the difference in pixels between the horizontal position before the scroll and the current horizontal position
android.view.accessibility.AccessibilityRecord,void setScrollDeltaY(int scrollDeltaY), Sets the difference in pixels between the vertical position before the scroll and the current vertical position
android.view.accessibility.AccessibilityRecord,void setScrollX(int scrollX), Sets the scroll offset of the source left edge in pixels.
android.view.accessibility.AccessibilityRecord,void setScrollY(int scrollY), Sets the scroll offset of the source top edge in pixels.
android.view.accessibility.AccessibilityRecord,void setScrollable(boolean scrollable), Sets if the source is scrollable.
android.view.accessibility.AccessibilityRecord,"void setSource(View root, int virtualDescendantId)", Sets the source to be a virtual descendant of the given root.
android.view.accessibility.AccessibilityRecord,void setSource(View source), Sets the event source.
android.view.accessibility.AccessibilityRecord,void setToIndex(int toIndex), Sets the index of text selection end or the index of the last visible item when scrolling.
android.view.accessibility.AccessibilityRecord,String toString(), Returns a string representation of the object.
android.view.accessibility.AccessibilityRequestPreparer,View getView(), Get the view this object was created with.
android.view.accessibility.AccessibilityRequestPreparer,"abstract void onPrepareExtraData(int virtualViewId, String extraDataKey, Bundle args, Message preparationFinishedMessage)", Callback to allow preparation for filling extra data.
android.view.accessibility.AccessibilityWindowInfo,int describeContents(), Describe the kinds of special objects contained in this Parcelable instance's marshaled representation.
android.view.accessibility.AccessibilityWindowInfo,boolean equals(Object obj)," Indicates whether some other object is ""equal to"" this one."
android.view.accessibility.AccessibilityWindowInfo,AccessibilityNodeInfo getAnchor(), Gets the node that anchors this window to another.
android.view.accessibility.AccessibilityWindowInfo,void getBoundsInScreen(Rect outBounds), Gets the bounds of this window in the screen.
android.view.accessibility.AccessibilityWindowInfo,AccessibilityWindowInfo getChild(int index), Gets the child window at a given index.
android.view.accessibility.AccessibilityWindowInfo,int getChildCount(), Gets the number of child windows.
android.view.accessibility.AccessibilityWindowInfo,int getId(), Gets the unique window id.
android.view.accessibility.AccessibilityWindowInfo,int getLayer(), Gets the layer which determines the Z-order of the window.
android.view.accessibility.AccessibilityWindowInfo,AccessibilityWindowInfo getParent(), Gets the parent window.
android.view.accessibility.AccessibilityWindowInfo,AccessibilityNodeInfo getRoot(), Gets the root node in the window's hierarchy.
android.view.accessibility.AccessibilityWindowInfo,CharSequence getTitle(), Gets the title of the window.
android.view.accessibility.AccessibilityWindowInfo,int getType(), Gets the type of the window.
android.view.accessibility.AccessibilityWindowInfo,int hashCode(), Returns a hash code value for the object.
android.view.accessibility.AccessibilityWindowInfo,boolean isAccessibilityFocused(), Gets if this window has accessibility focus.
android.view.accessibility.AccessibilityWindowInfo,boolean isActive(), Gets if this window is active.
android.view.accessibility.AccessibilityWindowInfo,boolean isFocused(), Gets if this window has input focus.
android.view.accessibility.AccessibilityWindowInfo,boolean isInPictureInPictureMode(), Check if the window is in picture-in-picture mode.
android.view.accessibility.AccessibilityWindowInfo,static AccessibilityWindowInfo obtain(), Returns a cached instance if such is available or a new one is created.
android.view.accessibility.AccessibilityWindowInfo,static AccessibilityWindowInfo obtain(AccessibilityWindowInfo info), Returns a cached instance if such is available or a new one is created.
android.view.accessibility.AccessibilityWindowInfo,void recycle(), Return an instance back to be reused.
android.view.accessibility.AccessibilityWindowInfo,String toString(), Returns a string representation of the object.
android.view.accessibility.AccessibilityWindowInfo,"void writeToParcel(Parcel parcel, int flags)", Flatten this object in to a Parcel.
android.view.accessibility.CaptioningManager.CaptioningChangeListener,void onEnabledChanged(boolean enabled), Called when the captioning enabled state changes.
android.view.accessibility.CaptioningManager.CaptioningChangeListener,void onFontScaleChanged(float fontScale), Called when the captioning font scaling factor changes.
android.view.accessibility.CaptioningManager.CaptioningChangeListener,void onLocaleChanged(Locale locale), Called when the captioning locale changes.
android.view.accessibility.CaptioningManager.CaptioningChangeListener,void onUserStyleChanged(CaptioningManager.CaptionStyle userStyle), Called when the captioning user style changes.
android.view.accessibility.CaptioningManager.CaptionStyle,Typeface getTypeface(),
android.view.accessibility.CaptioningManager.CaptionStyle,boolean hasBackgroundColor(),
android.view.accessibility.CaptioningManager.CaptionStyle,boolean hasEdgeColor(),
android.view.accessibility.CaptioningManager.CaptionStyle,boolean hasEdgeType(),
android.view.accessibility.CaptioningManager.CaptionStyle,boolean hasForegroundColor(),
android.view.accessibility.CaptioningManager.CaptionStyle,boolean hasWindowColor(),
android.view.accessibility.CaptioningManager,void addCaptioningChangeListener(CaptioningManager.CaptioningChangeListener listener), Adds a listener for changes in the user's preferred captioning enabled state and visual properties.
android.view.accessibility.CaptioningManager,final float getFontScale(),
android.view.accessibility.CaptioningManager,final Locale getLocale(),
android.view.accessibility.CaptioningManager,CaptioningManager.CaptionStyle getUserStyle(),
android.view.accessibility.CaptioningManager,final boolean isEnabled(),
android.view.accessibility.CaptioningManager,void removeCaptioningChangeListener(CaptioningManager.CaptioningChangeListener listener), Removes a listener previously added using addCaptioningChangeListener(CaptioningManager.CaptioningChangeListener).
android.view.ActionMode.Callback,"abstract boolean onActionItemClicked(ActionMode mode, MenuItem item)", Called to report a user click on an action button.
android.view.ActionMode.Callback,"abstract boolean onCreateActionMode(ActionMode mode, Menu menu)", Called when action mode is first created.
android.view.ActionMode.Callback,abstract void onDestroyActionMode(ActionMode mode), Called when an action mode is about to be exited and destroyed.
android.view.ActionMode.Callback,"abstract boolean onPrepareActionMode(ActionMode mode, Menu menu)", Called to refresh an action mode's action menu whenever it is invalidated.
android.view.ActionMode.Callback2,"void onGetContentRect(ActionMode mode, View view, Rect outRect)"," Called when an ActionMode needs to be positioned on screen, potentially occluding view content."
android.view.ActionMode,abstract void finish(), Finish and close this action mode.
android.view.ActionMode,abstract View getCustomView(), Returns the current custom view for this action mode.
android.view.ActionMode,abstract Menu getMenu(), Returns the menu of actions that this action mode presents.
android.view.ActionMode,abstract MenuInflater getMenuInflater(), Returns a MenuInflater with the ActionMode's context.
android.view.ActionMode,abstract CharSequence getSubtitle(), Returns the current subtitle of this action mode.
android.view.ActionMode,Object getTag(), Retrieve the tag object associated with this ActionMode.
android.view.ActionMode,abstract CharSequence getTitle(), Returns the current title of this action mode.
android.view.ActionMode,boolean getTitleOptionalHint(),
android.view.ActionMode,int getType(), Returns the type for this action mode.
android.view.ActionMode,void hide(long duration), Hide the action mode view from obstructing the content below for a short duration.
android.view.ActionMode,abstract void invalidate(), Invalidate the action mode and refresh menu content.
android.view.ActionMode,void invalidateContentRect(), Invalidate the content rect associated to this ActionMode.
android.view.ActionMode,boolean isTitleOptional(),
android.view.ActionMode,void onWindowFocusChanged(boolean hasWindowFocus), Called when the window containing the view that started this action mode gains or loses focus.
android.view.ActionMode,abstract void setCustomView(View view), Set a custom view for this action mode.
android.view.ActionMode,abstract void setSubtitle(CharSequence subtitle), Set the subtitle of the action mode.
android.view.ActionMode,abstract void setSubtitle(int resId), Set the subtitle of the action mode.
android.view.ActionMode,void setTag(Object tag), Set a tag object associated with this ActionMode.
android.view.ActionMode,abstract void setTitle(CharSequence title), Set the title of the action mode.
android.view.ActionMode,abstract void setTitle(int resId), Set the title of the action mode.
android.view.ActionMode,void setTitleOptionalHint(boolean titleOptional), Set whether or not the title/subtitle display for this action mode is optional.
android.view.ActionMode,void setType(int type), Set a type for this action mode.
android.view.ActionProvider,boolean hasSubMenu(), Determines if this ActionProvider has a submenu associated with it.
android.view.ActionProvider,boolean isVisible()," If overridesItemVisibility() returns true, the return value of this method will help determine the visibility of the MenuItem this ActionProvider is bound to."
android.view.ActionProvider,abstract View onCreateActionView(), This method was deprecated in API level 16. use onCreateActionView(MenuItem)
android.view.ActionProvider,View onCreateActionView(MenuItem forItem), Factory method called by the Android framework to create new action views.
android.view.ActionProvider,boolean onPerformDefaultAction(), Performs an optional default action.
android.view.ActionProvider,void onPrepareSubMenu(SubMenu subMenu), Called to prepare an associated submenu for the menu item backed by this ActionProvider.
android.view.ActionProvider,boolean overridesItemVisibility(), The result of this method determines whether or not isVisible() will be used by the MenuItem this ActionProvider is bound to help determine its visibility.
android.view.ActionProvider,void refreshVisibility()," If this ActionProvider is associated with an item in a menu, refresh the visibility of the item based on overridesItemVisibility() and isVisible()."
android.view.ActionProvider,void setVisibilityListener(ActionProvider.VisibilityListener listener), Set a listener to be notified when this ActionProvider's overridden visibility changes.
android.view.ActionProvider.VisibilityListener,abstract void onActionProviderVisibilityChanged(boolean isVisible),
android.view.animation.AccelerateDecelerateInterpolator,float getInterpolation(float input),
android.view.animation.AccelerateInterpolator,float getInterpolation(float input),
android.view.animation.AlphaAnimation,boolean willChangeBounds(), Indicates whether or not this animation will affect the bounds of the animated view.
android.view.animation.AlphaAnimation,boolean willChangeTransformationMatrix(), Indicates whether or not this animation will affect the transformation matrix.
android.view.animation.Animation.AnimationListener,abstract void onAnimationEnd(Animation animation), Notifies the end of the animation.
android.view.animation.Animation.AnimationListener,abstract void onAnimationRepeat(Animation animation), Notifies the repetition of the animation.
android.view.animation.Animation.AnimationListener,abstract void onAnimationStart(Animation animation), Notifies the start of the animation.
android.view.animation.Animation.Description,Object clone(), Creates and returns a copy of this object.
android.view.animation.Animation.Description,boolean equals(Object obj)," Indicates whether some other object is ""equal to"" this one."
android.view.animation.Animation.Description,void finalize(), Called by the garbage collector on an object when garbage collection determines that there are no more references to the object.
android.view.animation.Animation.Description,final Class<?> getClass(), Returns the runtime class of this Object.
android.view.animation.Animation.Description,int hashCode(), Returns a hash code value for the object.
android.view.animation.Animation.Description,final void notify(), Wakes up a single thread that is waiting on this object's monitor.
android.view.animation.Animation.Description,final void notifyAll(), Wakes up all threads that are waiting on this object's monitor.
android.view.animation.Animation.Description,String toString(), Returns a string representation of the object.
android.view.animation.Animation.Description,"final void wait(long millis, int nanos)"," Causes the current thread to wait until another thread invokes the notify() method or the notifyAll() method for this object, or some other thread interrupts the current thread, or a certain amount of real time has elapsed."
android.view.animation.Animation.Description,final void wait(long millis)," Causes the current thread to wait until either another thread invokes the notify() method or the notifyAll() method for this object, or a specified amount of time has elapsed."
android.view.animation.Animation.Description,final void wait(), Causes the current thread to wait until another thread invokes the notify() method or the notifyAll() method for this object.
android.view.animation.Animation,void cancel(), Cancel the animation.
android.view.animation.Animation,long computeDurationHint()," Compute a hint at how long the entire animation may last, in milliseconds."
android.view.animation.Animation,int getBackgroundColor(), Returns the background color behind the animation.
android.view.animation.Animation,boolean getDetachWallpaper(), Return value of setDetachWallpaper(boolean).
android.view.animation.Animation,long getDuration(), How long this animation should last
android.view.animation.Animation,boolean getFillAfter()," If fillAfter is true, this animation will apply its transformation after the end time of the animation."
android.view.animation.Animation,boolean getFillBefore()," If fillBefore is true, this animation will apply its transformation before the start time of the animation."
android.view.animation.Animation,Interpolator getInterpolator(), Gets the acceleration curve type for this animation.
android.view.animation.Animation,int getRepeatCount(), Defines how many times the animation should repeat.
android.view.animation.Animation,int getRepeatMode(), Defines what this animation should do when it reaches the end.
android.view.animation.Animation,long getStartOffset()," When this animation should start, relative to StartTime"
android.view.animation.Animation,long getStartTime(), When this animation should start.
android.view.animation.Animation,"boolean getTransformation(long currentTime, Transformation outTransformation, float scale)", Gets the transformation to apply at a specified point in time.
android.view.animation.Animation,"boolean getTransformation(long currentTime, Transformation outTransformation)", Gets the transformation to apply at a specified point in time.
android.view.animation.Animation,int getZAdjustment(), Returns the Z ordering mode to use while running the animation as previously set by setZAdjustment(int).
android.view.animation.Animation,boolean hasEnded(), Indicates whether this animation has ended or not.
android.view.animation.Animation,boolean hasStarted(), Indicates whether this animation has started or not.
android.view.animation.Animation,"void initialize(int width, int height, int parentWidth, int parentHeight)", Initialize this animation with the dimensions of the object being animated as well as the objects parents.
android.view.animation.Animation,boolean isFillEnabled()," If fillEnabled is true, this animation will apply the value of fillBefore."
android.view.animation.Animation,boolean isInitialized(), Whether or not the animation has been initialized.
android.view.animation.Animation,void reset(), Reset the initialization state of this animation.
android.view.animation.Animation,void restrictDuration(long durationMillis), Ensure that the duration that this animation will run is not longer than durationMillis.
android.view.animation.Animation,void scaleCurrentDuration(float scale), How much to scale the duration by.
android.view.animation.Animation,void setAnimationListener(Animation.AnimationListener listener), Binds an animation listener to this animation.
android.view.animation.Animation,void setBackgroundColor(int bg), Set background behind animation.
android.view.animation.Animation,void setDetachWallpaper(boolean detachWallpaper)," If detachWallpaper is true, and this is a window animation of a window that has a wallpaper background, then the window will be detached from the wallpaper while it runs."
android.view.animation.Animation,void setDuration(long durationMillis), How long this animation should last.
android.view.animation.Animation,void setFillAfter(boolean fillAfter)," If fillAfter is true, the transformation that this animation performed will persist when it is finished."
android.view.animation.Animation,void setFillBefore(boolean fillBefore)," If fillBefore is true, this animation will apply its transformation before the start time of the animation."
android.view.animation.Animation,void setFillEnabled(boolean fillEnabled)," If fillEnabled is true, the animation will apply the value of fillBefore."
android.view.animation.Animation,"void setInterpolator(Context context, int resID)", Sets the acceleration curve for this animation.
android.view.animation.Animation,void setInterpolator(Interpolator i), Sets the acceleration curve for this animation.
android.view.animation.Animation,void setRepeatCount(int repeatCount), Sets how many times the animation should be repeated.
android.view.animation.Animation,void setRepeatMode(int repeatMode), Defines what this animation should do when it reaches the end.
android.view.animation.Animation,void setStartOffset(long startOffset), When this animation should start relative to the start time.
android.view.animation.Animation,void setStartTime(long startTimeMillis), When this animation should start.
android.view.animation.Animation,void setZAdjustment(int zAdjustment), Set the Z ordering mode to use while running the animation.
android.view.animation.Animation,void start()," Convenience method to start the animation the first time getTransformation(long, Transformation) is invoked."
android.view.animation.Animation,void startNow(), Convenience method to start the animation at the current time in milliseconds.
android.view.animation.Animation,boolean willChangeBounds(), Indicates whether or not this animation will affect the bounds of the animated view.
android.view.animation.Animation,boolean willChangeTransformationMatrix(), Indicates whether or not this animation will affect the transformation matrix.
android.view.animation.AnimationSet,void addAnimation(Animation a), Add a child animation to this animation set.
android.view.animation.AnimationSet,long computeDurationHint(), The duration hint of an animation set is the maximum of the duration hints of all of its component animations.
android.view.animation.AnimationSet,List<Animation> getAnimations(),
android.view.animation.AnimationSet,long getDuration(), The duration of an AnimationSet is defined to be the duration of the longest child animation.
android.view.animation.AnimationSet,long getStartTime(), When this animation should start.
android.view.animation.AnimationSet,"boolean getTransformation(long currentTime, Transformation t)", The transformation of an animation set is the concatenation of all of its component animations.
android.view.animation.AnimationSet,"void initialize(int width, int height, int parentWidth, int parentHeight)", Initialize this animation with the dimensions of the object being animated as well as the objects parents.
android.view.animation.AnimationSet,void reset(), Reset the initialization state of this animation.
android.view.animation.AnimationSet,void restrictDuration(long durationMillis), Ensure that the duration that this animation will run is not longer than durationMillis.
android.view.animation.AnimationSet,void scaleCurrentDuration(float scale), How much to scale the duration by.
android.view.animation.AnimationSet,void setDuration(long durationMillis), Sets the duration of every child animation.
android.view.animation.AnimationSet,void setFillAfter(boolean fillAfter)," If fillAfter is true, the transformation that this animation performed will persist when it is finished."
android.view.animation.AnimationSet,void setFillBefore(boolean fillBefore)," If fillBefore is true, this animation will apply its transformation before the start time of the animation."
android.view.animation.AnimationSet,void setRepeatMode(int repeatMode), Defines what this animation should do when it reaches the end.
android.view.animation.AnimationSet,void setStartOffset(long startOffset), When this animation should start relative to the start time.
android.view.animation.AnimationSet,void setStartTime(long startTimeMillis), Sets the start time of this animation and all child animations
android.view.animation.AnimationSet,boolean willChangeBounds(), Indicates whether or not this animation will affect the bounds of the animated view.
android.view.animation.AnimationSet,boolean willChangeTransformationMatrix(), Indicates whether or not this animation will affect the transformation matrix.
android.view.animation.AnimationUtils,static long currentAnimationTimeMillis(), Returns the current animation time in milliseconds.
android.view.animation.AnimationUtils,"static Animation loadAnimation(Context context, int id)", Loads an Animation object from a resource
android.view.animation.AnimationUtils,"static Interpolator loadInterpolator(Context context, int id)", Loads an Interpolator object from a resource
android.view.animation.AnimationUtils,"static LayoutAnimationController loadLayoutAnimation(Context context, int id)", Loads a LayoutAnimationController object from a resource
android.view.animation.AnimationUtils,"static Animation makeInAnimation(Context c, boolean fromLeft)", Make an animation for objects becoming visible.
android.view.animation.AnimationUtils,static Animation makeInChildBottomAnimation(Context c), Make an animation for objects becoming visible.
android.view.animation.AnimationUtils,"static Animation makeOutAnimation(Context c, boolean toRight)", Make an animation for objects becoming invisible.
android.view.animation.AnticipateInterpolator,float getInterpolation(float t),
android.view.animation.AnticipateOvershootInterpolator,float getInterpolation(float t),
android.view.animation.BaseInterpolator,Object clone(), Creates and returns a copy of this object.
android.view.animation.BaseInterpolator,boolean equals(Object obj)," Indicates whether some other object is ""equal to"" this one."
android.view.animation.BaseInterpolator,void finalize(), Called by the garbage collector on an object when garbage collection determines that there are no more references to the object.
android.view.animation.BaseInterpolator,final Class<?> getClass(), Returns the runtime class of this Object.
android.view.animation.BaseInterpolator,int hashCode(), Returns a hash code value for the object.
android.view.animation.BaseInterpolator,final void notify(), Wakes up a single thread that is waiting on this object's monitor.
android.view.animation.BaseInterpolator,final void notifyAll(), Wakes up all threads that are waiting on this object's monitor.
android.view.animation.BaseInterpolator,String toString(), Returns a string representation of the object.
android.view.animation.BaseInterpolator,"final void wait(long millis, int nanos)"," Causes the current thread to wait until another thread invokes the notify() method or the notifyAll() method for this object, or some other thread interrupts the current thread, or a certain amount of real time has elapsed."
android.view.animation.BaseInterpolator,final void wait(long millis)," Causes the current thread to wait until either another thread invokes the notify() method or the notifyAll() method for this object, or a specified amount of time has elapsed."
android.view.animation.BaseInterpolator,final void wait(), Causes the current thread to wait until another thread invokes the notify() method or the notifyAll() method for this object.
android.view.animation.BaseInterpolator,abstract float getInterpolation(float input), Maps a value representing the elapsed fraction of an animation to a value that represents the interpolated fraction.
android.view.animation.BounceInterpolator,float getInterpolation(float t),
android.view.animation.CycleInterpolator,float getInterpolation(float input),
android.view.animation.DecelerateInterpolator,float getInterpolation(float input),
android.view.animation.GridLayoutAnimationController.AnimationParameters,Object clone(), Creates and returns a copy of this object.
android.view.animation.GridLayoutAnimationController.AnimationParameters,boolean equals(Object obj)," Indicates whether some other object is ""equal to"" this one."
android.view.animation.GridLayoutAnimationController.AnimationParameters,void finalize(), Called by the garbage collector on an object when garbage collection determines that there are no more references to the object.
android.view.animation.GridLayoutAnimationController.AnimationParameters,final Class<?> getClass(), Returns the runtime class of this Object.
android.view.animation.GridLayoutAnimationController.AnimationParameters,int hashCode(), Returns a hash code value for the object.
android.view.animation.GridLayoutAnimationController.AnimationParameters,final void notify(), Wakes up a single thread that is waiting on this object's monitor.
android.view.animation.GridLayoutAnimationController.AnimationParameters,final void notifyAll(), Wakes up all threads that are waiting on this object's monitor.
android.view.animation.GridLayoutAnimationController.AnimationParameters,String toString(), Returns a string representation of the object.
android.view.animation.GridLayoutAnimationController.AnimationParameters,"final void wait(long millis, int nanos)"," Causes the current thread to wait until another thread invokes the notify() method or the notifyAll() method for this object, or some other thread interrupts the current thread, or a certain amount of real time has elapsed."
android.view.animation.GridLayoutAnimationController.AnimationParameters,final void wait(long millis)," Causes the current thread to wait until either another thread invokes the notify() method or the notifyAll() method for this object, or a specified amount of time has elapsed."
android.view.animation.GridLayoutAnimationController.AnimationParameters,final void wait(), Causes the current thread to wait until another thread invokes the notify() method or the notifyAll() method for this object.
android.view.animation.GridLayoutAnimationController,float getColumnDelay(), Returns the delay by which the children's animation are offset from one column to the other.
android.view.animation.GridLayoutAnimationController,int getDirection(), Returns the direction of the animation.
android.view.animation.GridLayoutAnimationController,int getDirectionPriority(), Returns the direction priority for the animation.
android.view.animation.GridLayoutAnimationController,float getRowDelay(), Returns the delay by which the children's animation are offset from one row to the other.
android.view.animation.GridLayoutAnimationController,void setColumnDelay(float columnDelay)," Sets the delay, as a fraction of the animation duration, by which the children's animations are offset from one column to the other."
android.view.animation.GridLayoutAnimationController,void setDirection(int direction), Sets the direction of the animation.
android.view.animation.GridLayoutAnimationController,void setDirectionPriority(int directionPriority), Specifies the direction priority of the animation.
android.view.animation.GridLayoutAnimationController,void setRowDelay(float rowDelay)," Sets the delay, as a fraction of the animation duration, by which the children's animations are offset from one row to the other."
android.view.animation.GridLayoutAnimationController,boolean willOverlap(), Indicates whether two children's animations will overlap.
android.view.animation.Interpolator,abstract float getInterpolation(float input), Maps a value representing the elapsed fraction of an animation to a value that represents the interpolated fraction.
android.view.animation.LayoutAnimationController.AnimationParameters,Object clone(), Creates and returns a copy of this object.
android.view.animation.LayoutAnimationController.AnimationParameters,boolean equals(Object obj)," Indicates whether some other object is ""equal to"" this one."
android.view.animation.LayoutAnimationController.AnimationParameters,void finalize(), Called by the garbage collector on an object when garbage collection determines that there are no more references to the object.
android.view.animation.LayoutAnimationController.AnimationParameters,final Class<?> getClass(), Returns the runtime class of this Object.
android.view.animation.LayoutAnimationController.AnimationParameters,int hashCode(), Returns a hash code value for the object.
android.view.animation.LayoutAnimationController.AnimationParameters,final void notify(), Wakes up a single thread that is waiting on this object's monitor.
android.view.animation.LayoutAnimationController.AnimationParameters,final void notifyAll(), Wakes up all threads that are waiting on this object's monitor.
android.view.animation.LayoutAnimationController.AnimationParameters,String toString(), Returns a string representation of the object.
android.view.animation.LayoutAnimationController.AnimationParameters,"final void wait(long millis, int nanos)"," Causes the current thread to wait until another thread invokes the notify() method or the notifyAll() method for this object, or some other thread interrupts the current thread, or a certain amount of real time has elapsed."
android.view.animation.LayoutAnimationController.AnimationParameters,final void wait(long millis)," Causes the current thread to wait until either another thread invokes the notify() method or the notifyAll() method for this object, or a specified amount of time has elapsed."
android.view.animation.LayoutAnimationController.AnimationParameters,final void wait(), Causes the current thread to wait until another thread invokes the notify() method or the notifyAll() method for this object.
android.view.animation.LayoutAnimationController,Animation getAnimation(), Returns the animation applied to each child of the view group on which this controller is set.
android.view.animation.LayoutAnimationController,final Animation getAnimationForView(View view), Returns the animation to be applied to the specified view.
android.view.animation.LayoutAnimationController,float getDelay(), Returns the delay by which the children's animation are offset.
android.view.animation.LayoutAnimationController,Interpolator getInterpolator(), Returns the interpolator used to interpolate the delays between the children.
android.view.animation.LayoutAnimationController,int getOrder(), Returns the order used to compute the delay of each child's animation.
android.view.animation.LayoutAnimationController,boolean isDone(), Indicates whether the layout animation is over or not.
android.view.animation.LayoutAnimationController,void setAnimation(Animation animation), Sets the animation to be run on each child of the view group on which this layout animation controller is .
android.view.animation.LayoutAnimationController,"void setAnimation(Context context, int resourceID)", Sets the animation to be run on each child of the view group on which this layout animation controller is .
android.view.animation.LayoutAnimationController,void setDelay(float delay)," Sets the delay, as a fraction of the animation duration, by which the children's animations are offset."
android.view.animation.LayoutAnimationController,"void setInterpolator(Context context, int resourceID)", Sets the interpolator used to interpolate the delays between the children.
android.view.animation.LayoutAnimationController,void setInterpolator(Interpolator interpolator), Sets the interpolator used to interpolate the delays between the children.
android.view.animation.LayoutAnimationController,void setOrder(int order), Sets the order used to compute the delay of each child's animation.
android.view.animation.LayoutAnimationController,void start(), Starts the animation.
android.view.animation.LayoutAnimationController,boolean willOverlap(), Indicates whether two children's animations will overlap.
android.view.animation.LinearInterpolator,float getInterpolation(float input),
android.view.animation.OvershootInterpolator,float getInterpolation(float t),
android.view.animation.PathInterpolator,float getInterpolation(float t)," Using the line in the Path in this interpolator that can be described as y = f(x), finds the y coordinate of the line given t as the x coordinate."
android.view.animation.RotateAnimation,"void initialize(int width, int height, int parentWidth, int parentHeight)", Initialize this animation with the dimensions of the object being animated as well as the objects parents.
android.view.animation.ScaleAnimation,"void initialize(int width, int height, int parentWidth, int parentHeight)", Initialize this animation with the dimensions of the object being animated as well as the objects parents.
android.view.animation.Transformation,void clear(), Reset the transformation to a state that leaves the object being animated in an unmodified state.
android.view.animation.Transformation,void compose(Transformation t)," Apply this Transformation to an existing Transformation, e.g."
android.view.animation.Transformation,float getAlpha(),
android.view.animation.Transformation,Matrix getMatrix(),
android.view.animation.Transformation,int getTransformationType(), Indicates the nature of this transformation.
android.view.animation.Transformation,void set(Transformation t), Clones the specified transformation.
android.view.animation.Transformation,void setAlpha(float alpha), Sets the degree of transparency
android.view.animation.Transformation,void setTransformationType(int transformationType), Sets the transformation type.
android.view.animation.Transformation,String toShortString(), Return a string representation of the transformation in a compact form.
android.view.animation.Transformation,String toString(), Returns a string representation of the object.
android.view.animation.TranslateAnimation,"void initialize(int width, int height, int parentWidth, int parentHeight)", Initialize this animation with the dimensions of the object being animated as well as the objects parents.
android.view.autofill.AutofillId,int describeContents(), Describe the kinds of special objects contained in this Parcelable instance's marshaled representation.
android.view.autofill.AutofillId,boolean equals(Object obj)," Indicates whether some other object is ""equal to"" this one."
android.view.autofill.AutofillId,int hashCode(), Returns a hash code value for the object.
android.view.autofill.AutofillId,String toString(), Returns a string representation of the object.
android.view.autofill.AutofillId,"void writeToParcel(Parcel parcel, int flags)", Flatten this object in to a Parcel.
android.view.autofill.AutofillManager.AutofillCallback,"void onAutofillEvent(View view, int virtualId, int event)", Called after a change in the autofill state associated with a virtual view.
android.view.autofill.AutofillManager.AutofillCallback,"void onAutofillEvent(View view, int event)", Called after a change in the autofill state associated with a view.
android.view.autofill.AutofillManager,void cancel(), Called to indicate the current autofill context should be cancelled.
android.view.autofill.AutofillManager,void commit(), Called to indicate the current autofill context should be commited.
android.view.autofill.AutofillManager,void disableAutofillServices(), If the app calling this API has enabled autofill services they will be disabled.
android.view.autofill.AutofillManager,ComponentName getAutofillServiceComponentName(), Returns the component name of the AutofillService that is enabled for the current user.
android.view.autofill.AutofillManager,List<String> getAvailableFieldClassificationAlgorithms(), Gets the name of all algorithms currently available for field classification.
android.view.autofill.AutofillManager,String getDefaultFieldClassificationAlgorithm(), Gets the name of the default algorithm used for field classification.
android.view.autofill.AutofillManager,UserData getUserData(), Gets the user data used for field classification.
android.view.autofill.AutofillManager,String getUserDataId(), Gets the id of the UserData used for field classification.
android.view.autofill.AutofillManager,boolean hasEnabledAutofillServices()," Returns true if the calling application provides a AutofillService that is enabled for the current user, or false otherwise."
android.view.autofill.AutofillManager,boolean isAutofillSupported(), Returns true if autofill is supported by the current device and is supported for this user.
android.view.autofill.AutofillManager,boolean isEnabled(), Checks whether autofill is enabled for the current user.
android.view.autofill.AutofillManager,boolean isFieldClassificationEnabled(), Checks if field classification is enabled.
android.view.autofill.AutofillManager,void notifyValueChanged(View view), Called to indicate the value of an autofillable View changed.
android.view.autofill.AutofillManager,"void notifyValueChanged(View view, int virtualId, AutofillValue value)", Called to indicate the value of an autofillable virtual view has changed.
android.view.autofill.AutofillManager,void notifyViewEntered(View view), Called when a View that supports autofill is entered.
android.view.autofill.AutofillManager,"void notifyViewEntered(View view, int virtualId, Rect absBounds)", Called when a virtual view that supports autofill is entered.
android.view.autofill.AutofillManager,"void notifyViewExited(View view, int virtualId)", Called when a virtual view that supports autofill is exited.
android.view.autofill.AutofillManager,void notifyViewExited(View view), Called when a View that supports autofill is exited.
android.view.autofill.AutofillManager,"void notifyViewVisibilityChanged(View view, int virtualId, boolean isVisible)", Called when a virtual view's visibility changed.
android.view.autofill.AutofillManager,"void notifyViewVisibilityChanged(View view, boolean isVisible)", Called when a view's visibility changed.
android.view.autofill.AutofillManager,void registerCallback(AutofillManager.AutofillCallback callback), Registers a AutofillManager.AutofillCallback to receive autofill events.
android.view.autofill.AutofillManager,"void requestAutofill(View view, int virtualId, Rect absBounds)", Explicitly requests a new autofill context for virtual views.
android.view.autofill.AutofillManager,void requestAutofill(View view), Explicitly requests a new autofill context.
android.view.autofill.AutofillManager,void setUserData(UserData userData)," Sets the UserData used for field classification Note: This method should only be called by an app providing an autofill service, and it's ignored if the caller currently doesn't have an enabled autofill service for the user."
android.view.autofill.AutofillManager,void unregisterCallback(AutofillManager.AutofillCallback callback), Unregisters a AutofillManager.AutofillCallback to receive autofill events.
android.view.autofill.AutofillValue,int describeContents(), Describe the kinds of special objects contained in this Parcelable instance's marshaled representation.
android.view.autofill.AutofillValue,boolean equals(Object obj)," Indicates whether some other object is ""equal to"" this one."
android.view.autofill.AutofillValue,static AutofillValue forDate(long value), Creates a new AutofillValue to autofill a View representing a date.
android.view.autofill.AutofillValue,static AutofillValue forList(int value), Creates a new AutofillValue to autofill a View representing a selection list.
android.view.autofill.AutofillValue,static AutofillValue forText(CharSequence value), Creates a new AutofillValue to autofill a View representing a text field.
android.view.autofill.AutofillValue,static AutofillValue forToggle(boolean value), Creates a new AutofillValue to autofill a View representing a toggable field.
android.view.autofill.AutofillValue,long getDateValue(), Gets the value to autofill a date field.
android.view.autofill.AutofillValue,int getListValue(), Gets the value to autofill a selection list field.
android.view.autofill.AutofillValue,CharSequence getTextValue(), Gets the value to autofill a text field.
android.view.autofill.AutofillValue,boolean getToggleValue(), Gets the value to autofill a toggable field.
android.view.autofill.AutofillValue,int hashCode(), Returns a hash code value for the object.
android.view.autofill.AutofillValue,boolean isDate(), Checks is this is a date value.
android.view.autofill.AutofillValue,boolean isList(), Checks is this is a list value.
android.view.autofill.AutofillValue,boolean isText(), Checks is this is a text value.
android.view.autofill.AutofillValue,boolean isToggle(), Checks is this is a toggle value.
android.view.autofill.AutofillValue,String toString(), Returns a string representation of the object.
android.view.autofill.AutofillValue,"void writeToParcel(Parcel parcel, int flags)", Flatten this object in to a Parcel.
android.view.Choreographer.FrameCallback,abstract void doFrame(long frameTimeNanos), Called when a new display frame is being rendered.
android.view.Choreographer,static Choreographer getInstance(), Gets the choreographer for the calling thread.
android.view.Choreographer,void postFrameCallback(Choreographer.FrameCallback callback), Posts a frame callback to run on the next frame.
android.view.Choreographer,"void postFrameCallbackDelayed(Choreographer.FrameCallback callback, long delayMillis)", Posts a frame callback to run on the next frame after the specified delay.
android.view.Choreographer,void removeFrameCallback(Choreographer.FrameCallback callback), Removes a previously posted frame callback.
android.view.CollapsibleActionView,abstract void onActionViewCollapsed(), Called when this view is collapsed as an action view.
android.view.CollapsibleActionView,abstract void onActionViewExpanded(), Called when this view is expanded as an action view.
android.view.ContextMenu,abstract void clearHeader(), Clears the header of the context menu.
android.view.ContextMenu,abstract ContextMenu setHeaderIcon(int iconRes), Sets the context menu header's icon to the icon given in iconRes resource id.
android.view.ContextMenu,abstract ContextMenu setHeaderIcon(Drawable icon), Sets the context menu header's icon to the icon given in icon Drawable.
android.view.ContextMenu,abstract ContextMenu setHeaderTitle(int titleRes), Sets the context menu header's title to the title given in titleRes resource identifier.
android.view.ContextMenu,abstract ContextMenu setHeaderTitle(CharSequence title), Sets the context menu header's title to the title given in title.
android.view.ContextMenu,abstract ContextMenu setHeaderView(View view), Sets the header of the context menu to the View given in view.
android.view.ContextThemeWrapper,void applyOverrideConfiguration(Configuration overrideConfiguration)," Call to set an ""override configuration"" on this context -- this is a configuration that replies one or more values of the standard configuration that is applied to the context."
android.view.ContextThemeWrapper,AssetManager getAssets(), Returns an AssetManager instance for the application's package.
android.view.ContextThemeWrapper,Resources getResources(), Returns a Resources instance for the application's package.
android.view.ContextThemeWrapper,Object getSystemService(String name), Return the handle to a system-level service by name.
android.view.ContextThemeWrapper,Resources.Theme getTheme(), Return the Theme object associated with this Context.
android.view.ContextThemeWrapper,void setTheme(int resid), Set the base theme for this context.
android.view.Display.HdrCapabilities,int describeContents(), Describe the kinds of special objects contained in this Parcelable instance's marshaled representation.
android.view.Display.HdrCapabilities,boolean equals(Object other)," Indicates whether some other object is ""equal to"" this one."
android.view.Display.HdrCapabilities,float getDesiredMaxAverageLuminance(), Returns the desired content max frame-average luminance data in cd/m2 for this display.
android.view.Display.HdrCapabilities,float getDesiredMaxLuminance(), Returns the desired content max luminance data in cd/m2 for this display.
android.view.Display.HdrCapabilities,float getDesiredMinLuminance(), Returns the desired content min luminance data in cd/m2 for this display.
android.view.Display.HdrCapabilities,int[] getSupportedHdrTypes(), Gets the supported HDR types of this display.
android.view.Display.HdrCapabilities,int hashCode(), Returns a hash code value for the object.
android.view.Display.HdrCapabilities,"void writeToParcel(Parcel dest, int flags)", Flatten this object in to a Parcel.
android.view.Display.Mode,int describeContents(), Describe the kinds of special objects contained in this Parcelable instance's marshaled representation.
android.view.Display.Mode,boolean equals(Object other)," Indicates whether some other object is ""equal to"" this one."
android.view.Display.Mode,int getModeId(), Returns this mode's id.
android.view.Display.Mode,int getPhysicalHeight(), Returns the physical height of the display in pixels when configured in this mode's resolution.
android.view.Display.Mode,int getPhysicalWidth(), Returns the physical width of the display in pixels when configured in this mode's resolution.
android.view.Display.Mode,float getRefreshRate(), Returns the refresh rate in frames per second.
android.view.Display.Mode,int hashCode(), Returns a hash code value for the object.
android.view.Display.Mode,String toString(), Returns a string representation of the object.
android.view.Display.Mode,"void writeToParcel(Parcel out, int parcelableFlags)", Flatten this object in to a Parcel.
android.view.Display,long getAppVsyncOffsetNanos()," Gets the app VSYNC offset, in nanoseconds."
android.view.Display,"void getCurrentSizeRange(Point outSmallestSize, Point outLargestSize)"," Return the range of display sizes an application can expect to encounter under normal operation, as long as there is no physical change in screen size."
android.view.Display,int getDisplayId(), Gets the display id.
android.view.Display,int getFlags(), Returns a combination of flags that describe the capabilities of the display.
android.view.Display,Display.HdrCapabilities getHdrCapabilities(), Returns the display's HDR capabilities.
android.view.Display,int getHeight(), This method was deprecated in API level 13. Use getSize(Point) instead.
android.view.Display,void getMetrics(DisplayMetrics outMetrics), Gets display metrics that describe the size and density of this display.
android.view.Display,Display.Mode getMode(), Returns the active mode of the display.
android.view.Display,String getName(), Gets the name of the display.
android.view.Display,int getOrientation(), This method was deprecated in API level 8. use getRotation()
android.view.Display,int getPixelFormat(), This method was deprecated in API level 17. This method is no longer supported. The result is always RGBA_8888.
android.view.Display,long getPresentationDeadlineNanos(), This is how far in advance a buffer must be queued for presentation at a given time.
android.view.Display,void getRealMetrics(DisplayMetrics outMetrics), Gets display metrics based on the real size of this display.
android.view.Display,void getRealSize(Point outSize), Gets the real size of the display without subtracting any window decor or applying any compatibility scale factors.
android.view.Display,void getRectSize(Rect outSize)," Gets the size of the display as a rectangle, in pixels."
android.view.Display,float getRefreshRate(), Gets the refresh rate of this display in frames per second.
android.view.Display,int getRotation()," Returns the rotation of the screen from its ""natural"" orientation."
android.view.Display,void getSize(Point outSize)," Gets the size of the display, in pixels."
android.view.Display,int getState()," Gets the state of the display, such as whether it is on or off."
android.view.Display,Mode[] getSupportedModes(), Gets the supported modes of this display.
android.view.Display,float[] getSupportedRefreshRates(), This method was deprecated in API level 23. use getSupportedModes() instead
android.view.Display,int getWidth(), This method was deprecated in API level 13. Use getSize(Point) instead.
android.view.Display,boolean isHdr(), Returns whether this display supports any HDR type.
android.view.Display,boolean isValid()," Returns true if this display is still valid, false if the display has been removed."
android.view.Display,boolean isWideColorGamut(), Returns whether this display can be used to display wide color gamut content.
android.view.Display,String toString(), Returns a string representation of the object.
android.view.DisplayCutout,boolean equals(Object o)," Indicates whether some other object is ""equal to"" this one."
android.view.DisplayCutout,Region getBounds(), Returns the bounding region of the cutout.
android.view.DisplayCutout,int getSafeInsetBottom(), Returns the inset from the bottom which avoids the display cutout.
android.view.DisplayCutout,int getSafeInsetLeft(), Returns the inset from the left which avoids the display cutout.
android.view.DisplayCutout,int getSafeInsetRight(), Returns the inset from the right which avoids the display cutout.
android.view.DisplayCutout,int getSafeInsetTop(), Returns the inset from the top which avoids the display cutout.
android.view.DisplayCutout,int hashCode(), Returns a hash code value for the object.
android.view.DisplayCutout,String toString(), Returns a string representation of the object.
android.view.DragAndDropPermissions,int describeContents(), Describe the kinds of special objects contained in this Parcelable instance's marshaled representation.
android.view.DragAndDropPermissions,void release(), Revoke permissions explicitly.
android.view.DragAndDropPermissions,"void writeToParcel(Parcel destination, int flags)", Flatten this object in to a Parcel.
android.view.DragEvent,int describeContents(), Returns information about the Parcel representation of this DragEvent object.
android.view.DragEvent,int getAction(), Inspect the action value of this event.
android.view.DragEvent,ClipData getClipData(), Returns the ClipData object sent to the system as part of the call to startDragAndDrop().
android.view.DragEvent,ClipDescription getClipDescription(), Returns the ClipDescription object contained in the ClipData object sent to the system as part of the call to startDragAndDrop().
android.view.DragEvent,Object getLocalState(), Returns the local state object sent to the system as part of the call to startDragAndDrop().
android.view.DragEvent,boolean getResult(), Returns an indication of the result of the drag and drop operation.
android.view.DragEvent,float getX(), Gets the X coordinate of the drag point.
android.view.DragEvent,float getY(), Gets the Y coordinate of the drag point.
android.view.DragEvent,String toString()," Returns a string containing a concise, human-readable representation of this DragEvent object."
android.view.DragEvent,"void writeToParcel(Parcel dest, int flags)", Creates a Parcel object from this DragEvent object.
android.view.FocusFinder,"View findNearestTouchable(ViewGroup root, int x, int y, int direction, int[] deltas)", Find the nearest touchable view to the specified view.
android.view.FocusFinder,"final View findNextFocus(ViewGroup root, View focused, int direction)"," Find the next view to take focus in root's descendants, starting from the view that currently is focused."
android.view.FocusFinder,"View findNextFocusFromRect(ViewGroup root, Rect focusedRect, int direction)"," Find the next view to take focus in root's descendants, searching from a particular rectangle in root's coordinates."
android.view.FocusFinder,"View findNextKeyboardNavigationCluster(View root, View currentCluster, int direction)", Find the root of the next keyboard navigation cluster after the current one.
android.view.FocusFinder,static FocusFinder getInstance(), Get the focus finder for this thread.
android.view.FrameMetrics,long getMetric(int id), Retrieves the value associated with Metric identifier id for this frame.
android.view.FrameStats,final long getEndTimeNano(), Gets the end time of the interval for which these statistics apply.
android.view.FrameStats,final int getFrameCount(), Gets the number of frames for which there is data.
android.view.FrameStats,final long getFramePresentedTimeNano(int index), Get the time a frame at a given index was presented.
android.view.FrameStats,final long getRefreshPeriodNano(), Gets the refresh period of the display hosting the window(s) for which these statistics apply.
android.view.FrameStats,final long getStartTimeNano(), Gets the start time of the interval for which these statistics apply.
android.view.GestureDetector.OnContextClickListener,abstract boolean onContextClick(MotionEvent e), Notified when a context click occurs.
android.view.GestureDetector.OnDoubleTapListener,abstract boolean onDoubleTap(MotionEvent e), Notified when a double-tap occurs.
android.view.GestureDetector.OnDoubleTapListener,abstract boolean onDoubleTapEvent(MotionEvent e)," Notified when an event within a double-tap gesture occurs, including the down, move, and up events."
android.view.GestureDetector.OnDoubleTapListener,abstract boolean onSingleTapConfirmed(MotionEvent e), Notified when a single-tap occurs.
android.view.GestureDetector.OnGestureListener,abstract boolean onDown(MotionEvent e), Notified when a tap occurs with the down MotionEvent that triggered it.
android.view.GestureDetector.OnGestureListener,"abstract boolean onFling(MotionEvent e1, MotionEvent e2, float velocityX, float velocityY)", Notified of a fling event when it occurs with the initial on down MotionEvent and the matching up MotionEvent.
android.view.GestureDetector.OnGestureListener,abstract void onLongPress(MotionEvent e), Notified when a long press occurs with the initial on down MotionEvent that trigged it.
android.view.GestureDetector.OnGestureListener,"abstract boolean onScroll(MotionEvent e1, MotionEvent e2, float distanceX, float distanceY)", Notified when a scroll occurs with the initial on down MotionEvent and the current move MotionEvent.
android.view.GestureDetector.OnGestureListener,abstract void onShowPress(MotionEvent e), The user has performed a down MotionEvent and not performed a move or up yet.
android.view.GestureDetector.OnGestureListener,abstract boolean onSingleTapUp(MotionEvent e), Notified when a tap occurs with the up MotionEvent that triggered it.
android.view.GestureDetector.SimpleOnGestureListener,boolean onContextClick(MotionEvent e), Notified when a context click occurs.
android.view.GestureDetector.SimpleOnGestureListener,boolean onDoubleTap(MotionEvent e), Notified when a double-tap occurs.
android.view.GestureDetector.SimpleOnGestureListener,boolean onDoubleTapEvent(MotionEvent e)," Notified when an event within a double-tap gesture occurs, including the down, move, and up events."
android.view.GestureDetector.SimpleOnGestureListener,boolean onDown(MotionEvent e), Notified when a tap occurs with the down MotionEvent that triggered it.
android.view.GestureDetector.SimpleOnGestureListener,"boolean onFling(MotionEvent e1, MotionEvent e2, float velocityX, float velocityY)", Notified of a fling event when it occurs with the initial on down MotionEvent and the matching up MotionEvent.
android.view.GestureDetector.SimpleOnGestureListener,void onLongPress(MotionEvent e), Notified when a long press occurs with the initial on down MotionEvent that trigged it.
android.view.GestureDetector.SimpleOnGestureListener,"boolean onScroll(MotionEvent e1, MotionEvent e2, float distanceX, float distanceY)", Notified when a scroll occurs with the initial on down MotionEvent and the current move MotionEvent.
android.view.GestureDetector.SimpleOnGestureListener,void onShowPress(MotionEvent e), The user has performed a down MotionEvent and not performed a move or up yet.
android.view.GestureDetector.SimpleOnGestureListener,boolean onSingleTapConfirmed(MotionEvent e), Notified when a single-tap occurs.
android.view.GestureDetector.SimpleOnGestureListener,boolean onSingleTapUp(MotionEvent e), Notified when a tap occurs with the up MotionEvent that triggered it.
android.view.GestureDetector,boolean isLongpressEnabled(),
android.view.GestureDetector,boolean onGenericMotionEvent(MotionEvent ev), Analyzes the given generic motion event and if applicable triggers the appropriate callbacks on the GestureDetector.OnGestureListener supplied.
android.view.GestureDetector,boolean onTouchEvent(MotionEvent ev), Analyzes the given motion event and if applicable triggers the appropriate callbacks on the GestureDetector.OnGestureListener supplied.
android.view.GestureDetector,void setContextClickListener(GestureDetector.OnContextClickListener onContextClickListener), Sets the listener which will be called for context clicks.
android.view.GestureDetector,void setIsLongpressEnabled(boolean isLongpressEnabled)," Set whether longpress is enabled, if this is enabled when a user presses and holds down you get a longpress event and nothing further."
android.view.GestureDetector,void setOnDoubleTapListener(GestureDetector.OnDoubleTapListener onDoubleTapListener), Sets the listener which will be called for double-tap and related gestures.
android.view.Gravity,"static void apply(int gravity, int w, int h, Rect container, int xAdj, int yAdj, Rect outRect)", Apply a gravity constant to an object.
android.view.Gravity,"static void apply(int gravity, int w, int h, Rect container, Rect outRect, int layoutDirection)", Apply a gravity constant to an object and take care if layout direction is RTL or not.
android.view.Gravity,"static void apply(int gravity, int w, int h, Rect container, int xAdj, int yAdj, Rect outRect, int layoutDirection)", Apply a gravity constant to an object.
android.view.Gravity,"static void apply(int gravity, int w, int h, Rect container, Rect outRect)", Apply a gravity constant to an object.
android.view.Gravity,"static void applyDisplay(int gravity, Rect display, Rect inoutObj)"," Apply additional gravity behavior based on the overall ""display"" that an object exists in."
android.view.Gravity,"static void applyDisplay(int gravity, Rect display, Rect inoutObj, int layoutDirection)"," Apply additional gravity behavior based on the overall ""display"" that an object exists in."
android.view.Gravity,"static int getAbsoluteGravity(int gravity, int layoutDirection)", Convert script specific gravity to absolute horizontal value.
android.view.Gravity,static boolean isHorizontal(int gravity), Indicate whether the supplied gravity has an horizontal pull.
android.view.Gravity,static boolean isVertical(int gravity), Indicate whether the supplied gravity has a vertical pull.
android.view.HapticFeedbackConstants,Object clone(), Creates and returns a copy of this object.
android.view.HapticFeedbackConstants,boolean equals(Object obj)," Indicates whether some other object is ""equal to"" this one."
android.view.HapticFeedbackConstants,void finalize(), Called by the garbage collector on an object when garbage collection determines that there are no more references to the object.
android.view.HapticFeedbackConstants,final Class<?> getClass(), Returns the runtime class of this Object.
android.view.HapticFeedbackConstants,int hashCode(), Returns a hash code value for the object.
android.view.HapticFeedbackConstants,final void notify(), Wakes up a single thread that is waiting on this object's monitor.
android.view.HapticFeedbackConstants,final void notifyAll(), Wakes up all threads that are waiting on this object's monitor.
android.view.HapticFeedbackConstants,String toString(), Returns a string representation of the object.
android.view.HapticFeedbackConstants,"final void wait(long millis, int nanos)"," Causes the current thread to wait until another thread invokes the notify() method or the notifyAll() method for this object, or some other thread interrupts the current thread, or a certain amount of real time has elapsed."
android.view.HapticFeedbackConstants,final void wait(long millis)," Causes the current thread to wait until either another thread invokes the notify() method or the notifyAll() method for this object, or a specified amount of time has elapsed."
android.view.HapticFeedbackConstants,final void wait(), Causes the current thread to wait until another thread invokes the notify() method or the notifyAll() method for this object.
android.view.InflateException,final void addSuppressed(Throwable exception), Appends the specified exception to the exceptions that were suppressed in order to deliver this exception.
android.view.InflateException,Throwable fillInStackTrace(), Fills in the execution stack trace.
android.view.InflateException,Throwable getCause(), Returns the cause of this throwable or null if the cause is nonexistent or unknown.
android.view.InflateException,String getLocalizedMessage(), Creates a localized description of this throwable.
android.view.InflateException,String getMessage(), Returns the detail message string of this throwable.
android.view.InflateException,StackTraceElement[] getStackTrace(), Provides programmatic access to the stack trace information printed by printStackTrace().
android.view.InflateException,final Throwable[] getSuppressed()," Returns an array containing all of the exceptions that were suppressed, typically by the try-with-resources statement, in order to deliver this exception."
android.view.InflateException,Throwable initCause(Throwable cause), Initializes the cause of this throwable to the specified value.
android.view.InflateException,void printStackTrace(), Prints this throwable and its backtrace to the standard error stream.
android.view.InflateException,void printStackTrace(PrintWriter s), Prints this throwable and its backtrace to the specified print writer.
android.view.InflateException,void printStackTrace(PrintStream s), Prints this throwable and its backtrace to the specified print stream.
android.view.InflateException,void setStackTrace(StackTraceElement[] stackTrace), Sets the stack trace elements that will be returned by getStackTrace() and printed by printStackTrace() and related methods.
android.view.InflateException,String toString(), Returns a short description of this throwable.
android.view.InflateException,Object clone(), Creates and returns a copy of this object.
android.view.InflateException,boolean equals(Object obj)," Indicates whether some other object is ""equal to"" this one."
android.view.InflateException,void finalize(), Called by the garbage collector on an object when garbage collection determines that there are no more references to the object.
android.view.InflateException,final Class<?> getClass(), Returns the runtime class of this Object.
android.view.InflateException,int hashCode(), Returns a hash code value for the object.
android.view.InflateException,final void notify(), Wakes up a single thread that is waiting on this object's monitor.
android.view.InflateException,final void notifyAll(), Wakes up all threads that are waiting on this object's monitor.
android.view.InflateException,String toString(), Returns a string representation of the object.
android.view.InflateException,"final void wait(long millis, int nanos)"," Causes the current thread to wait until another thread invokes the notify() method or the notifyAll() method for this object, or some other thread interrupts the current thread, or a certain amount of real time has elapsed."
android.view.InflateException,final void wait(long millis)," Causes the current thread to wait until either another thread invokes the notify() method or the notifyAll() method for this object, or a specified amount of time has elapsed."
android.view.InflateException,final void wait(), Causes the current thread to wait until another thread invokes the notify() method or the notifyAll() method for this object.
android.view.InputDevice.MotionRange,int getAxis(), Gets the axis id.
android.view.InputDevice.MotionRange,float getFlat(), Gets the extent of the center flat position with respect to this axis.
android.view.InputDevice.MotionRange,float getFuzz(), Gets the error tolerance for input device measurements with respect to this axis.
android.view.InputDevice.MotionRange,float getMax(), Gets the inclusive maximum value for the axis.
android.view.InputDevice.MotionRange,float getMin(), Gets the inclusive minimum value for the axis.
android.view.InputDevice.MotionRange,float getRange(), Gets the range of the axis (difference between maximum and minimum).
android.view.InputDevice.MotionRange,float getResolution(), Gets the resolution for input device measurements with respect to this axis.
android.view.InputDevice.MotionRange,int getSource(), Gets the source for which the axis is defined.
android.view.InputDevice.MotionRange,boolean isFromSource(int source), Determines whether the event is from the given source.
android.view.InputDevice,int describeContents(), Describe the kinds of special objects contained in this Parcelable instance's marshaled representation.
android.view.InputDevice,int getControllerNumber(), The controller number for a given input device.
android.view.InputDevice,String getDescriptor()," Gets the input device descriptor, which is a stable identifier for an input device."
android.view.InputDevice,static InputDevice getDevice(int id), Gets information about the input device with the specified id.
android.view.InputDevice,static int[] getDeviceIds(), Gets the ids of all input devices in the system.
android.view.InputDevice,int getId(), Gets the input device id.
android.view.InputDevice,KeyCharacterMap getKeyCharacterMap(), Gets the key character map associated with this input device.
android.view.InputDevice,int getKeyboardType(), Gets the keyboard type.
android.view.InputDevice,InputDevice.MotionRange getMotionRange(int axis), Gets information about the range of values for a particular MotionEvent axis.
android.view.InputDevice,"InputDevice.MotionRange getMotionRange(int axis, int source)", Gets information about the range of values for a particular MotionEvent axis used by a particular source on the device.
android.view.InputDevice,List<InputDevice.MotionRange> getMotionRanges(), Gets the ranges for all axes supported by the device.
android.view.InputDevice,String getName(), Gets the name of this input device.
android.view.InputDevice,int getProductId()," Gets the product id for the given device, if available."
android.view.InputDevice,int getSources(), Gets the input sources supported by this input device as a combined bitfield.
android.view.InputDevice,int getVendorId()," Gets the vendor id for the given device, if available."
android.view.InputDevice,Vibrator getVibrator()," Gets the vibrator service associated with the device, if there is one."
android.view.InputDevice,boolean[] hasKeys(int... keys), Gets whether the device is capable of producing the list of keycodes.
android.view.InputDevice,boolean hasMicrophone(), Reports whether the device has a built-in microphone.
android.view.InputDevice,boolean isEnabled(), Returns true if input device is enabled.
android.view.InputDevice,boolean isVirtual()," Returns true if the device is a virtual input device rather than a real one, such as the virtual keyboard (see VIRTUAL_KEYBOARD)."
android.view.InputDevice,boolean supportsSource(int source), Determines whether the input device supports the given source or sources.
android.view.InputDevice,String toString(), Returns a string representation of the object.
android.view.InputDevice,"void writeToParcel(Parcel out, int flags)", Flatten this object in to a Parcel.
android.view.InputEvent,int describeContents(), Describe the kinds of special objects contained in this Parcelable instance's marshaled representation.
android.view.InputEvent,final InputDevice getDevice(), Gets the device that this event came from.
android.view.InputEvent,abstract int getDeviceId(), Gets the id for the device that this event came from.
android.view.InputEvent,abstract long getEventTime()," Retrieve the time this event occurred, in the uptimeMillis() time base."
android.view.InputEvent,abstract int getSource(), Gets the source of the event.
android.view.InputEvent,boolean isFromSource(int source), Determines whether the event is from the given source.
android.view.inputmethod.BaseInputConnection,boolean beginBatchEdit(), Default implementation does nothing.
android.view.inputmethod.BaseInputConnection,boolean clearMetaKeyStates(int states)," Default implementation uses MetaKeyKeyListener.clearMetaKeyState(long, int) to clear the state."
android.view.inputmethod.BaseInputConnection,void closeConnection(), Default implementation calls finishComposingText().
android.view.inputmethod.BaseInputConnection,boolean commitCompletion(CompletionInfo text), Default implementation does nothing and returns false.
android.view.inputmethod.BaseInputConnection,"boolean commitContent(InputContentInfo inputContentInfo, int flags, Bundle opts)", The default implementation does nothing.
android.view.inputmethod.BaseInputConnection,boolean commitCorrection(CorrectionInfo correctionInfo), Default implementation does nothing and returns false.
android.view.inputmethod.BaseInputConnection,"boolean commitText(CharSequence text, int newCursorPosition)", Default implementation replaces any existing composing text with the given text.
android.view.inputmethod.BaseInputConnection,"boolean deleteSurroundingText(int beforeLength, int afterLength)", The default implementation performs the deletion around the current selection position of the editable text.
android.view.inputmethod.BaseInputConnection,"boolean deleteSurroundingTextInCodePoints(int beforeLength, int afterLength)", The default implementation performs the deletion around the current selection position of the editable text.
android.view.inputmethod.BaseInputConnection,boolean endBatchEdit(), Default implementation does nothing.
android.view.inputmethod.BaseInputConnection,boolean finishComposingText(), The default implementation removes the composing state from the current editable text.
android.view.inputmethod.BaseInputConnection,static int getComposingSpanEnd(Spannable text),
android.view.inputmethod.BaseInputConnection,static int getComposingSpanStart(Spannable text),
android.view.inputmethod.BaseInputConnection,int getCursorCapsMode(int reqModes)," The default implementation uses TextUtils.getCapsMode to get the cursor caps mode for the current selection position in the editable text, unless in dummy mode in which case 0 is always returned."
android.view.inputmethod.BaseInputConnection,Editable getEditable(), Return the target of edit operations.
android.view.inputmethod.BaseInputConnection,"ExtractedText getExtractedText(ExtractedTextRequest request, int flags)", The default implementation always returns null.
android.view.inputmethod.BaseInputConnection,Handler getHandler(), Called by the InputMethodManager to enable application developers to specify a dedicated Handler on which incoming IPC method calls from input methods will be dispatched.
android.view.inputmethod.BaseInputConnection,CharSequence getSelectedText(int flags)," The default implementation returns the text currently selected, or null if none is selected."
android.view.inputmethod.BaseInputConnection,"CharSequence getTextAfterCursor(int length, int flags)", The default implementation returns the given amount of text from the current cursor position in the buffer.
android.view.inputmethod.BaseInputConnection,"CharSequence getTextBeforeCursor(int length, int flags)", The default implementation returns the given amount of text from the current cursor position in the buffer.
android.view.inputmethod.BaseInputConnection,boolean performContextMenuAction(int id), The default implementation does nothing.
android.view.inputmethod.BaseInputConnection,boolean performEditorAction(int actionCode), The default implementation turns this into the enter key.
android.view.inputmethod.BaseInputConnection,"boolean performPrivateCommand(String action, Bundle data)", The default implementation does nothing.
android.view.inputmethod.BaseInputConnection,static final void removeComposingSpans(Spannable text),
android.view.inputmethod.BaseInputConnection,boolean reportFullscreenMode(boolean enabled), Updates InputMethodManager with the current fullscreen mode.
android.view.inputmethod.BaseInputConnection,boolean requestCursorUpdates(int cursorUpdateMode), The default implementation does nothing.
android.view.inputmethod.BaseInputConnection,boolean sendKeyEvent(KeyEvent event), Provides standard implementation for sending a key event to the window attached to the input connection's view.
android.view.inputmethod.BaseInputConnection,"boolean setComposingRegion(int start, int end)", Mark a certain region of text as composing text.
android.view.inputmethod.BaseInputConnection,static void setComposingSpans(Spannable text),
android.view.inputmethod.BaseInputConnection,"boolean setComposingText(CharSequence text, int newCursorPosition)"," The default implementation places the given text into the editable, replacing any existing composing text."
android.view.inputmethod.BaseInputConnection,"boolean setSelection(int start, int end)", The default implementation changes the selection position in the current editable text.
android.view.inputmethod.CompletionInfo,int describeContents(), Describe the kinds of special objects contained in this Parcelable instance's marshaled representation.
android.view.inputmethod.CompletionInfo,long getId()," Return the abstract identifier for this completion, typically corresponding to the id associated with it in the original adapter."
android.view.inputmethod.CompletionInfo,CharSequence getLabel()," Return the user-visible label for the completion, or null if the plain text should be shown."
android.view.inputmethod.CompletionInfo,int getPosition()," Return the original position of this completion, typically corresponding to its position in the original adapter."
android.view.inputmethod.CompletionInfo,CharSequence getText(), Return the actual text associated with this completion.
android.view.inputmethod.CompletionInfo,String toString(), Returns a string representation of the object.
android.view.inputmethod.CompletionInfo,"void writeToParcel(Parcel dest, int flags)", Used to package this object into a Parcel.
android.view.inputmethod.CorrectionInfo,int describeContents(), Describe the kinds of special objects contained in this Parcelable instance's marshaled representation.
android.view.inputmethod.CorrectionInfo,CharSequence getNewText(), Return the new text that corrects what was typed by the user.
android.view.inputmethod.CorrectionInfo,int getOffset(), Return the offset position of this correction in the text.
android.view.inputmethod.CorrectionInfo,CharSequence getOldText()," Return the text that has actually been typed by the user, and which has been corrected."
android.view.inputmethod.CorrectionInfo,String toString(), Returns a string representation of the object.
android.view.inputmethod.CorrectionInfo,"void writeToParcel(Parcel dest, int flags)", Used to package this object into a Parcel.
android.view.inputmethod.CursorAnchorInfo.Builder,"CursorAnchorInfo.Builder addCharacterBounds(int index, float left, float top, float right, float bottom, int flags)", Adds the bounding box of the character specified with the index.
android.view.inputmethod.CursorAnchorInfo.Builder,CursorAnchorInfo build(),
android.view.inputmethod.CursorAnchorInfo.Builder,void reset(), Resets the internal state so that this instance can be reused to build another instance of CursorAnchorInfo.
android.view.inputmethod.CursorAnchorInfo.Builder,"CursorAnchorInfo.Builder setComposingText(int composingTextStart, CharSequence composingText)", Sets the text range of the composing text.
android.view.inputmethod.CursorAnchorInfo.Builder,"CursorAnchorInfo.Builder setInsertionMarkerLocation(float horizontalPosition, float lineTop, float lineBaseline, float lineBottom, int flags)", Sets the location of the text insertion point (zero width cursor) as a rectangle in local coordinates.
android.view.inputmethod.CursorAnchorInfo.Builder,CursorAnchorInfo.Builder setMatrix(Matrix matrix), Sets the matrix that transforms local coordinates into screen coordinates.
android.view.inputmethod.CursorAnchorInfo.Builder,"CursorAnchorInfo.Builder setSelectionRange(int newStart, int newEnd)", Sets the text range of the selection.
android.view.inputmethod.CursorAnchorInfo,int describeContents(), Describe the kinds of special objects contained in this Parcelable instance's marshaled representation.
android.view.inputmethod.CursorAnchorInfo,boolean equals(Object obj)," Indicates whether some other object is ""equal to"" this one."
android.view.inputmethod.CursorAnchorInfo,RectF getCharacterBounds(int index), Returns a new instance of RectF that indicates the location of the character specified with the index.
android.view.inputmethod.CursorAnchorInfo,int getCharacterBoundsFlags(int index), Returns the flags associated with the character bounds specified with the index.
android.view.inputmethod.CursorAnchorInfo,CharSequence getComposingText(), Returns the entire composing text.
android.view.inputmethod.CursorAnchorInfo,int getComposingTextStart(), Returns the index where the composing text starts.
android.view.inputmethod.CursorAnchorInfo,float getInsertionMarkerBaseline()," Returns the vertical baseline position of the insertion marker, in the local coordinates that will be transformed with getMatrix() when rendered on the screen."
android.view.inputmethod.CursorAnchorInfo,float getInsertionMarkerBottom()," Returns the vertical bottom position of the insertion marker, in the local coordinates that will be transformed with getMatrix() when rendered on the screen."
android.view.inputmethod.CursorAnchorInfo,int getInsertionMarkerFlags(), Returns the flag of the insertion marker.
android.view.inputmethod.CursorAnchorInfo,float getInsertionMarkerHorizontal()," Returns the horizontal start of the insertion marker, in the local coordinates that will be transformed with getMatrix() when rendered on the screen."
android.view.inputmethod.CursorAnchorInfo,float getInsertionMarkerTop()," Returns the vertical top position of the insertion marker, in the local coordinates that will be transformed with getMatrix() when rendered on the screen."
android.view.inputmethod.CursorAnchorInfo,Matrix getMatrix(), Returns a new instance of Matrix that indicates the transformation matrix that is to be applied other positional data in this class.
android.view.inputmethod.CursorAnchorInfo,int getSelectionEnd(), Returns the index where the selection ends.
android.view.inputmethod.CursorAnchorInfo,int getSelectionStart(), Returns the index where the selection starts.
android.view.inputmethod.CursorAnchorInfo,int hashCode(), Returns a hash code value for the object.
android.view.inputmethod.CursorAnchorInfo,String toString(), Returns a string representation of the object.
android.view.inputmethod.CursorAnchorInfo,"void writeToParcel(Parcel dest, int flags)", Used to package this object into a Parcel.
android.view.inputmethod.EditorInfo,int describeContents(), Describe the kinds of special objects contained in this Parcelable instance's marshaled representation.
android.view.inputmethod.EditorInfo,"void dump(Printer pw, String prefix)", Write debug output of this object.
android.view.inputmethod.EditorInfo,final void makeCompatible(int targetSdkVersion), Ensure that the data in this EditorInfo is compatible with an application that was developed against the given target API version.
android.view.inputmethod.EditorInfo,"void writeToParcel(Parcel dest, int flags)", Used to package this object into a Parcel.
android.view.inputmethod.ExtractedText,int describeContents(), Describe the kinds of special objects contained in this Parcelable instance's marshaled representation.
android.view.inputmethod.ExtractedText,"void writeToParcel(Parcel dest, int flags)", Used to package this object into a Parcel.
android.view.inputmethod.ExtractedTextRequest,int describeContents(), Describe the kinds of special objects contained in this Parcelable instance's marshaled representation.
android.view.inputmethod.ExtractedTextRequest,"void writeToParcel(Parcel dest, int flags)", Used to package this object into a Parcel.
android.view.inputmethod.InputBinding,int describeContents(), Describe the kinds of special objects contained in this Parcelable instance's marshaled representation.
android.view.inputmethod.InputBinding,InputConnection getConnection(), Return the connection for interacting back with the application.
android.view.inputmethod.InputBinding,IBinder getConnectionToken(), Return the token for the connection back to the application.
android.view.inputmethod.InputBinding,int getPid(), Return the process id where this binding came from.
android.view.inputmethod.InputBinding,int getUid(), Return the user id of the client associated with this binding.
android.view.inputmethod.InputBinding,String toString(), Returns a string representation of the object.
android.view.inputmethod.InputBinding,"void writeToParcel(Parcel dest, int flags)", Used to package this object into a Parcel.
android.view.inputmethod.InputConnection,abstract boolean beginBatchEdit(), Tell the editor that you are starting a batch of editor operations.
android.view.inputmethod.InputConnection,abstract boolean clearMetaKeyStates(int states), Clear the given meta key pressed states in the given input connection.
android.view.inputmethod.InputConnection,abstract void closeConnection(), Called by the system up to only once to notify that the system is about to invalidate connection between the input method and the application.
android.view.inputmethod.InputConnection,abstract boolean commitCompletion(CompletionInfo text)," Commit a completion the user has selected from the possible ones previously reported to InputMethodSession#displayCompletions(CompletionInfo[]) or InputMethodManager#displayCompletions(View, CompletionInfo[])."
android.view.inputmethod.InputConnection,"abstract boolean commitContent(InputContentInfo inputContentInfo, int flags, Bundle opts)", Called by the input method to commit content such as a PNG image to the editor.
android.view.inputmethod.InputConnection,abstract boolean commitCorrection(CorrectionInfo correctionInfo), Commit a correction automatically performed on the raw user's input.
android.view.inputmethod.InputConnection,"abstract boolean commitText(CharSequence text, int newCursorPosition)", Commit text to the text box and set the new cursor position.
android.view.inputmethod.InputConnection,"abstract boolean deleteSurroundingText(int beforeLength, int afterLength)"," Delete beforeLength characters of text before the current cursor position, and delete afterLength characters of text after the current cursor position, excluding the selection."
android.view.inputmethod.InputConnection,"abstract boolean deleteSurroundingTextInCodePoints(int beforeLength, int afterLength)"," A variant of deleteSurroundingText(int, int)."
android.view.inputmethod.InputConnection,abstract boolean endBatchEdit(), Tell the editor that you are done with a batch edit previously initiated with beginBatchEdit().
android.view.inputmethod.InputConnection,abstract boolean finishComposingText(), Have the text editor finish whatever composing text is currently active.
android.view.inputmethod.InputConnection,abstract int getCursorCapsMode(int reqModes), Retrieve the current capitalization mode in effect at the current cursor position in the text.
android.view.inputmethod.InputConnection,"abstract ExtractedText getExtractedText(ExtractedTextRequest request, int flags)"," Retrieve the current text in the input connection's editor, and monitor for any changes to it."
android.view.inputmethod.InputConnection,abstract Handler getHandler(), Called by the InputMethodManager to enable application developers to specify a dedicated Handler on which incoming IPC method calls from input methods will be dispatched.
android.view.inputmethod.InputConnection,abstract CharSequence getSelectedText(int flags)," Gets the selected text, if any."
android.view.inputmethod.InputConnection,"abstract CharSequence getTextAfterCursor(int n, int flags)", Get n characters of text after the current cursor position.
android.view.inputmethod.InputConnection,"abstract CharSequence getTextBeforeCursor(int n, int flags)", Get n characters of text before the current cursor position.
android.view.inputmethod.InputConnection,abstract boolean performContextMenuAction(int id), Perform a context menu action on the field.
android.view.inputmethod.InputConnection,abstract boolean performEditorAction(int editorAction), Have the editor perform an action it has said it can do.
android.view.inputmethod.InputConnection,"abstract boolean performPrivateCommand(String action, Bundle data)", API to send private commands from an input method to its connected editor.
android.view.inputmethod.InputConnection,abstract boolean reportFullscreenMode(boolean enabled), Called back when the connected IME switches between fullscreen and normal modes.
android.view.inputmethod.InputConnection,default void reportLanguageHint(LocaleList languageHint), Called by the input method to tell a hint about the locales of text to be committed.
android.view.inputmethod.InputConnection,abstract boolean requestCursorUpdates(int cursorUpdateMode)," Called by the input method to ask the editor for calling back updateCursorAnchorInfo(android.view.View, CursorAnchorInfo) to notify cursor/anchor locations."
android.view.inputmethod.InputConnection,abstract boolean sendKeyEvent(KeyEvent event), Send a key event to the process that is currently attached through this input connection.
android.view.inputmethod.InputConnection,"abstract boolean setComposingRegion(int start, int end)", Mark a certain region of text as composing text.
android.view.inputmethod.InputConnection,"abstract boolean setComposingText(CharSequence text, int newCursorPosition)"," Replace the currently composing text with the given text, and set the new cursor position."
android.view.inputmethod.InputConnection,"abstract boolean setSelection(int start, int end)", Set the selection of the text editor.
android.view.inputmethod.InputConnectionWrapper,boolean beginBatchEdit(), Tell the editor that you are starting a batch of editor operations.
android.view.inputmethod.InputConnectionWrapper,boolean clearMetaKeyStates(int states), Clear the given meta key pressed states in the given input connection.
android.view.inputmethod.InputConnectionWrapper,void closeConnection(), Called by the system up to only once to notify that the system is about to invalidate connection between the input method and the application.
android.view.inputmethod.InputConnectionWrapper,boolean commitCompletion(CompletionInfo text)," Commit a completion the user has selected from the possible ones previously reported to InputMethodSession#displayCompletions(CompletionInfo[]) or InputMethodManager#displayCompletions(View, CompletionInfo[])."
android.view.inputmethod.InputConnectionWrapper,"boolean commitContent(InputContentInfo inputContentInfo, int flags, Bundle opts)", Called by the input method to commit content such as a PNG image to the editor.
android.view.inputmethod.InputConnectionWrapper,boolean commitCorrection(CorrectionInfo correctionInfo), Commit a correction automatically performed on the raw user's input.
android.view.inputmethod.InputConnectionWrapper,"boolean commitText(CharSequence text, int newCursorPosition)", Commit text to the text box and set the new cursor position.
android.view.inputmethod.InputConnectionWrapper,"boolean deleteSurroundingText(int beforeLength, int afterLength)"," Delete beforeLength characters of text before the current cursor position, and delete afterLength characters of text after the current cursor position, excluding the selection."
android.view.inputmethod.InputConnectionWrapper,"boolean deleteSurroundingTextInCodePoints(int beforeLength, int afterLength)"," A variant of deleteSurroundingText(int, int)."
android.view.inputmethod.InputConnectionWrapper,boolean endBatchEdit(), Tell the editor that you are done with a batch edit previously initiated with beginBatchEdit().
android.view.inputmethod.InputConnectionWrapper,boolean finishComposingText(), Have the text editor finish whatever composing text is currently active.
android.view.inputmethod.InputConnectionWrapper,int getCursorCapsMode(int reqModes), Retrieve the current capitalization mode in effect at the current cursor position in the text.
android.view.inputmethod.InputConnectionWrapper,"ExtractedText getExtractedText(ExtractedTextRequest request, int flags)"," Retrieve the current text in the input connection's editor, and monitor for any changes to it."
android.view.inputmethod.InputConnectionWrapper,Handler getHandler(), Called by the InputMethodManager to enable application developers to specify a dedicated Handler on which incoming IPC method calls from input methods will be dispatched.
android.view.inputmethod.InputConnectionWrapper,CharSequence getSelectedText(int flags)," Gets the selected text, if any."
android.view.inputmethod.InputConnectionWrapper,"CharSequence getTextAfterCursor(int n, int flags)", Get n characters of text after the current cursor position.
android.view.inputmethod.InputConnectionWrapper,"CharSequence getTextBeforeCursor(int n, int flags)", Get n characters of text before the current cursor position.
android.view.inputmethod.InputConnectionWrapper,boolean performContextMenuAction(int id), Perform a context menu action on the field.
android.view.inputmethod.InputConnectionWrapper,boolean performEditorAction(int editorAction), Have the editor perform an action it has said it can do.
android.view.inputmethod.InputConnectionWrapper,"boolean performPrivateCommand(String action, Bundle data)", API to send private commands from an input method to its connected editor.
android.view.inputmethod.InputConnectionWrapper,boolean reportFullscreenMode(boolean enabled), Called back when the connected IME switches between fullscreen and normal modes.
android.view.inputmethod.InputConnectionWrapper,boolean requestCursorUpdates(int cursorUpdateMode)," Called by the input method to ask the editor for calling back updateCursorAnchorInfo(android.view.View, CursorAnchorInfo) to notify cursor/anchor locations."
android.view.inputmethod.InputConnectionWrapper,boolean sendKeyEvent(KeyEvent event), Send a key event to the process that is currently attached through this input connection.
android.view.inputmethod.InputConnectionWrapper,"boolean setComposingRegion(int start, int end)", Mark a certain region of text as composing text.
android.view.inputmethod.InputConnectionWrapper,"boolean setComposingText(CharSequence text, int newCursorPosition)"," Replace the currently composing text with the given text, and set the new cursor position."
android.view.inputmethod.InputConnectionWrapper,"boolean setSelection(int start, int end)", Set the selection of the text editor.
android.view.inputmethod.InputConnectionWrapper,void setTarget(InputConnection target), Change the target of the input connection.
android.view.inputmethod.InputContentInfo,int describeContents(), Describe the kinds of special objects contained in this Parcelable instance's marshaled representation.
android.view.inputmethod.InputContentInfo,Uri getContentUri(),
android.view.inputmethod.InputContentInfo,ClipDescription getDescription(),
android.view.inputmethod.InputContentInfo,Uri getLinkUri(),
android.view.inputmethod.InputContentInfo,void releasePermission(), Releases a temporary read-only access permission for content URI associated with this object.
android.view.inputmethod.InputContentInfo,void requestPermission(), Requests a temporary read-only access permission for content URI associated with this object.
android.view.inputmethod.InputContentInfo,"void writeToParcel(Parcel dest, int flags)", Used to package this object into a Parcel.
android.view.inputmethod.InputMethod.SessionCallback,abstract void sessionCreated(InputMethodSession session),
android.view.inputmethod.InputMethod,abstract void attachToken(IBinder token)," Called first thing after an input method is created, this supplies a unique token for the session it has with the system service."
android.view.inputmethod.InputMethod,abstract void bindInput(InputBinding binding)," Bind a new application environment in to the input method, so that it can later start and stop input processing."
android.view.inputmethod.InputMethod,abstract void changeInputMethodSubtype(InputMethodSubtype subtype), Notify that the input method subtype is being changed in the same input method.
android.view.inputmethod.InputMethod,abstract void createSession(InputMethod.SessionCallback callback), Create a new InputMethodSession that can be handed to client applications for interacting with the input method.
android.view.inputmethod.InputMethod,"abstract void hideSoftInput(int flags, ResultReceiver resultReceiver)", Request that any soft input part of the input method be hidden from the user.
android.view.inputmethod.InputMethod,"abstract void restartInput(InputConnection inputConnection, EditorInfo attribute)", This method is called when the state of this input method needs to be reset.
android.view.inputmethod.InputMethod,abstract void revokeSession(InputMethodSession session), Disable and destroy a session that was previously created with createSession(android.view.inputmethod.InputMethod.SessionCallback).
android.view.inputmethod.InputMethod,"abstract void setSessionEnabled(InputMethodSession session, boolean enabled)", Control whether a particular input method session is active.
android.view.inputmethod.InputMethod,"abstract void showSoftInput(int flags, ResultReceiver resultReceiver)", Request that any soft input part of the input method be shown to the user.
android.view.inputmethod.InputMethod,"abstract void startInput(InputConnection inputConnection, EditorInfo info)", This method is called when the application starts to receive text and it is ready for this input method to process received events and send result text back to the application.
android.view.inputmethod.InputMethod,abstract void unbindInput()," Unbind an application environment, called when the information previously set by bindInput(InputBinding) is no longer valid for this input method."
android.view.inputmethod.InputMethodInfo,int describeContents(), Describe the kinds of special objects contained in this Parcelable instance's marshaled representation.
android.view.inputmethod.InputMethodInfo,"void dump(Printer pw, String prefix)",
android.view.inputmethod.InputMethodInfo,boolean equals(Object o), Used to test whether the given parameter object is an InputMethodInfo and its Id is the same to this one.
android.view.inputmethod.InputMethodInfo,ComponentName getComponent(), Return the component of the service that implements this input method.
android.view.inputmethod.InputMethodInfo,String getId(), Return a unique ID for this input method.
android.view.inputmethod.InputMethodInfo,int getIsDefaultResourceId(), Return the resource identifier of a resource inside of this input method's .apk that determines whether it should be considered a default input method for the system.
android.view.inputmethod.InputMethodInfo,String getPackageName(), Return the .apk package that implements this input method.
android.view.inputmethod.InputMethodInfo,ServiceInfo getServiceInfo(), Return the raw information about the Service implementing this input method.
android.view.inputmethod.InputMethodInfo,String getServiceName(), Return the class name of the service component that implements this input method.
android.view.inputmethod.InputMethodInfo,String getSettingsActivity(), Return the class name of an activity that provides a settings UI for the input method.
android.view.inputmethod.InputMethodInfo,InputMethodSubtype getSubtypeAt(int index), Return the Input Method's subtype at the specified index.
android.view.inputmethod.InputMethodInfo,int getSubtypeCount(), Return the count of the subtypes of Input Method.
android.view.inputmethod.InputMethodInfo,int hashCode(), Returns a hash code value for the object.
android.view.inputmethod.InputMethodInfo,Drawable loadIcon(PackageManager pm), Load the user-displayed icon for this input method.
android.view.inputmethod.InputMethodInfo,CharSequence loadLabel(PackageManager pm), Load the user-displayed label for this input method.
android.view.inputmethod.InputMethodInfo,String toString(), Returns a string representation of the object.
android.view.inputmethod.InputMethodInfo,"void writeToParcel(Parcel dest, int flags)", Used to package this object into a Parcel.
android.view.inputmethod.InputMethodManager,"void dispatchKeyEventFromInputMethod(View targetView, KeyEvent event)"," Provides the default implementation of sendKeyEvent(KeyEvent), which is expected to dispatch an keyboard event sent from the IME to an appropriate event target depending on the given View and the current focus state."
android.view.inputmethod.InputMethodManager,"void displayCompletions(View view, CompletionInfo[] completions)",
android.view.inputmethod.InputMethodManager,InputMethodSubtype getCurrentInputMethodSubtype(), Returns the current input method subtype.
android.view.inputmethod.InputMethodManager,List<InputMethodInfo> getEnabledInputMethodList(),
android.view.inputmethod.InputMethodManager,"List<InputMethodSubtype> getEnabledInputMethodSubtypeList(InputMethodInfo imi, boolean allowsImplicitlySelectedSubtypes)", Returns a list of enabled input method subtypes for the specified input method info.
android.view.inputmethod.InputMethodManager,List<InputMethodInfo> getInputMethodList(),
android.view.inputmethod.InputMethodManager,InputMethodSubtype getLastInputMethodSubtype(),
android.view.inputmethod.InputMethodManager,"Map<InputMethodInfo,List<InputMethodSubtype>> getShortcutInputMethodsAndSubtypes()", Returns a map of all shortcut input method info and their subtypes.
android.view.inputmethod.InputMethodManager,"void hideSoftInputFromInputMethod(IBinder token, int flags)", This method was deprecated in API level P. Use requestHideSelf(int) instead. This method was intended for IME developers who should be accessing APIs through the service. APIs in this class are intended for app developers interacting with the IME.
android.view.inputmethod.InputMethodManager,"boolean hideSoftInputFromWindow(IBinder windowToken, int flags)"," Synonym for hideSoftInputFromWindow(IBinder, int, ResultReceiver) without a result: request to hide the soft input window from the context of the window that is currently accepting input."
android.view.inputmethod.InputMethodManager,"boolean hideSoftInputFromWindow(IBinder windowToken, int flags, ResultReceiver resultReceiver)", Request to hide the soft input window from the context of the window that is currently accepting input.
android.view.inputmethod.InputMethodManager,void hideStatusIcon(IBinder imeToken), This method was deprecated in API level P. Use hideStatusIcon() instead. This method was intended for IME developers who should be accessing APIs through the service. APIs in this class are intended for app developers interacting with the IME.
android.view.inputmethod.InputMethodManager,boolean isAcceptingText(), Return true if the currently served view is accepting full text edits.
android.view.inputmethod.InputMethodManager,boolean isActive(), Return true if any view is currently active in the input method.
android.view.inputmethod.InputMethodManager,boolean isActive(View view), Return true if the given view is the currently active view for the input method.
android.view.inputmethod.InputMethodManager,boolean isFullscreenMode(), Allows you to discover whether the attached input method is running in fullscreen mode.
android.view.inputmethod.InputMethodManager,boolean isWatchingCursor(View view), This method was deprecated in API level 21. Use requestCursorUpdates(int) instead.
android.view.inputmethod.InputMethodManager,void restartInput(View view)," If the input method is currently connected to the given view, restart it with its new contents."
android.view.inputmethod.InputMethodManager,"void sendAppPrivateCommand(View view, String action, Bundle data)", Call InputMethodSession.appPrivateCommand() on the current Input Method.
android.view.inputmethod.InputMethodManager,"void setAdditionalInputMethodSubtypes(String imiId, InputMethodSubtype[] subtypes)", Set additional input method subtypes.
android.view.inputmethod.InputMethodManager,boolean setCurrentInputMethodSubtype(InputMethodSubtype subtype), Switch to a new input method subtype of the current input method.
android.view.inputmethod.InputMethodManager,"void setInputMethod(IBinder token, String id)", This method was deprecated in API level P. Use setInputMethod(String) instead. This method was intended for IME developers who should be accessing APIs through the service. APIs in this class are intended for app developers interacting with the IME.
android.view.inputmethod.InputMethodManager,"void setInputMethodAndSubtype(IBinder token, String id, InputMethodSubtype subtype)"," This method was deprecated in API level P. Use setInputMethodAndSubtype(String, InputMethodSubtype) instead. This method was intended for IME developers who should be accessing APIs through the service. APIs in this class are intended for app developers interacting with the IME."
android.view.inputmethod.InputMethodManager,boolean shouldOfferSwitchingToNextInputMethod(IBinder imeToken), This method was deprecated in API level P. Use shouldOfferSwitchingToNextInputMethod() instead. This method was intended for IME developers who should be accessing APIs through the service. APIs in this class are intended for app developers interacting with the IME.
android.view.inputmethod.InputMethodManager,void showInputMethodAndSubtypeEnabler(String imiId), Show the settings for enabling subtypes of the specified input method.
android.view.inputmethod.InputMethodManager,void showInputMethodPicker(),
android.view.inputmethod.InputMethodManager,"boolean showSoftInput(View view, int flags, ResultReceiver resultReceiver)"," Explicitly request that the current input method's soft input area be shown to the user, if needed."
android.view.inputmethod.InputMethodManager,"boolean showSoftInput(View view, int flags)"," Synonym for showSoftInput(View, int, ResultReceiver) without a result receiver: explicitly request that the current input method's soft input area be shown to the user, if needed."
android.view.inputmethod.InputMethodManager,"void showSoftInputFromInputMethod(IBinder token, int flags)", This method was deprecated in API level P. Use requestShowSelf(int) instead. This method was intended for IME developers who should be accessing APIs through the service. APIs in this class are intended for app developers interacting with the IME.
android.view.inputmethod.InputMethodManager,"void showStatusIcon(IBinder imeToken, String packageName, int iconId)", This method was deprecated in API level P. Use showStatusIcon(int) instead. This method was intended for IME developers who should be accessing APIs through the service. APIs in this class are intended for app developers interacting with the IME.
android.view.inputmethod.InputMethodManager,boolean switchToLastInputMethod(IBinder imeToken), This method was deprecated in API level P. Use switchToLastInputMethod() instead. This method was intended for IME developers who should be accessing APIs through the service. APIs in this class are intended for app developers interacting with the IME.
android.view.inputmethod.InputMethodManager,"boolean switchToNextInputMethod(IBinder imeToken, boolean onlyCurrentIme)", This method was deprecated in API level P. Use switchToNextInputMethod(boolean) instead. This method was intended for IME developers who should be accessing APIs through the service. APIs in this class are intended for app developers interacting with the IME.
android.view.inputmethod.InputMethodManager,"void toggleSoftInput(int showFlags, int hideFlags)", This method toggles the input method window display.
android.view.inputmethod.InputMethodManager,"void toggleSoftInputFromWindow(IBinder windowToken, int showFlags, int hideFlags)", This method toggles the input method window display.
android.view.inputmethod.InputMethodManager,"void updateCursor(View view, int left, int top, int right, int bottom)"," This method was deprecated in API level 21. Use updateCursorAnchorInfo(View, CursorAnchorInfo) instead."
android.view.inputmethod.InputMethodManager,"void updateCursorAnchorInfo(View view, CursorAnchorInfo cursorAnchorInfo)", Report positional change of the text insertion point and/or characters in the composition string.
android.view.inputmethod.InputMethodManager,"void updateExtractedText(View view, int token, ExtractedText text)",
android.view.inputmethod.InputMethodManager,"void updateSelection(View view, int selStart, int selEnd, int candidatesStart, int candidatesEnd)", Report the current selection range.
android.view.inputmethod.InputMethodManager,void viewClicked(View view), Notify the event when the user tapped or clicked the text view.
android.view.inputmethod.InputMethodSession.EventCallback,"abstract void finishedEvent(int seq, boolean handled)",
android.view.inputmethod.InputMethodSession,"abstract void appPrivateCommand(String action, Bundle data)", Process a private command sent from the application to the input method.
android.view.inputmethod.InputMethodSession,"abstract void dispatchGenericMotionEvent(int seq, MotionEvent event, InputMethodSession.EventCallback callback)", This method is called when there is a generic motion event.
android.view.inputmethod.InputMethodSession,"abstract void dispatchKeyEvent(int seq, KeyEvent event, InputMethodSession.EventCallback callback)", This method is called when a key is pressed.
android.view.inputmethod.InputMethodSession,"abstract void dispatchTrackballEvent(int seq, MotionEvent event, InputMethodSession.EventCallback callback)", This method is called when there is a track ball event.
android.view.inputmethod.InputMethodSession,abstract void displayCompletions(CompletionInfo[] completions)," Called by a text editor that performs auto completion, to tell the input method about the completions it has available."
android.view.inputmethod.InputMethodSession,abstract void finishInput(), This method is called when the application would like to stop receiving text input.
android.view.inputmethod.InputMethodSession,"abstract void toggleSoftInput(int showFlags, int hideFlags)", Toggle the soft input window.
android.view.inputmethod.InputMethodSession,abstract void updateCursor(Rect newCursor), This method is called when cursor location of the target input field has changed within its window.
android.view.inputmethod.InputMethodSession,abstract void updateCursorAnchorInfo(CursorAnchorInfo cursorAnchorInfo), This method is called when the cursor and/or the character position relevant to text input is changed on the screen.
android.view.inputmethod.InputMethodSession,"abstract void updateExtractedText(int token, ExtractedText text)", Called by a text editor to report its new extracted text when its contents change.
android.view.inputmethod.InputMethodSession,"abstract void updateSelection(int oldSelStart, int oldSelEnd, int newSelStart, int newSelEnd, int candidatesStart, int candidatesEnd)", This method is called when the selection or cursor in the current target input field has changed.
android.view.inputmethod.InputMethodSession,abstract void viewClicked(boolean focusChanged), This method is called when the user tapped a text view.
android.view.inputmethod.InputMethodSubtype.InputMethodSubtypeBuilder,InputMethodSubtype build(),
android.view.inputmethod.InputMethodSubtype.InputMethodSubtypeBuilder,InputMethodSubtype.InputMethodSubtypeBuilder setIsAsciiCapable(boolean isAsciiCapable),
android.view.inputmethod.InputMethodSubtype.InputMethodSubtypeBuilder,InputMethodSubtype.InputMethodSubtypeBuilder setIsAuxiliary(boolean isAuxiliary),
android.view.inputmethod.InputMethodSubtype.InputMethodSubtypeBuilder,InputMethodSubtype.InputMethodSubtypeBuilder setLanguageTag(String languageTag),
android.view.inputmethod.InputMethodSubtype.InputMethodSubtypeBuilder,InputMethodSubtype.InputMethodSubtypeBuilder setOverridesImplicitlyEnabledSubtype(boolean overridesImplicitlyEnabledSubtype),
android.view.inputmethod.InputMethodSubtype.InputMethodSubtypeBuilder,InputMethodSubtype.InputMethodSubtypeBuilder setSubtypeExtraValue(String subtypeExtraValue),
android.view.inputmethod.InputMethodSubtype.InputMethodSubtypeBuilder,InputMethodSubtype.InputMethodSubtypeBuilder setSubtypeIconResId(int subtypeIconResId),
android.view.inputmethod.InputMethodSubtype.InputMethodSubtypeBuilder,InputMethodSubtype.InputMethodSubtypeBuilder setSubtypeId(int subtypeId),
android.view.inputmethod.InputMethodSubtype.InputMethodSubtypeBuilder,InputMethodSubtype.InputMethodSubtypeBuilder setSubtypeLocale(String subtypeLocale),
android.view.inputmethod.InputMethodSubtype.InputMethodSubtypeBuilder,InputMethodSubtype.InputMethodSubtypeBuilder setSubtypeMode(String subtypeMode),
android.view.inputmethod.InputMethodSubtype.InputMethodSubtypeBuilder,InputMethodSubtype.InputMethodSubtypeBuilder setSubtypeNameResId(int subtypeNameResId),
android.view.inputmethod.InputMethodSubtype,boolean containsExtraValueKey(String key)," The string of ExtraValue in subtype should be defined as follows: example: key0,key1=value1,key2,key3,key4=value4"
android.view.inputmethod.InputMethodSubtype,int describeContents(), Describe the kinds of special objects contained in this Parcelable instance's marshaled representation.
android.view.inputmethod.InputMethodSubtype,boolean equals(Object o)," Indicates whether some other object is ""equal to"" this one."
android.view.inputmethod.InputMethodSubtype,"CharSequence getDisplayName(Context context, String packageName, ApplicationInfo appInfo)", Returns a display name for this subtype.
android.view.inputmethod.InputMethodSubtype,String getExtraValue(),
android.view.inputmethod.InputMethodSubtype,String getExtraValueOf(String key)," The string of ExtraValue in subtype should be defined as follows: example: key0,key1=value1,key2,key3,key4=value4"
android.view.inputmethod.InputMethodSubtype,int getIconResId(),
android.view.inputmethod.InputMethodSubtype,String getLanguageTag(),
android.view.inputmethod.InputMethodSubtype,String getLocale(), This method was deprecated in API level 24. Use getLanguageTag() instead.
android.view.inputmethod.InputMethodSubtype,String getMode(),
android.view.inputmethod.InputMethodSubtype,int getNameResId(),
android.view.inputmethod.InputMethodSubtype,int hashCode(), Returns a hash code value for the object.
android.view.inputmethod.InputMethodSubtype,boolean isAsciiCapable(),
android.view.inputmethod.InputMethodSubtype,boolean isAuxiliary(),
android.view.inputmethod.InputMethodSubtype,boolean overridesImplicitlyEnabledSubtype(),
android.view.inputmethod.InputMethodSubtype,"void writeToParcel(Parcel dest, int parcelableFlags)", Flatten this object in to a Parcel.
android.view.InputQueue.Callback,abstract void onInputQueueCreated(InputQueue queue)," Called when the given InputQueue is now associated with the thread making this call, so it can start receiving events from it."
android.view.InputQueue.Callback,abstract void onInputQueueDestroyed(InputQueue queue), Called when the given InputQueue is no longer associated with the thread and thus not dispatching events.
android.view.InputQueue,void finalize(), Called by the garbage collector on an object when garbage collection determines that there are no more references to the object.
android.view.KeyboardShortcutGroup,void addItem(KeyboardShortcutInfo item), Adds an item to the existing list.
android.view.KeyboardShortcutGroup,int describeContents(), Describe the kinds of special objects contained in this Parcelable instance's marshaled representation.
android.view.KeyboardShortcutGroup,List<KeyboardShortcutInfo> getItems(), Returns the list of items included in this group.
android.view.KeyboardShortcutGroup,CharSequence getLabel(), Returns the label to be used to describe this group.
android.view.KeyboardShortcutGroup,"void writeToParcel(Parcel dest, int flags)", Flatten this object in to a Parcel.
android.view.KeyboardShortcutInfo,int describeContents(), Describe the kinds of special objects contained in this Parcelable instance's marshaled representation.
android.view.KeyboardShortcutInfo,char getBaseCharacter()," Returns the base character that, combined with the modifiers, triggers this shortcut."
android.view.KeyboardShortcutInfo,int getKeycode()," Returns the base keycode that, combined with the modifiers, triggers this shortcut."
android.view.KeyboardShortcutInfo,CharSequence getLabel(), Returns the label to be used to describe this shortcut.
android.view.KeyboardShortcutInfo,int getModifiers()," Returns the set of modifiers that, combined with the key, trigger this shortcut."
android.view.KeyboardShortcutInfo,"void writeToParcel(Parcel dest, int flags)", Flatten this object in to a Parcel.
android.view.KeyCharacterMap.KeyData,Object clone(), Creates and returns a copy of this object.
android.view.KeyCharacterMap.KeyData,boolean equals(Object obj)," Indicates whether some other object is ""equal to"" this one."
android.view.KeyCharacterMap.KeyData,void finalize(), Called by the garbage collector on an object when garbage collection determines that there are no more references to the object.
android.view.KeyCharacterMap.KeyData,final Class<?> getClass(), Returns the runtime class of this Object.
android.view.KeyCharacterMap.KeyData,int hashCode(), Returns a hash code value for the object.
android.view.KeyCharacterMap.KeyData,final void notify(), Wakes up a single thread that is waiting on this object's monitor.
android.view.KeyCharacterMap.KeyData,final void notifyAll(), Wakes up all threads that are waiting on this object's monitor.
android.view.KeyCharacterMap.KeyData,String toString(), Returns a string representation of the object.
android.view.KeyCharacterMap.KeyData,"final void wait(long millis, int nanos)"," Causes the current thread to wait until another thread invokes the notify() method or the notifyAll() method for this object, or some other thread interrupts the current thread, or a certain amount of real time has elapsed."
android.view.KeyCharacterMap.KeyData,final void wait(long millis)," Causes the current thread to wait until either another thread invokes the notify() method or the notifyAll() method for this object, or a specified amount of time has elapsed."
android.view.KeyCharacterMap.KeyData,final void wait(), Causes the current thread to wait until another thread invokes the notify() method or the notifyAll() method for this object.
android.view.KeyCharacterMap,int describeContents(), Describe the kinds of special objects contained in this Parcelable instance's marshaled representation.
android.view.KeyCharacterMap,static boolean deviceHasKey(int keyCode), Queries the framework about whether any physical keys exist on the any keyboard attached to the device that are capable of producing the given key code.
android.view.KeyCharacterMap,static boolean[] deviceHasKeys(int[] keyCodes), Queries the framework about whether any physical keys exist on the any keyboard attached to the device that are capable of producing the given array of key codes.
android.view.KeyCharacterMap,"int get(int keyCode, int metaState)", Gets the Unicode character generated by the specified key and meta key state combination.
android.view.KeyCharacterMap,"static int getDeadChar(int accent, int c)", Get the character that is produced by combining the dead key producing accent with the key producing character c.
android.view.KeyCharacterMap,char getDisplayLabel(int keyCode), Gets the primary character for this key.
android.view.KeyCharacterMap,KeyEvent[] getEvents(char[] chars), Get an array of KeyEvent objects that if put into the input stream could plausibly generate the provided sequence of characters.
android.view.KeyCharacterMap,"boolean getKeyData(int keyCode, KeyCharacterMap.KeyData results)"," This method was deprecated in API level 11. instead use getDisplayLabel(int), getNumber(int) or get(int, int)."
android.view.KeyCharacterMap,int getKeyboardType(), Gets the keyboard type.
android.view.KeyCharacterMap,"char getMatch(int keyCode, char[] chars, int metaState)", Gets the first character in the character array that can be generated by the specified key code.
android.view.KeyCharacterMap,"char getMatch(int keyCode, char[] chars)", Gets the first character in the character array that can be generated by the specified key code.
android.view.KeyCharacterMap,int getModifierBehavior(), Gets a constant that describes the behavior of this keyboard's modifier keys such as KEYCODE_SHIFT_LEFT.
android.view.KeyCharacterMap,char getNumber(int keyCode), Gets the number or symbol associated with the key.
android.view.KeyCharacterMap,boolean isPrintingKey(int keyCode), Returns true if the specified key produces a glyph.
android.view.KeyCharacterMap,static KeyCharacterMap load(int deviceId), Loads the key character maps for the keyboard with the specified device id.
android.view.KeyCharacterMap,"void writeToParcel(Parcel out, int flags)", Flatten this object in to a Parcel.
android.view.KeyCharacterMap.UnavailableException,final void addSuppressed(Throwable exception), Appends the specified exception to the exceptions that were suppressed in order to deliver this exception.
android.view.KeyCharacterMap.UnavailableException,Throwable fillInStackTrace(), Fills in the execution stack trace.
android.view.KeyCharacterMap.UnavailableException,Throwable getCause(), Returns the cause of this throwable or null if the cause is nonexistent or unknown.
android.view.KeyCharacterMap.UnavailableException,String getLocalizedMessage(), Creates a localized description of this throwable.
android.view.KeyCharacterMap.UnavailableException,String getMessage(), Returns the detail message string of this throwable.
android.view.KeyCharacterMap.UnavailableException,StackTraceElement[] getStackTrace(), Provides programmatic access to the stack trace information printed by printStackTrace().
android.view.KeyCharacterMap.UnavailableException,final Throwable[] getSuppressed()," Returns an array containing all of the exceptions that were suppressed, typically by the try-with-resources statement, in order to deliver this exception."
android.view.KeyCharacterMap.UnavailableException,Throwable initCause(Throwable cause), Initializes the cause of this throwable to the specified value.
android.view.KeyCharacterMap.UnavailableException,void printStackTrace(), Prints this throwable and its backtrace to the standard error stream.
android.view.KeyCharacterMap.UnavailableException,void printStackTrace(PrintWriter s), Prints this throwable and its backtrace to the specified print writer.
android.view.KeyCharacterMap.UnavailableException,void printStackTrace(PrintStream s), Prints this throwable and its backtrace to the specified print stream.
android.view.KeyCharacterMap.UnavailableException,void setStackTrace(StackTraceElement[] stackTrace), Sets the stack trace elements that will be returned by getStackTrace() and printed by printStackTrace() and related methods.
android.view.KeyCharacterMap.UnavailableException,String toString(), Returns a short description of this throwable.
android.view.KeyCharacterMap.UnavailableException,Object clone(), Creates and returns a copy of this object.
android.view.KeyCharacterMap.UnavailableException,boolean equals(Object obj)," Indicates whether some other object is ""equal to"" this one."
android.view.KeyCharacterMap.UnavailableException,void finalize(), Called by the garbage collector on an object when garbage collection determines that there are no more references to the object.
android.view.KeyCharacterMap.UnavailableException,final Class<?> getClass(), Returns the runtime class of this Object.
android.view.KeyCharacterMap.UnavailableException,int hashCode(), Returns a hash code value for the object.
android.view.KeyCharacterMap.UnavailableException,final void notify(), Wakes up a single thread that is waiting on this object's monitor.
android.view.KeyCharacterMap.UnavailableException,final void notifyAll(), Wakes up all threads that are waiting on this object's monitor.
android.view.KeyCharacterMap.UnavailableException,String toString(), Returns a string representation of the object.
android.view.KeyCharacterMap.UnavailableException,"final void wait(long millis, int nanos)"," Causes the current thread to wait until another thread invokes the notify() method or the notifyAll() method for this object, or some other thread interrupts the current thread, or a certain amount of real time has elapsed."
android.view.KeyCharacterMap.UnavailableException,final void wait(long millis)," Causes the current thread to wait until either another thread invokes the notify() method or the notifyAll() method for this object, or a specified amount of time has elapsed."
android.view.KeyCharacterMap.UnavailableException,final void wait(), Causes the current thread to wait until another thread invokes the notify() method or the notifyAll() method for this object.
android.view.KeyEvent.Callback,"abstract boolean onKeyDown(int keyCode, KeyEvent event)", Called when a key down event has occurred.
android.view.KeyEvent.Callback,"abstract boolean onKeyLongPress(int keyCode, KeyEvent event)", Called when a long press has occurred.
android.view.KeyEvent.Callback,"abstract boolean onKeyMultiple(int keyCode, int count, KeyEvent event)"," Called when a user's interaction with an analog control, such as flinging a trackball, generates simulated down/up events for the same key multiple times in quick succession."
android.view.KeyEvent.Callback,"abstract boolean onKeyUp(int keyCode, KeyEvent event)", Called when a key up event has occurred.
android.view.KeyEvent.DispatcherState,void handleUpEvent(KeyEvent event), Handle key up event to stop tracking.
android.view.KeyEvent.DispatcherState,boolean isTracking(KeyEvent event), Return true if the key event is for a key code that is currently being tracked by the dispatcher.
android.view.KeyEvent.DispatcherState,void performedLongPress(KeyEvent event)," Keep track of the given event's key code as having performed an action with a long press, so no action should occur on the up."
android.view.KeyEvent.DispatcherState,void reset(Object target), Stop any tracking associated with this target.
android.view.KeyEvent.DispatcherState,void reset(), Reset back to initial state.
android.view.KeyEvent.DispatcherState,"void startTracking(KeyEvent event, Object target)", Start tracking the key code associated with the given event.
android.view.KeyEvent,"static KeyEvent changeAction(KeyEvent event, int action)"," Create a new key event that is the same as the given one, but whose action is replaced with the given value."
android.view.KeyEvent,"static KeyEvent changeFlags(KeyEvent event, int flags)"," Create a new key event that is the same as the given one, but whose flags are replaced with the given value."
android.view.KeyEvent,"static KeyEvent changeTimeRepeat(KeyEvent event, long eventTime, int newRepeat, int newFlags)"," Create a new key event that is the same as the given one, but whose event time and repeat count are replaced with the given value."
android.view.KeyEvent,"static KeyEvent changeTimeRepeat(KeyEvent event, long eventTime, int newRepeat)"," Create a new key event that is the same as the given one, but whose event time and repeat count are replaced with the given value."
android.view.KeyEvent,"final boolean dispatch(KeyEvent.Callback receiver, KeyEvent.DispatcherState state, Object target)", Deliver this key event to a KeyEvent.Callback interface.
android.view.KeyEvent,final boolean dispatch(KeyEvent.Callback receiver)," This method was deprecated in API level 5. Use dispatch(Callback, DispatcherState, Object) instead."
android.view.KeyEvent,final int getAction(), Retrieve the action of this key event.
android.view.KeyEvent,final String getCharacters()," For the special case of a ACTION_MULTIPLE event with key code of KEYCODE_UNKNOWN, this is a raw string of characters associated with the event."
android.view.KeyEvent,"static int getDeadChar(int accent, int c)", Get the character that is produced by putting accent on the character c.
android.view.KeyEvent,final int getDeviceId(), Gets the id for the device that this event came from.
android.view.KeyEvent,char getDisplayLabel(), Gets the primary character for this key.
android.view.KeyEvent,final long getDownTime()," Retrieve the time of the most recent key down event, in the uptimeMillis() time base."
android.view.KeyEvent,final long getEventTime()," Retrieve the time this event occurred, in the uptimeMillis() time base."
android.view.KeyEvent,final int getFlags(), Returns the flags for this key event.
android.view.KeyEvent,final KeyCharacterMap getKeyCharacterMap(), Gets the KeyCharacterMap associated with the keyboard device.
android.view.KeyEvent,final int getKeyCode(), Retrieve the key code of the key event.
android.view.KeyEvent,boolean getKeyData(KeyCharacterMap.KeyData results)," This method was deprecated in API level 11. instead use getDisplayLabel(), getNumber() or getUnicodeChar(int)."
android.view.KeyEvent,"char getMatch(char[] chars, int metaState)", Gets the first character in the character array that can be generated by the specified key code.
android.view.KeyEvent,char getMatch(char[] chars), Gets the first character in the character array that can be generated by the specified key code.
android.view.KeyEvent,static int getMaxKeyCode(), Returns the maximum keycode.
android.view.KeyEvent,final int getMetaState(), Returns the state of the meta keys.
android.view.KeyEvent,static int getModifierMetaStateMask(), Gets a mask that includes all valid modifier key meta state bits.
android.view.KeyEvent,final int getModifiers(), Returns the state of the modifier keys.
android.view.KeyEvent,char getNumber(), Gets the number or symbol associated with the key.
android.view.KeyEvent,final int getRepeatCount(), Retrieve the repeat count of the event.
android.view.KeyEvent,final int getScanCode(), Retrieve the hardware key id of this key event. These values are not reliable and vary from device to device.
android.view.KeyEvent,final int getSource(), Gets the source of the event.
android.view.KeyEvent,int getUnicodeChar(int metaState), Gets the Unicode character generated by the specified key and meta key state combination.
android.view.KeyEvent,int getUnicodeChar(), Gets the Unicode character generated by the specified key and meta key state combination.
android.view.KeyEvent,final boolean hasModifiers(int modifiers), Returns true if only the specified modifiers keys are pressed.
android.view.KeyEvent,final boolean hasNoModifiers(), Returns true if no modifier keys are pressed.
android.view.KeyEvent,final boolean isAltPressed(), Returns the pressed state of the ALT meta key.
android.view.KeyEvent,final boolean isCanceled()," For ACTION_UP events, indicates that the event has been canceled as per FLAG_CANCELED."
android.view.KeyEvent,final boolean isCapsLockOn(), Returns the locked state of the CAPS LOCK meta key.
android.view.KeyEvent,final boolean isCtrlPressed(), Returns the pressed state of the CTRL meta key.
android.view.KeyEvent,final boolean isFunctionPressed(), Returns the pressed state of the FUNCTION meta key.
android.view.KeyEvent,static final boolean isGamepadButton(int keyCode), Returns true if the specified keycode is a gamepad button.
android.view.KeyEvent,final boolean isLongPress()," For ACTION_DOWN events, indicates that the event has been canceled as per FLAG_LONG_PRESS."
android.view.KeyEvent,final boolean isMetaPressed(), Returns the pressed state of the META meta key.
android.view.KeyEvent,static boolean isModifierKey(int keyCode), Returns true if this key code is a modifier key.
android.view.KeyEvent,final boolean isNumLockOn(), Returns the locked state of the NUM LOCK meta key.
android.view.KeyEvent,boolean isPrintingKey(), Returns true if this key produces a glyph.
android.view.KeyEvent,final boolean isScrollLockOn(), Returns the locked state of the SCROLL LOCK meta key.
android.view.KeyEvent,final boolean isShiftPressed(), Returns the pressed state of the SHIFT meta key.
android.view.KeyEvent,final boolean isSymPressed(), Returns the pressed state of the SYM meta key.
android.view.KeyEvent,final boolean isSystem(), Is this a system key? System keys can not be used for menu shortcuts.
android.view.KeyEvent,final boolean isTracking()," For ACTION_UP events, indicates that the event is still being tracked from its initial down event as per FLAG_TRACKING."
android.view.KeyEvent,static int keyCodeFromString(String symbolicName)," Gets a keycode by its symbolic name such as ""KEYCODE_A"" or an equivalent numeric constant such as ""1001""."
android.view.KeyEvent,static String keyCodeToString(int keyCode)," Returns a string that represents the symbolic name of the specified keycode such as ""KEYCODE_A"", ""KEYCODE_DPAD_UP"", or an equivalent numeric constant such as ""1001"" if unknown."
android.view.KeyEvent,"static boolean metaStateHasModifiers(int metaState, int modifiers)", Returns true if only the specified modifier keys are pressed according to the specified meta state.
android.view.KeyEvent,static boolean metaStateHasNoModifiers(int metaState), Returns true if no modifiers keys are pressed according to the specified meta state.
android.view.KeyEvent,static int normalizeMetaState(int metaState), Normalizes the specified meta state.
android.view.KeyEvent,final void setSource(int source), Modifies the source of the event.
android.view.KeyEvent,final void startTracking()," Call this during onKeyDown(int, KeyEvent) to have the system track the key through its final up (possibly including a long press)."
android.view.KeyEvent,String toString(), Returns a string representation of the object.
android.view.KeyEvent,"void writeToParcel(Parcel out, int flags)", Flatten this object in to a Parcel.
android.view.LayoutInflater.Factory,"abstract View onCreateView(String name, Context context, AttributeSet attrs)", Hook you can supply that is called when inflating from a LayoutInflater.
android.view.LayoutInflater.Factory2,"abstract View onCreateView(View parent, String name, Context context, AttributeSet attrs)"," Version of onCreateView(String, Context, AttributeSet) that also supplies the parent that the view created view will be placed in."
android.view.LayoutInflater.Filter,abstract boolean onLoadClass(Class clazz), Hook to allow clients of the LayoutInflater to restrict the set of Views that are allowed to be inflated.
android.view.LayoutInflater,abstract LayoutInflater cloneInContext(Context newContext)," Create a copy of the existing LayoutInflater object, with the copy pointing to a different Context than the original."
android.view.LayoutInflater,"final View createView(String name, String prefix, AttributeSet attrs)", Low-level function for instantiating a view by name.
android.view.LayoutInflater,static LayoutInflater from(Context context), Obtains the LayoutInflater from the given context.
android.view.LayoutInflater,Context getContext()," Return the context we are running in, for access to resources, class loader, etc."
android.view.LayoutInflater,final LayoutInflater.Factory getFactory(), Return the current LayoutInflater.Factory (or null).
android.view.LayoutInflater,final LayoutInflater.Factory2 getFactory2(), Return the current LayoutInflater.Factory2.
android.view.LayoutInflater,LayoutInflater.Filter getFilter(),
android.view.LayoutInflater,"View inflate(int resource, ViewGroup root)", Inflate a new view hierarchy from the specified xml resource.
android.view.LayoutInflater,"View inflate(XmlPullParser parser, ViewGroup root)", Inflate a new view hierarchy from the specified xml node.
android.view.LayoutInflater,"View inflate(XmlPullParser parser, ViewGroup root, boolean attachToRoot)", Inflate a new view hierarchy from the specified XML node.
android.view.LayoutInflater,"View inflate(int resource, ViewGroup root, boolean attachToRoot)", Inflate a new view hierarchy from the specified xml resource.
android.view.LayoutInflater,void setFactory(LayoutInflater.Factory factory), Attach a custom Factory interface for creating views while using this LayoutInflater.
android.view.LayoutInflater,void setFactory2(LayoutInflater.Factory2 factory)," Like setFactory(LayoutInflater.Factory), but allows you to set a LayoutInflater.Factory2 interface."
android.view.LayoutInflater,void setFilter(LayoutInflater.Filter filter), Sets the LayoutInflater.Filter to by this LayoutInflater.
android.view.Menu,"abstract MenuItem add(int groupId, int itemId, int order, CharSequence title)", Add a new item to the menu.
android.view.Menu,abstract MenuItem add(int titleRes), Add a new item to the menu.
android.view.Menu,abstract MenuItem add(CharSequence title), Add a new item to the menu.
android.view.Menu,"abstract MenuItem add(int groupId, int itemId, int order, int titleRes)"," Variation on add(int, int, int, CharSequence) that takes a string resource identifier instead of the string itself."
android.view.Menu,"abstract int addIntentOptions(int groupId, int itemId, int order, ComponentName caller, Intent[] specifics, Intent intent, int flags, MenuItem[] outSpecificItems)", Add a group of menu items corresponding to actions that can be performed for a particular Intent.
android.view.Menu,abstract SubMenu addSubMenu(CharSequence title), Add a new sub-menu to the menu.
android.view.Menu,"abstract SubMenu addSubMenu(int groupId, int itemId, int order, int titleRes)"," Variation on addSubMenu(int, int, int, CharSequence) that takes a string resource identifier for the title instead of the string itself."
android.view.Menu,"abstract SubMenu addSubMenu(int groupId, int itemId, int order, CharSequence title)", Add a new sub-menu to the menu.
android.view.Menu,abstract SubMenu addSubMenu(int titleRes), Add a new sub-menu to the menu.
android.view.Menu,abstract void clear()," Remove all existing items from the menu, leaving it empty as if it had just been created."
android.view.Menu,abstract void close()," Closes the menu, if open."
android.view.Menu,abstract MenuItem findItem(int id), Return the menu item with a particular identifier.
android.view.Menu,abstract MenuItem getItem(int index), Gets the menu item at the given index.
android.view.Menu,abstract boolean hasVisibleItems(), Return whether the menu currently has item items that are visible.
android.view.Menu,"abstract boolean isShortcutKey(int keyCode, KeyEvent event)", Is a keypress one of the defined shortcut keys for this window.
android.view.Menu,"abstract boolean performIdentifierAction(int id, int flags)", Execute the menu item action associated with the given menu identifier.
android.view.Menu,"abstract boolean performShortcut(int keyCode, KeyEvent event, int flags)", Execute the menu item action associated with the given shortcut character.
android.view.Menu,abstract void removeGroup(int groupId), Remove all items in the given group.
android.view.Menu,abstract void removeItem(int id), Remove the item with the given identifier.
android.view.Menu,"abstract void setGroupCheckable(int group, boolean checkable, boolean exclusive)", Control whether a particular group of items can show a check mark.
android.view.Menu,default void setGroupDividerEnabled(boolean groupDividerEnabled), Enable or disable the group dividers.
android.view.Menu,"abstract void setGroupEnabled(int group, boolean enabled)", Enable or disable all menu items that are in the given group.
android.view.Menu,"abstract void setGroupVisible(int group, boolean visible)", Show or hide all menu items that are in the given group.
android.view.Menu,abstract void setQwertyMode(boolean isQwerty), Control whether the menu should be running in qwerty mode (alphabetic shortcuts) or 12-key mode (numeric shortcuts).
android.view.Menu,abstract int size(), Get the number of items in the menu.
android.view.MenuInflater,"void inflate(int menuRes, Menu menu)", Inflate a menu hierarchy from the specified XML resource.
android.view.MenuItem.OnActionExpandListener,abstract boolean onMenuItemActionCollapse(MenuItem item), Called when a menu item with SHOW_AS_ACTION_COLLAPSE_ACTION_VIEW is collapsed.
android.view.MenuItem.OnActionExpandListener,abstract boolean onMenuItemActionExpand(MenuItem item), Called when a menu item with SHOW_AS_ACTION_COLLAPSE_ACTION_VIEW is expanded.
android.view.MenuItem.OnMenuItemClickListener,abstract boolean onMenuItemClick(MenuItem item), Called when a menu item has been invoked.
android.view.MenuItem,abstract boolean collapseActionView(), Collapse the action view associated with this menu item.
android.view.MenuItem,abstract boolean expandActionView(), Expand the action view associated with this menu item.
android.view.MenuItem,abstract ActionProvider getActionProvider(), Gets the ActionProvider.
android.view.MenuItem,abstract View getActionView(), Returns the currently set action view for this menu item.
android.view.MenuItem,default int getAlphabeticModifiers(), Return the modifier for this menu item's alphabetic shortcut.
android.view.MenuItem,abstract char getAlphabeticShortcut(), Return the char for this menu item's alphabetic shortcut.
android.view.MenuItem,default CharSequence getContentDescription(), Retrieve the content description associated with this menu item.
android.view.MenuItem,abstract int getGroupId(), Return the group identifier that this menu item is part of.
android.view.MenuItem,abstract Drawable getIcon(), Returns the icon for this item as a Drawable (getting it from resources if it hasn't been loaded before).
android.view.MenuItem,default ColorStateList getIconTintList(),
android.view.MenuItem,default PorterDuff.Mode getIconTintMode()," Returns the blending mode used to apply the tint to this item's icon, if specified."
android.view.MenuItem,abstract Intent getIntent(), Return the Intent associated with this item.
android.view.MenuItem,abstract int getItemId(), Return the identifier for this menu item.
android.view.MenuItem,abstract ContextMenu.ContextMenuInfo getMenuInfo(), Gets the extra information linked to this menu item.
android.view.MenuItem,default int getNumericModifiers(), Return the modifiers for this menu item's numeric (12-key) shortcut.
android.view.MenuItem,abstract char getNumericShortcut(), Return the char for this menu item's numeric (12-key) shortcut.
android.view.MenuItem,abstract int getOrder(), Return the category and order within the category of this item.
android.view.MenuItem,abstract SubMenu getSubMenu()," Get the sub-menu to be invoked when this item is selected, if it has one."
android.view.MenuItem,abstract CharSequence getTitle(), Retrieve the current title of the item.
android.view.MenuItem,abstract CharSequence getTitleCondensed(), Retrieve the current condensed title of the item.
android.view.MenuItem,default CharSequence getTooltipText(), Retrieve the tooltip text associated with this menu item.
android.view.MenuItem,abstract boolean hasSubMenu(), Check whether this item has an associated sub-menu.
android.view.MenuItem,abstract boolean isActionViewExpanded(), Returns true if this menu item's action view has been expanded.
android.view.MenuItem,abstract boolean isCheckable(), Return whether the item can currently display a check mark.
android.view.MenuItem,abstract boolean isChecked(), Return whether the item is currently displaying a check mark.
android.view.MenuItem,abstract boolean isEnabled(), Return the enabled state of the menu item.
android.view.MenuItem,abstract boolean isVisible(), Return the visibility of the menu item.
android.view.MenuItem,abstract MenuItem setActionProvider(ActionProvider actionProvider), Sets the ActionProvider responsible for creating an action view if the item is placed on the action bar.
android.view.MenuItem,abstract MenuItem setActionView(int resId), Set an action view for this menu item.
android.view.MenuItem,abstract MenuItem setActionView(View view), Set an action view for this menu item.
android.view.MenuItem,abstract MenuItem setAlphabeticShortcut(char alphaChar), Change the alphabetic shortcut associated with this item.
android.view.MenuItem,"default MenuItem setAlphabeticShortcut(char alphaChar, int alphaModifiers)", Change the alphabetic shortcut associated with this item.
android.view.MenuItem,abstract MenuItem setCheckable(boolean checkable), Control whether this item can display a check mark.
android.view.MenuItem,abstract MenuItem setChecked(boolean checked), Control whether this item is shown with a check mark.
android.view.MenuItem,default MenuItem setContentDescription(CharSequence contentDescription), Change the content description associated with this menu item.
android.view.MenuItem,abstract MenuItem setEnabled(boolean enabled), Sets whether the menu item is enabled.
android.view.MenuItem,abstract MenuItem setIcon(Drawable icon), Change the icon associated with this item.
android.view.MenuItem,abstract MenuItem setIcon(int iconRes), Change the icon associated with this item.
android.view.MenuItem,default MenuItem setIconTintList(ColorStateList tint), Applies a tint to this item's icon.
android.view.MenuItem,default MenuItem setIconTintMode(PorterDuff.Mode tintMode), Specifies the blending mode used to apply the tint specified by setIconTintList(ColorStateList) to this item's icon.
android.view.MenuItem,abstract MenuItem setIntent(Intent intent), Change the Intent associated with this item.
android.view.MenuItem,"default MenuItem setNumericShortcut(char numericChar, int numericModifiers)", Change the numeric shortcut and modifiers associated with this item.
android.view.MenuItem,abstract MenuItem setNumericShortcut(char numericChar), Change the numeric shortcut associated with this item.
android.view.MenuItem,abstract MenuItem setOnActionExpandListener(MenuItem.OnActionExpandListener listener), Set an MenuItem.OnActionExpandListener on this menu item to be notified when the associated action view is expanded or collapsed.
android.view.MenuItem,abstract MenuItem setOnMenuItemClickListener(MenuItem.OnMenuItemClickListener menuItemClickListener), Set a custom listener for invocation of this menu item.
android.view.MenuItem,"abstract MenuItem setShortcut(char numericChar, char alphaChar)", Change both the numeric and alphabetic shortcut associated with this item.
android.view.MenuItem,"default MenuItem setShortcut(char numericChar, char alphaChar, int numericModifiers, int alphaModifiers)", Change both the numeric and alphabetic shortcut associated with this item.
android.view.MenuItem,abstract void setShowAsAction(int actionEnum), Sets how this item should display in the presence of an Action Bar.
android.view.MenuItem,abstract MenuItem setShowAsActionFlags(int actionEnum), Sets how this item should display in the presence of an Action Bar.
android.view.MenuItem,abstract MenuItem setTitle(CharSequence title), Change the title associated with this item.
android.view.MenuItem,abstract MenuItem setTitle(int title), Change the title associated with this item.
android.view.MenuItem,abstract MenuItem setTitleCondensed(CharSequence title), Change the condensed title associated with this item.
android.view.MenuItem,default MenuItem setTooltipText(CharSequence tooltipText), Change the tooltip text associated with this menu item.
android.view.MenuItem,abstract MenuItem setVisible(boolean visible), Sets the visibility of the menu item.
android.view.MotionEvent.PointerCoords,void clear(), Clears the contents of this object.
android.view.MotionEvent.PointerCoords,void copyFrom(MotionEvent.PointerCoords other), Copies the contents of another pointer coords object.
android.view.MotionEvent.PointerCoords,float getAxisValue(int axis), Gets the value associated with the specified axis.
android.view.MotionEvent.PointerCoords,"void setAxisValue(int axis, float value)", Sets the value associated with the specified axis.
android.view.MotionEvent.PointerProperties,void clear(), Resets the pointer properties to their initial values.
android.view.MotionEvent.PointerProperties,void copyFrom(MotionEvent.PointerProperties other), Copies the contents of another pointer properties object.
android.view.MotionEvent.PointerProperties,boolean equals(Object other)," Indicates whether some other object is ""equal to"" this one."
android.view.MotionEvent.PointerProperties,int hashCode(), Returns a hash code value for the object.
android.view.MotionEvent,static String actionToString(int action)," Returns a string that represents the symbolic name of the specified unmasked action such as ""ACTION_DOWN"", ""ACTION_POINTER_DOWN(3)"" or an equivalent numeric constant such as ""35"" if unknown."
android.view.MotionEvent,"void addBatch(long eventTime, PointerCoords[] pointerCoords, int metaState)", Add a new movement to the batch of movements in this event.
android.view.MotionEvent,"void addBatch(long eventTime, float x, float y, float pressure, float size, int metaState)", Add a new movement to the batch of movements in this event.
android.view.MotionEvent,static int axisFromString(String symbolicName)," Gets an axis by its symbolic name such as ""AXIS_X"" or an equivalent numeric constant such as ""42""."
android.view.MotionEvent,static String axisToString(int axis)," Returns a string that represents the symbolic name of the specified axis such as ""AXIS_X"" or an equivalent numeric constant such as ""42"" if unknown."
android.view.MotionEvent,int findPointerIndex(int pointerId)," Given a pointer identifier, find the index of its data in the event."
android.view.MotionEvent,int getAction(), Return the kind of action being performed.
android.view.MotionEvent,int getActionButton(), Gets which button has been modified during a press or release action.
android.view.MotionEvent,int getActionIndex()," For ACTION_POINTER_DOWN or ACTION_POINTER_UP as returned by getActionMasked(), this returns the associated pointer index."
android.view.MotionEvent,int getActionMasked()," Return the masked action being performed, without pointer index information."
android.view.MotionEvent,"float getAxisValue(int axis, int pointerIndex)", Returns the value of the requested axis for the given pointer index (use getPointerId(int) to find the pointer identifier for this index).
android.view.MotionEvent,float getAxisValue(int axis), getAxisValue(int) for the first pointer index (may be an arbitrary pointer identifier).
android.view.MotionEvent,int getButtonState(), Gets the state of all buttons that are pressed such as a mouse or stylus button.
android.view.MotionEvent,int getDeviceId(), Gets the id for the device that this event came from.
android.view.MotionEvent,long getDownTime(), Returns the time (in ms) when the user originally pressed down to start a stream of position events.
android.view.MotionEvent,int getEdgeFlags()," Returns a bitfield indicating which edges, if any, were touched by this MotionEvent."
android.view.MotionEvent,long getEventTime()," Retrieve the time this event occurred, in the uptimeMillis() time base."
android.view.MotionEvent,int getFlags(), Gets the motion event flags.
android.view.MotionEvent,"float getHistoricalAxisValue(int axis, int pointerIndex, int pos)"," Returns the historical value of the requested axis, as per getAxisValue(int, int), occurred between this event and the previous event for the given pointer."
android.view.MotionEvent,"float getHistoricalAxisValue(int axis, int pos)"," getHistoricalAxisValue(int, int, int) for the first pointer index (may be an arbitrary pointer identifier)."
android.view.MotionEvent,long getHistoricalEventTime(int pos)," Returns the time that a historical movement occurred between this event and the previous event, in the uptimeMillis() time base."
android.view.MotionEvent,"float getHistoricalOrientation(int pointerIndex, int pos)"," Returns a historical orientation coordinate, as per getOrientation(int), that occurred between this event and the previous event for the given pointer."
android.view.MotionEvent,float getHistoricalOrientation(int pos)," getHistoricalOrientation(int, int) for the first pointer index (may be an arbitrary pointer identifier)."
android.view.MotionEvent,"void getHistoricalPointerCoords(int pointerIndex, int pos, MotionEvent.PointerCoords outPointerCoords)"," Populates a MotionEvent.PointerCoords object with historical pointer coordinate data, as per getPointerCoords(int, MotionEvent.PointerCoords), that occurred between this event and the previous event for the given pointer."
android.view.MotionEvent,"float getHistoricalPressure(int pointerIndex, int pos)"," Returns a historical pressure coordinate, as per getPressure(int), that occurred between this event and the previous event for the given pointer."
android.view.MotionEvent,float getHistoricalPressure(int pos)," getHistoricalPressure(int, int) for the first pointer index (may be an arbitrary pointer identifier)."
android.view.MotionEvent,float getHistoricalSize(int pos)," getHistoricalSize(int, int) for the first pointer index (may be an arbitrary pointer identifier)."
android.view.MotionEvent,"float getHistoricalSize(int pointerIndex, int pos)"," Returns a historical size coordinate, as per getSize(int), that occurred between this event and the previous event for the given pointer."
android.view.MotionEvent,float getHistoricalToolMajor(int pos)," getHistoricalToolMajor(int, int) for the first pointer index (may be an arbitrary pointer identifier)."
android.view.MotionEvent,"float getHistoricalToolMajor(int pointerIndex, int pos)"," Returns a historical tool major axis coordinate, as per getToolMajor(int), that occurred between this event and the previous event for the given pointer."
android.view.MotionEvent,float getHistoricalToolMinor(int pos)," getHistoricalToolMinor(int, int) for the first pointer index (may be an arbitrary pointer identifier)."
android.view.MotionEvent,"float getHistoricalToolMinor(int pointerIndex, int pos)"," Returns a historical tool minor axis coordinate, as per getToolMinor(int), that occurred between this event and the previous event for the given pointer."
android.view.MotionEvent,float getHistoricalTouchMajor(int pos)," getHistoricalTouchMajor(int, int) for the first pointer index (may be an arbitrary pointer identifier)."
android.view.MotionEvent,"float getHistoricalTouchMajor(int pointerIndex, int pos)"," Returns a historical touch major axis coordinate, as per getTouchMajor(int), that occurred between this event and the previous event for the given pointer."
android.view.MotionEvent,"float getHistoricalTouchMinor(int pointerIndex, int pos)"," Returns a historical touch minor axis coordinate, as per getTouchMinor(int), that occurred between this event and the previous event for the given pointer."
android.view.MotionEvent,float getHistoricalTouchMinor(int pos)," getHistoricalTouchMinor(int, int) for the first pointer index (may be an arbitrary pointer identifier)."
android.view.MotionEvent,float getHistoricalX(int pos)," getHistoricalX(int, int) for the first pointer index (may be an arbitrary pointer identifier)."
android.view.MotionEvent,"float getHistoricalX(int pointerIndex, int pos)"," Returns a historical X coordinate, as per getX(int), that occurred between this event and the previous event for the given pointer."
android.view.MotionEvent,float getHistoricalY(int pos)," getHistoricalY(int, int) for the first pointer index (may be an arbitrary pointer identifier)."
android.view.MotionEvent,"float getHistoricalY(int pointerIndex, int pos)"," Returns a historical Y coordinate, as per getY(int), that occurred between this event and the previous event for the given pointer."
android.view.MotionEvent,int getHistorySize(), Returns the number of historical points in this event.
android.view.MotionEvent,int getMetaState(), Returns the state of any meta / modifier keys that were in effect when the event was generated.
android.view.MotionEvent,float getOrientation(), getOrientation(int) for the first pointer index (may be an arbitrary pointer identifier).
android.view.MotionEvent,float getOrientation(int pointerIndex), Returns the orientation of the touch area and tool area in radians clockwise from vertical for the given pointer index (use getPointerId(int) to find the pointer identifier for this index).
android.view.MotionEvent,"void getPointerCoords(int pointerIndex, MotionEvent.PointerCoords outPointerCoords)", Populates a MotionEvent.PointerCoords object with pointer coordinate data for the specified pointer index.
android.view.MotionEvent,int getPointerCount(), The number of pointers of data contained in this event.
android.view.MotionEvent,int getPointerId(int pointerIndex), Return the pointer identifier associated with a particular pointer data index in this event.
android.view.MotionEvent,"void getPointerProperties(int pointerIndex, MotionEvent.PointerProperties outPointerProperties)", Populates a MotionEvent.PointerProperties object with pointer properties for the specified pointer index.
android.view.MotionEvent,float getPressure(int pointerIndex), Returns the current pressure of this event for the given pointer index (use getPointerId(int) to find the pointer identifier for this index).
android.view.MotionEvent,float getPressure(), getPressure(int) for the first pointer index (may be an arbitrary pointer identifier).
android.view.MotionEvent,float getRawX(), Returns the original raw X coordinate of this event.
android.view.MotionEvent,float getRawY(), Returns the original raw Y coordinate of this event.
android.view.MotionEvent,float getSize(int pointerIndex), Returns a scaled value of the approximate size for the given pointer index (use getPointerId(int) to find the pointer identifier for this index).
android.view.MotionEvent,float getSize(), getSize(int) for the first pointer index (may be an arbitrary pointer identifier).
android.view.MotionEvent,int getSource(), Gets the source of the event.
android.view.MotionEvent,float getToolMajor(int pointerIndex), Returns the length of the major axis of an ellipse that describes the size of the approaching tool for the given pointer index (use getPointerId(int) to find the pointer identifier for this index).
android.view.MotionEvent,float getToolMajor(), getToolMajor(int) for the first pointer index (may be an arbitrary pointer identifier).
android.view.MotionEvent,float getToolMinor(), getToolMinor(int) for the first pointer index (may be an arbitrary pointer identifier).
android.view.MotionEvent,float getToolMinor(int pointerIndex), Returns the length of the minor axis of an ellipse that describes the size of the approaching tool for the given pointer index (use getPointerId(int) to find the pointer identifier for this index).
android.view.MotionEvent,int getToolType(int pointerIndex), Gets the tool type of a pointer for the given pointer index.
android.view.MotionEvent,float getTouchMajor(), getTouchMajor(int) for the first pointer index (may be an arbitrary pointer identifier).
android.view.MotionEvent,float getTouchMajor(int pointerIndex), Returns the length of the major axis of an ellipse that describes the touch area at the point of contact for the given pointer index (use getPointerId(int) to find the pointer identifier for this index).
android.view.MotionEvent,float getTouchMinor(int pointerIndex), Returns the length of the minor axis of an ellipse that describes the touch area at the point of contact for the given pointer index (use getPointerId(int) to find the pointer identifier for this index).
android.view.MotionEvent,float getTouchMinor(), getTouchMinor(int) for the first pointer index (may be an arbitrary pointer identifier).
android.view.MotionEvent,float getX(int pointerIndex), Returns the X coordinate of this event for the given pointer index (use getPointerId(int) to find the pointer identifier for this index).
android.view.MotionEvent,float getX(), getX(int) for the first pointer index (may be an arbitrary pointer identifier).
android.view.MotionEvent,float getXPrecision(), Return the precision of the X coordinates being reported.
android.view.MotionEvent,float getY(), getY(int) for the first pointer index (may be an arbitrary pointer identifier).
android.view.MotionEvent,float getY(int pointerIndex), Returns the Y coordinate of this event for the given pointer index (use getPointerId(int) to find the pointer identifier for this index).
android.view.MotionEvent,float getYPrecision(), Return the precision of the Y coordinates being reported.
android.view.MotionEvent,boolean isButtonPressed(int button), Checks if a mouse or stylus button (or combination of buttons) is pressed.
android.view.MotionEvent,"static MotionEvent obtain(long downTime, long eventTime, int action, float x, float y, int metaState)"," Create a new MotionEvent, filling in a subset of the basic motion values."
android.view.MotionEvent,"static MotionEvent obtain(long downTime, long eventTime, int action, int pointerCount, float x, float y, float pressure, float size, int metaState, float xPrecision, float yPrecision, int deviceId, int edgeFlags)"," This method was deprecated in API level 9. Use obtain(long, long, int, float, float, float, float, int, float, float, int, int) instead."
android.view.MotionEvent,"static MotionEvent obtain(long downTime, long eventTime, int action, int pointerCount, int[] pointerIds, PointerCoords[] pointerCoords, int metaState, float xPrecision, float yPrecision, int deviceId, int edgeFlags, int source, int flags)"," This method was deprecated in API level 14. Use obtain(long, long, int, int, PointerProperties[], PointerCoords[], int, int, float, float, int, int, int, int) instead."
android.view.MotionEvent,"static MotionEvent obtain(long downTime, long eventTime, int action, int pointerCount, PointerProperties[] pointerProperties, PointerCoords[] pointerCoords, int metaState, int buttonState, float xPrecision, float yPrecision, int deviceId, int edgeFlags, int source, int flags)"," Create a new MotionEvent, filling in all of the basic values that define the motion."
android.view.MotionEvent,static MotionEvent obtain(MotionEvent other)," Create a new MotionEvent, copying from an existing one."
android.view.MotionEvent,"static MotionEvent obtain(long downTime, long eventTime, int action, float x, float y, float pressure, float size, int metaState, float xPrecision, float yPrecision, int deviceId, int edgeFlags)"," Create a new MotionEvent, filling in all of the basic values that define the motion."
android.view.MotionEvent,static MotionEvent obtainNoHistory(MotionEvent other)," Create a new MotionEvent, copying from an existing one, but not including any historical point information."
android.view.MotionEvent,"void offsetLocation(float deltaX, float deltaY)", Adjust this event's location.
android.view.MotionEvent,void recycle()," Recycle the MotionEvent, to be re-used by a later caller."
android.view.MotionEvent,void setAction(int action), Sets this event's action.
android.view.MotionEvent,void setEdgeFlags(int flags)," Sets the bitfield indicating which edges, if any, were touched by this MotionEvent."
android.view.MotionEvent,"void setLocation(float x, float y)", Set this event's location.
android.view.MotionEvent,void setSource(int source), Modifies the source of the event.
android.view.MotionEvent,String toString(), Returns a string representation of the object.
android.view.MotionEvent,void transform(Matrix matrix), Applies a transformation matrix to all of the points in the event.
android.view.MotionEvent,"void writeToParcel(Parcel out, int flags)", Flatten this object in to a Parcel.
android.view.OrientationEventListener,boolean canDetectOrientation(),
android.view.OrientationEventListener,void disable(), Disables the OrientationEventListener.
android.view.OrientationEventListener,void enable(), Enables the OrientationEventListener so it will monitor the sensor and call onOrientationChanged(int) when the device orientation changes.
android.view.OrientationEventListener,abstract void onOrientationChanged(int orientation), Called when the orientation of the device has changed.
android.view.OrientationListener,void disable(), Disables the OrientationListener.
android.view.OrientationListener,void enable(), Enables the OrientationListener so it will monitor the sensor and call onOrientationChanged(int) when the device orientation changes.
android.view.OrientationListener,"void onAccuracyChanged(int sensor, int accuracy)", Called when the accuracy of a sensor has changed.
android.view.OrientationListener,abstract void onOrientationChanged(int orientation), Look at onOrientationChanged(int) for method description and usage
android.view.OrientationListener,"void onSensorChanged(int sensor, float[] values)", Called when sensor values have changed.
android.view.PixelCopy.OnPixelCopyFinishedListener,abstract void onPixelCopyFinished(int copyResult), Callback for when a pixel copy request has completed.
android.view.PixelCopy,"static void request(SurfaceView source, Bitmap dest, PixelCopy.OnPixelCopyFinishedListener listener, Handler listenerThread)", Requests for the display content of a SurfaceView to be copied into a provided Bitmap.
android.view.PixelCopy,"static void request(Surface source, Rect srcRect, Bitmap dest, PixelCopy.OnPixelCopyFinishedListener listener, Handler listenerThread)", Requests a copy of the pixels at the provided Rect from a Surface to be copied into a provided Bitmap.
android.view.PixelCopy,"static void request(SurfaceView source, Rect srcRect, Bitmap dest, PixelCopy.OnPixelCopyFinishedListener listener, Handler listenerThread)", Requests for the display content of a SurfaceView to be copied into a provided Bitmap.
android.view.PixelCopy,"static void request(Window source, Rect srcRect, Bitmap dest, PixelCopy.OnPixelCopyFinishedListener listener, Handler listenerThread)", Requests a copy of the pixels at the provided Rect from a Window to be copied into a provided Bitmap.
android.view.PixelCopy,"static void request(Window source, Bitmap dest, PixelCopy.OnPixelCopyFinishedListener listener, Handler listenerThread)", Requests a copy of the pixels from a Window to be copied into a provided Bitmap.
android.view.PixelCopy,"static void request(Surface source, Bitmap dest, PixelCopy.OnPixelCopyFinishedListener listener, Handler listenerThread)", Requests a copy of the pixels from a Surface to be copied into a provided Bitmap.
android.view.PointerIcon,"static PointerIcon create(Bitmap bitmap, float hotSpotX, float hotSpotY)", Creates a custom pointer icon from the given bitmap and hotspot information.
android.view.PointerIcon,int describeContents(), Describe the kinds of special objects contained in this Parcelable instance's marshaled representation.
android.view.PointerIcon,boolean equals(Object other)," Indicates whether some other object is ""equal to"" this one."
android.view.PointerIcon,"static PointerIcon getSystemIcon(Context context, int type)", Gets a system pointer icon for the given type.
android.view.PointerIcon,"static PointerIcon load(Resources resources, int resourceId)", Loads a custom pointer icon from an XML resource.
android.view.PointerIcon,"void writeToParcel(Parcel out, int flags)", Flatten this object in to a Parcel.
android.view.ScaleGestureDetector.OnScaleGestureListener,abstract boolean onScale(ScaleGestureDetector detector), Responds to scaling events for a gesture in progress.
android.view.ScaleGestureDetector.OnScaleGestureListener,abstract boolean onScaleBegin(ScaleGestureDetector detector), Responds to the beginning of a scaling gesture.
android.view.ScaleGestureDetector.OnScaleGestureListener,abstract void onScaleEnd(ScaleGestureDetector detector), Responds to the end of a scale gesture.
android.view.ScaleGestureDetector.SimpleOnScaleGestureListener,boolean onScale(ScaleGestureDetector detector), Responds to scaling events for a gesture in progress.
android.view.ScaleGestureDetector.SimpleOnScaleGestureListener,boolean onScaleBegin(ScaleGestureDetector detector), Responds to the beginning of a scaling gesture.
android.view.ScaleGestureDetector.SimpleOnScaleGestureListener,void onScaleEnd(ScaleGestureDetector detector), Responds to the end of a scale gesture.
android.view.ScaleGestureDetector,float getCurrentSpan(), Return the average distance between each of the pointers forming the gesture in progress through the focal point.
android.view.ScaleGestureDetector,float getCurrentSpanX(), Return the average X distance between each of the pointers forming the gesture in progress through the focal point.
android.view.ScaleGestureDetector,float getCurrentSpanY(), Return the average Y distance between each of the pointers forming the gesture in progress through the focal point.
android.view.ScaleGestureDetector,long getEventTime(), Return the event time of the current event being processed.
android.view.ScaleGestureDetector,float getFocusX(), Get the X coordinate of the current gesture's focal point.
android.view.ScaleGestureDetector,float getFocusY(), Get the Y coordinate of the current gesture's focal point.
android.view.ScaleGestureDetector,float getPreviousSpan(), Return the previous average distance between each of the pointers forming the gesture in progress through the focal point.
android.view.ScaleGestureDetector,float getPreviousSpanX(), Return the previous average X distance between each of the pointers forming the gesture in progress through the focal point.
android.view.ScaleGestureDetector,float getPreviousSpanY(), Return the previous average Y distance between each of the pointers forming the gesture in progress through the focal point.
android.view.ScaleGestureDetector,float getScaleFactor(), Return the scaling factor from the previous scale event to the current event.
android.view.ScaleGestureDetector,long getTimeDelta(), Return the time difference in milliseconds between the previous accepted scaling event and the current scaling event.
android.view.ScaleGestureDetector,boolean isInProgress(), Returns true if a scale gesture is in progress.
android.view.ScaleGestureDetector,boolean isQuickScaleEnabled()," Return whether the quick scale gesture, in which the user performs a double tap followed by a swipe, should perform scaling."
android.view.ScaleGestureDetector,boolean isStylusScaleEnabled()," Return whether the stylus scale gesture, in which the user uses a stylus and presses the button, should perform scaling."
android.view.ScaleGestureDetector,boolean onTouchEvent(MotionEvent event), Accepts MotionEvents and dispatches events to a ScaleGestureDetector.OnScaleGestureListener when appropriate.
android.view.ScaleGestureDetector,void setQuickScaleEnabled(boolean scales), Set whether the associated ScaleGestureDetector.OnScaleGestureListener should receive onScale callbacks when the user performs a doubleTap followed by a swipe.
android.view.ScaleGestureDetector,void setStylusScaleEnabled(boolean scales), Sets whether the associates ScaleGestureDetector.OnScaleGestureListener should receive onScale callbacks when the user uses a stylus and presses the button.
android.view.SearchEvent,InputDevice getInputDevice(), Returns the InputDevice that triggered the search.
android.view.SoundEffectConstants,static int getContantForFocusDirection(int direction), Get the sonification constant for the focus directions.
android.view.SubMenu,abstract void clearHeader(), Clears the header of the submenu.
android.view.SubMenu,abstract MenuItem getItem(), Gets the MenuItem that represents this submenu in the parent menu.
android.view.SubMenu,abstract SubMenu setHeaderIcon(int iconRes), Sets the submenu header's icon to the icon given in iconRes resource id.
android.view.SubMenu,abstract SubMenu setHeaderIcon(Drawable icon), Sets the submenu header's icon to the icon given in icon Drawable.
android.view.SubMenu,abstract SubMenu setHeaderTitle(int titleRes), Sets the submenu header's title to the title given in titleRes resource identifier.
android.view.SubMenu,abstract SubMenu setHeaderTitle(CharSequence title), Sets the submenu header's title to the title given in title.
android.view.SubMenu,abstract SubMenu setHeaderView(View view), Sets the header of the submenu to the View given in view.
android.view.SubMenu,abstract SubMenu setIcon(Drawable icon), Change the icon associated with this submenu's item in its parent menu.
android.view.SubMenu,abstract SubMenu setIcon(int iconRes), Change the icon associated with this submenu's item in its parent menu.
android.view.Surface.OutOfResourcesException,final void addSuppressed(Throwable exception), Appends the specified exception to the exceptions that were suppressed in order to deliver this exception.
android.view.Surface.OutOfResourcesException,Throwable fillInStackTrace(), Fills in the execution stack trace.
android.view.Surface.OutOfResourcesException,Throwable getCause(), Returns the cause of this throwable or null if the cause is nonexistent or unknown.
android.view.Surface.OutOfResourcesException,String getLocalizedMessage(), Creates a localized description of this throwable.
android.view.Surface.OutOfResourcesException,String getMessage(), Returns the detail message string of this throwable.
android.view.Surface.OutOfResourcesException,StackTraceElement[] getStackTrace(), Provides programmatic access to the stack trace information printed by printStackTrace().
android.view.Surface.OutOfResourcesException,final Throwable[] getSuppressed()," Returns an array containing all of the exceptions that were suppressed, typically by the try-with-resources statement, in order to deliver this exception."
android.view.Surface.OutOfResourcesException,Throwable initCause(Throwable cause), Initializes the cause of this throwable to the specified value.
android.view.Surface.OutOfResourcesException,void printStackTrace(), Prints this throwable and its backtrace to the standard error stream.
android.view.Surface.OutOfResourcesException,void printStackTrace(PrintWriter s), Prints this throwable and its backtrace to the specified print writer.
android.view.Surface.OutOfResourcesException,void printStackTrace(PrintStream s), Prints this throwable and its backtrace to the specified print stream.
android.view.Surface.OutOfResourcesException,void setStackTrace(StackTraceElement[] stackTrace), Sets the stack trace elements that will be returned by getStackTrace() and printed by printStackTrace() and related methods.
android.view.Surface.OutOfResourcesException,String toString(), Returns a short description of this throwable.
android.view.Surface.OutOfResourcesException,Object clone(), Creates and returns a copy of this object.
android.view.Surface.OutOfResourcesException,boolean equals(Object obj)," Indicates whether some other object is ""equal to"" this one."
android.view.Surface.OutOfResourcesException,void finalize(), Called by the garbage collector on an object when garbage collection determines that there are no more references to the object.
android.view.Surface.OutOfResourcesException,final Class<?> getClass(), Returns the runtime class of this Object.
android.view.Surface.OutOfResourcesException,int hashCode(), Returns a hash code value for the object.
android.view.Surface.OutOfResourcesException,final void notify(), Wakes up a single thread that is waiting on this object's monitor.
android.view.Surface.OutOfResourcesException,final void notifyAll(), Wakes up all threads that are waiting on this object's monitor.
android.view.Surface.OutOfResourcesException,String toString(), Returns a string representation of the object.
android.view.Surface.OutOfResourcesException,"final void wait(long millis, int nanos)"," Causes the current thread to wait until another thread invokes the notify() method or the notifyAll() method for this object, or some other thread interrupts the current thread, or a certain amount of real time has elapsed."
android.view.Surface.OutOfResourcesException,final void wait(long millis)," Causes the current thread to wait until either another thread invokes the notify() method or the notifyAll() method for this object, or a specified amount of time has elapsed."
android.view.Surface.OutOfResourcesException,final void wait(), Causes the current thread to wait until another thread invokes the notify() method or the notifyAll() method for this object.
android.view.Surface,int describeContents(), Describe the kinds of special objects contained in this Parcelable instance's marshaled representation.
android.view.Surface,boolean isValid(), Returns true if this object holds a valid surface.
android.view.Surface,Canvas lockCanvas(Rect inOutDirty), Gets a Canvas for drawing into this surface.
android.view.Surface,Canvas lockHardwareCanvas(), Gets a Canvas for drawing into this surface.
android.view.Surface,void readFromParcel(Parcel source),
android.view.Surface,void release(), Release the local reference to the server-side surface.
android.view.Surface,String toString(), Returns a string representation of the object.
android.view.Surface,void unlockCanvas(Canvas canvas), This method was deprecated in API level 17. This API has been removed and is not supported. Do not use.
android.view.Surface,void unlockCanvasAndPost(Canvas canvas), Posts the new contents of the Canvas to the surface and releases the Canvas.
android.view.Surface,"void writeToParcel(Parcel dest, int flags)", Flatten this object in to a Parcel.
android.view.SurfaceHolder.BadSurfaceTypeException,final void addSuppressed(Throwable exception), Appends the specified exception to the exceptions that were suppressed in order to deliver this exception.
android.view.SurfaceHolder.BadSurfaceTypeException,Throwable fillInStackTrace(), Fills in the execution stack trace.
android.view.SurfaceHolder.BadSurfaceTypeException,Throwable getCause(), Returns the cause of this throwable or null if the cause is nonexistent or unknown.
android.view.SurfaceHolder.BadSurfaceTypeException,String getLocalizedMessage(), Creates a localized description of this throwable.
android.view.SurfaceHolder.BadSurfaceTypeException,String getMessage(), Returns the detail message string of this throwable.
android.view.SurfaceHolder.BadSurfaceTypeException,StackTraceElement[] getStackTrace(), Provides programmatic access to the stack trace information printed by printStackTrace().
android.view.SurfaceHolder.BadSurfaceTypeException,final Throwable[] getSuppressed()," Returns an array containing all of the exceptions that were suppressed, typically by the try-with-resources statement, in order to deliver this exception."
android.view.SurfaceHolder.BadSurfaceTypeException,Throwable initCause(Throwable cause), Initializes the cause of this throwable to the specified value.
android.view.SurfaceHolder.BadSurfaceTypeException,void printStackTrace(), Prints this throwable and its backtrace to the standard error stream.
android.view.SurfaceHolder.BadSurfaceTypeException,void printStackTrace(PrintWriter s), Prints this throwable and its backtrace to the specified print writer.
android.view.SurfaceHolder.BadSurfaceTypeException,void printStackTrace(PrintStream s), Prints this throwable and its backtrace to the specified print stream.
android.view.SurfaceHolder.BadSurfaceTypeException,void setStackTrace(StackTraceElement[] stackTrace), Sets the stack trace elements that will be returned by getStackTrace() and printed by printStackTrace() and related methods.
android.view.SurfaceHolder.BadSurfaceTypeException,String toString(), Returns a short description of this throwable.
android.view.SurfaceHolder.BadSurfaceTypeException,Object clone(), Creates and returns a copy of this object.
android.view.SurfaceHolder.BadSurfaceTypeException,boolean equals(Object obj)," Indicates whether some other object is ""equal to"" this one."
android.view.SurfaceHolder.BadSurfaceTypeException,void finalize(), Called by the garbage collector on an object when garbage collection determines that there are no more references to the object.
android.view.SurfaceHolder.BadSurfaceTypeException,final Class<?> getClass(), Returns the runtime class of this Object.
android.view.SurfaceHolder.BadSurfaceTypeException,int hashCode(), Returns a hash code value for the object.
android.view.SurfaceHolder.BadSurfaceTypeException,final void notify(), Wakes up a single thread that is waiting on this object's monitor.
android.view.SurfaceHolder.BadSurfaceTypeException,final void notifyAll(), Wakes up all threads that are waiting on this object's monitor.
android.view.SurfaceHolder.BadSurfaceTypeException,String toString(), Returns a string representation of the object.
android.view.SurfaceHolder.BadSurfaceTypeException,"final void wait(long millis, int nanos)"," Causes the current thread to wait until another thread invokes the notify() method or the notifyAll() method for this object, or some other thread interrupts the current thread, or a certain amount of real time has elapsed."
android.view.SurfaceHolder.BadSurfaceTypeException,final void wait(long millis)," Causes the current thread to wait until either another thread invokes the notify() method or the notifyAll() method for this object, or a specified amount of time has elapsed."
android.view.SurfaceHolder.BadSurfaceTypeException,final void wait(), Causes the current thread to wait until another thread invokes the notify() method or the notifyAll() method for this object.
android.view.SurfaceHolder.Callback,"abstract void surfaceChanged(SurfaceHolder holder, int format, int width, int height)", This is called immediately after any structural changes (format or size) have been made to the surface.
android.view.SurfaceHolder.Callback,abstract void surfaceCreated(SurfaceHolder holder), This is called immediately after the surface is first created.
android.view.SurfaceHolder.Callback,abstract void surfaceDestroyed(SurfaceHolder holder), This is called immediately before a surface is being destroyed.
android.view.SurfaceHolder.Callback2,abstract void surfaceRedrawNeeded(SurfaceHolder holder)," Called when the application needs to redraw the content of its surface, after it is resized or for some other reason."
android.view.SurfaceHolder.Callback2,"default void surfaceRedrawNeededAsync(SurfaceHolder holder, Runnable drawingFinished)", An alternative to surfaceRedrawNeeded where it is not required to block until the redraw is complete.
android.view.SurfaceHolder,abstract void addCallback(SurfaceHolder.Callback callback), Add a Callback interface for this holder.
android.view.SurfaceHolder,abstract Surface getSurface(), Direct access to the surface object.
android.view.SurfaceHolder,abstract Rect getSurfaceFrame(), Retrieve the current size of the surface.
android.view.SurfaceHolder,abstract boolean isCreating(), Use this method to find out if the surface is in the process of being created from Callback methods.
android.view.SurfaceHolder,abstract Canvas lockCanvas(), Start editing the pixels in the surface.
android.view.SurfaceHolder,abstract Canvas lockCanvas(Rect dirty), Just like lockCanvas() but allows specification of a dirty rectangle.
android.view.SurfaceHolder,default Canvas lockHardwareCanvas(), Just like lockCanvas() but the returned canvas is hardware-accelerated.
android.view.SurfaceHolder,abstract void removeCallback(SurfaceHolder.Callback callback), Removes a previously added Callback interface from this holder.
android.view.SurfaceHolder,"abstract void setFixedSize(int width, int height)", Make the surface a fixed size.
android.view.SurfaceHolder,abstract void setFormat(int format), Set the desired PixelFormat of the surface.
android.view.SurfaceHolder,abstract void setKeepScreenOn(boolean screenOn), Enable or disable option to keep the screen turned on while this surface is displayed.
android.view.SurfaceHolder,abstract void setSizeFromLayout(), Allow the surface to resized based on layout of its container (this is the default).
android.view.SurfaceHolder,abstract void setType(int type)," This method was deprecated in API level 11. this is ignored, this value is set automatically when needed."
android.view.SurfaceHolder,abstract void unlockCanvasAndPost(Canvas canvas), Finish editing pixels in the surface.
android.view.SurfaceView,void draw(Canvas canvas), Manually render this view (and all of its children) to the given Canvas.
android.view.SurfaceView,boolean gatherTransparentRegion(Region region), This is used by the RootView to perform an optimization when the view hierarchy contains one or several SurfaceView.
android.view.SurfaceView,SurfaceHolder getHolder(), Return the SurfaceHolder providing access and control over this SurfaceView's underlying surface.
android.view.SurfaceView,void setSecure(boolean isSecure)," Control whether the surface view's content should be treated as secure, preventing it from appearing in screenshots or from being viewed on non-secure displays."
android.view.SurfaceView,void setVisibility(int visibility), Set the visibility state of this view.
android.view.SurfaceView,void setZOrderMediaOverlay(boolean isMediaOverlay), Control whether the surface view's surface is placed on top of another regular surface view in the window (but still behind the window itself).
android.view.SurfaceView,void setZOrderOnTop(boolean onTop), Control whether the surface view's surface is placed on top of its window.
android.view.textclassifier.logging.Logger.Config,boolean equals(Object obj)," Indicates whether some other object is ""equal to"" this one."
android.view.textclassifier.logging.Logger.Config,String getPackageName(), Returns the package name of the application the logger logs for.
android.view.textclassifier.logging.Logger.Config,String getWidgetType(), Returns the name for the widget being logged for.
android.view.textclassifier.logging.Logger.Config,String getWidgetVersion(), Returns string version info for the logger.
android.view.textclassifier.logging.Logger.Config,int hashCode(), Returns a hash code value for the object.
android.view.textclassifier.logging.Logger,BreakIterator getTokenIterator(Locale locale), Returns a token iterator for tokenizing text for logging purposes.
android.view.textclassifier.logging.Logger,boolean isSmartSelection(String signature), Returns true if the signature matches that of a smart selection event (i.e.
android.view.textclassifier.logging.Logger,"final void logSelectionActionEvent(int start, int end, int actionType, TextClassification classification)", Logs an event specifying an action taken on a selection.
android.view.textclassifier.logging.Logger,"final void logSelectionActionEvent(int start, int end, int actionType)", Logs an event specifying an action taken on a selection.
android.view.textclassifier.logging.Logger,"final void logSelectionModifiedEvent(int start, int end, TextSelection selection)"," Logs a ""selection modified"" event."
android.view.textclassifier.logging.Logger,"final void logSelectionModifiedEvent(int start, int end)"," Logs a ""selection modified"" event."
android.view.textclassifier.logging.Logger,"final void logSelectionModifiedEvent(int start, int end, TextClassification classification)"," Logs a ""selection modified"" event."
android.view.textclassifier.logging.Logger,final void logSelectionStartedEvent(int start)," Logs a ""selection started"" event."
android.view.textclassifier.logging.Logger,abstract void writeEvent(SelectionEvent event), Writes the selection event.
android.view.textclassifier.logging.SelectionEvent,long getDurationSincePreviousEvent(), Returns the duration in ms between when this event was triggered and when the previous event in the selection session was triggered.
android.view.textclassifier.logging.SelectionEvent,long getDurationSinceSessionStart(), Returns the duration in ms between when this event was triggered and when the first event in the selection session was triggered.
android.view.textclassifier.logging.SelectionEvent,int getEnd(), Returns the end index of this events token relative to the index of the start selection event in the selection session.
android.view.textclassifier.logging.SelectionEvent,String getEntityType(), Returns the type of entity that is associated with this event.
android.view.textclassifier.logging.SelectionEvent,int getEventIndex(), Returns the index (e.g.
android.view.textclassifier.logging.SelectionEvent,long getEventTime(), Returns the time this event was triggered.
android.view.textclassifier.logging.SelectionEvent,int getEventType(), Returns the type of event that was triggered.
android.view.textclassifier.logging.SelectionEvent,String getPackageName(), Returns the package name of the app that this event originated in.
android.view.textclassifier.logging.SelectionEvent,String getSessionId(), Returns the selection session id.
android.view.textclassifier.logging.SelectionEvent,String getSignature(), Returns the signature of the text classifier result associated with this event.
android.view.textclassifier.logging.SelectionEvent,int getSmartEnd(), Returns the end index of this events token relative to the index of the smart selection event in the selection session.
android.view.textclassifier.logging.SelectionEvent,int getSmartStart(), Returns the start index of this events token relative to the index of the smart selection event in the selection session.
android.view.textclassifier.logging.SelectionEvent,int getStart(), Returns the start index of this events token relative to the index of the start selection event in the selection session.
android.view.textclassifier.logging.SelectionEvent,String getWidgetType(), Returns the type of widget that was involved in triggering this event.
android.view.textclassifier.logging.SelectionEvent,String getWidgetVersion(), Returns a string version info for the widget this event was triggered in.
android.view.textclassifier.logging.SelectionEvent,String toString(), Returns a string representation of the object.
android.view.textclassifier.TextClassification.Builder,"TextClassification.Builder addSecondaryAction(Intent intent, String label, Drawable icon)", Adds an secondary action that may be performed on the classified text.
android.view.textclassifier.TextClassification.Builder,TextClassification build(), Builds and returns a TextClassification object.
android.view.textclassifier.TextClassification.Builder,TextClassification.Builder clearSecondaryActions(), Removes all the secondary actions.
android.view.textclassifier.TextClassification.Builder,"TextClassification.Builder setEntityType(String type, float confidenceScore)", Sets an entity type for the classification result and assigns a confidence score.
android.view.textclassifier.TextClassification.Builder,TextClassification.Builder setIcon(Drawable icon), Sets the icon for the primary action that may be rendered on a widget used to act on the classified text.
android.view.textclassifier.TextClassification.Builder,TextClassification.Builder setIntent(Intent intent), Sets the intent for the primary action that may be fired to act on the classified text.
android.view.textclassifier.TextClassification.Builder,TextClassification.Builder setLabel(String label), Sets the label for the primary action that may be rendered on a widget used to act on the classified text.
android.view.textclassifier.TextClassification.Builder,TextClassification.Builder setOnClickListener(View.OnClickListener onClickListener), Sets the OnClickListener for the primary action that may be triggered to act on the classified text.
android.view.textclassifier.TextClassification.Builder,"TextClassification.Builder setPrimaryAction(Intent intent, String label, Drawable icon)", Sets the primary action that may be performed on the classified text.
android.view.textclassifier.TextClassification.Builder,TextClassification.Builder setSignature(String signature), Sets a signature for the TextClassification object.
android.view.textclassifier.TextClassification.Builder,TextClassification.Builder setText(String text), Sets the classified text.
android.view.textclassifier.TextClassification.Options,int describeContents(), Describe the kinds of special objects contained in this Parcelable instance's marshaled representation.
android.view.textclassifier.TextClassification.Options,LocaleList getDefaultLocales(),
android.view.textclassifier.TextClassification.Options,Calendar getReferenceTime(),
android.view.textclassifier.TextClassification.Options,TextClassification.Options setDefaultLocales(LocaleList defaultLocales),
android.view.textclassifier.TextClassification.Options,TextClassification.Options setReferenceTime(Calendar referenceTime),
android.view.textclassifier.TextClassification.Options,"void writeToParcel(Parcel dest, int flags)", Flatten this object in to a Parcel.
android.view.textclassifier.TextClassification,int describeContents(), Describe the kinds of special objects contained in this Parcelable instance's marshaled representation.
android.view.textclassifier.TextClassification,float getConfidenceScore(String entity), Returns the confidence score for the specified entity.
android.view.textclassifier.TextClassification,String getEntity(int index), Returns the entity at the specified index.
android.view.textclassifier.TextClassification,int getEntityCount(), Returns the number of entities found in the classified text.
android.view.textclassifier.TextClassification,Drawable getIcon(), Returns an icon for the primary intent that may be rendered on a widget used to act on the classified text.
android.view.textclassifier.TextClassification,Intent getIntent(), Returns the primary intent that may be fired to act on the classified text.
android.view.textclassifier.TextClassification,CharSequence getLabel(), Returns a label for the primary intent that may be rendered on a widget used to act on the classified text.
android.view.textclassifier.TextClassification,View.OnClickListener getOnClickListener(), Returns the primary OnClickListener that may be triggered to act on the classified text.
android.view.textclassifier.TextClassification,int getSecondaryActionsCount(), Returns the number of secondary actions that are available to act on the classified text.
android.view.textclassifier.TextClassification,Drawable getSecondaryIcon(int index), Returns one of the secondary icons that maybe rendered on a widget used to act on the classified text.
android.view.textclassifier.TextClassification,Intent getSecondaryIntent(int index), Returns one of the secondary intents that may be fired to act on the classified text.
android.view.textclassifier.TextClassification,CharSequence getSecondaryLabel(int index), Returns one of the secondary labels that may be rendered on a widget used to act on the classified text.
android.view.textclassifier.TextClassification,String getSignature(), Returns the signature for this object.
android.view.textclassifier.TextClassification,String getText(), Gets the classified text.
android.view.textclassifier.TextClassification,String toString(), Returns a string representation of the object.
android.view.textclassifier.TextClassification,"void writeToParcel(Parcel dest, int flags)", Flatten this object in to a Parcel.
android.view.textclassifier.TextClassificationManager,TextClassifier getTextClassifier(), Returns the text classifier.
android.view.textclassifier.TextClassificationManager,void setTextClassifier(TextClassifier textClassifier), Sets the text classifier.
android.view.textclassifier.TextClassifier.EntityConfig,int describeContents(), Describe the kinds of special objects contained in this Parcelable instance's marshaled representation.
android.view.textclassifier.TextClassifier.EntityConfig,TextClassifier.EntityConfig excludeEntities(String... entities), Specifies an entity to be excluded.
android.view.textclassifier.TextClassifier.EntityConfig,List<String> getEntities(TextClassifier textClassifier), Returns an unmodifiable list of the final set of entities to find.
android.view.textclassifier.TextClassifier.EntityConfig,TextClassifier.EntityConfig includeEntities(String... entities), Specifies an entity to include in addition to any specified by the enity preset.
android.view.textclassifier.TextClassifier.EntityConfig,"void writeToParcel(Parcel dest, int flags)", Flatten this object in to a Parcel.
android.view.textclassifier.TextClassifier,"default TextClassification classifyText(CharSequence text, int startIndex, int endIndex)", Classifies the specified text and returns a TextClassification object that can be used to generate a widget for handling the classified text.
android.view.textclassifier.TextClassifier,"default TextClassification classifyText(CharSequence text, int startIndex, int endIndex, TextClassification.Options options)", Classifies the specified text and returns a TextClassification object that can be used to generate a widget for handling the classified text.
android.view.textclassifier.TextClassifier,"default TextClassification classifyText(CharSequence text, int startIndex, int endIndex, LocaleList defaultLocales)"," See classifyText(CharSequence, int, int, TextClassification.Options) or classifyText(CharSequence, int, int)."
android.view.textclassifier.TextClassifier,"default TextLinks generateLinks(CharSequence text, TextLinks.Options options)", Generates and returns a TextLinks that may be applied to the text to annotate it with links information.
android.view.textclassifier.TextClassifier,default TextLinks generateLinks(CharSequence text), Generates and returns a TextLinks that may be applied to the text to annotate it with links information.
android.view.textclassifier.TextClassifier,default Collection<String> getEntitiesForPreset(int entityPreset), Returns a Collection of the entity types in the specified preset.
android.view.textclassifier.TextClassifier,default Logger getLogger(Logger.Config config), Returns a helper for logging TextClassifier related events.
android.view.textclassifier.TextClassifier,"default TextSelection suggestSelection(CharSequence text, int selectionStartIndex, int selectionEndIndex, TextSelection.Options options)"," Returns suggested text selection start and end indices, recognized entity types, and their associated confidence scores."
android.view.textclassifier.TextClassifier,"default TextSelection suggestSelection(CharSequence text, int selectionStartIndex, int selectionEndIndex)"," Returns suggested text selection start and end indices, recognized entity types, and their associated confidence scores."
android.view.textclassifier.TextClassifier,"default TextSelection suggestSelection(CharSequence text, int selectionStartIndex, int selectionEndIndex, LocaleList defaultLocales)"," See suggestSelection(CharSequence, int, int) or suggestSelection(CharSequence, int, int, TextSelection.Options)."
android.view.textclassifier.TextLinks.Builder,"TextLinks.Builder addLink(int start, int end, Map<String,Float> entityScores)", Adds a TextLink.
android.view.textclassifier.TextLinks.Builder,TextLinks build(), Constructs a TextLinks instance.
android.view.textclassifier.TextLinks.Builder,TextLinks.Builder clearTextLinks(), Removes all TextLinks.TextLinks.
android.view.textclassifier.TextLinks.Options,int describeContents(), Describe the kinds of special objects contained in this Parcelable instance's marshaled representation.
android.view.textclassifier.TextLinks.Options,static TextLinks.Options fromLinkMask(int mask), Returns a new options object based on the specified link mask.
android.view.textclassifier.TextLinks.Options,int getApplyStrategy(),
android.view.textclassifier.TextLinks.Options,LocaleList getDefaultLocales(),
android.view.textclassifier.TextLinks.Options,TextClassifier.EntityConfig getEntityConfig(),
android.view.textclassifier.TextLinks.Options,"Function<TextLinks.TextLink,TextLinks.TextLinkSpan> getSpanFactory()", Returns a factory for converting a TextLink to a TextLinkSpan.
android.view.textclassifier.TextLinks.Options,TextLinks.Options setApplyStrategy(int applyStrategy), Sets a strategy for resolving conflicts when applying generated links to text that already have links.
android.view.textclassifier.TextLinks.Options,TextLinks.Options setDefaultLocales(LocaleList defaultLocales),
android.view.textclassifier.TextLinks.Options,TextLinks.Options setEntityConfig(TextClassifier.EntityConfig entityConfig), Sets the entity configuration to use.
android.view.textclassifier.TextLinks.Options,"TextLinks.Options setSpanFactory(Function<TextLinks.TextLink,TextLinks.TextLinkSpan> spanFactory)", Sets a factory for converting a TextLink to a TextLinkSpan.
android.view.textclassifier.TextLinks.Options,"void writeToParcel(Parcel dest, int flags)", Flatten this object in to a Parcel.
android.view.textclassifier.TextLinks.TextLink,int describeContents(), Describe the kinds of special objects contained in this Parcelable instance's marshaled representation.
android.view.textclassifier.TextLinks.TextLink,float getConfidenceScore(String entityType), Returns the confidence score for a particular entity type.
android.view.textclassifier.TextLinks.TextLink,int getEnd(), Returns the end index of this link in the original text.
android.view.textclassifier.TextLinks.TextLink,String getEntity(int index), Returns the entity type at a given index.
android.view.textclassifier.TextLinks.TextLink,int getEntityCount(), Returns the number of entity types that have confidence scores.
android.view.textclassifier.TextLinks.TextLink,int getStart(), Returns the start index of this link in the original text.
android.view.textclassifier.TextLinks.TextLink,"void writeToParcel(Parcel dest, int flags)", Flatten this object in to a Parcel.
android.view.textclassifier.TextLinks.TextLinkSpan,final TextLinks.TextLink getTextLink(),
android.view.textclassifier.TextLinks.TextLinkSpan,void onClick(View widget), Performs the click action associated with this span.
android.view.textclassifier.TextLinks,int describeContents(), Describe the kinds of special objects contained in this Parcelable instance's marshaled representation.
android.view.textclassifier.TextLinks,Collection<TextLinks.TextLink> getLinks(), Returns an unmodifiable Collection of the links.
android.view.textclassifier.TextLinks,"void writeToParcel(Parcel dest, int flags)", Flatten this object in to a Parcel.
android.view.textclassifier.TextSelection.Builder,TextSelection build(), Builds and returns TextSelection object.
android.view.textclassifier.TextSelection.Builder,"TextSelection.Builder setEntityType(String type, float confidenceScore)", Sets an entity type for the classified text and assigns a confidence score.
android.view.textclassifier.TextSelection.Builder,TextSelection.Builder setSignature(String signature), Sets a signature for the TextSelection object.
android.view.textclassifier.TextSelection.Options,int describeContents(), Describe the kinds of special objects contained in this Parcelable instance's marshaled representation.
android.view.textclassifier.TextSelection.Options,LocaleList getDefaultLocales(),
android.view.textclassifier.TextSelection.Options,TextSelection.Options setDefaultLocales(LocaleList defaultLocales),
android.view.textclassifier.TextSelection.Options,"void writeToParcel(Parcel dest, int flags)", Flatten this object in to a Parcel.
android.view.textclassifier.TextSelection,int describeContents(), Describe the kinds of special objects contained in this Parcelable instance's marshaled representation.
android.view.textclassifier.TextSelection,float getConfidenceScore(String entity), Returns the confidence score for the specified entity.
android.view.textclassifier.TextSelection,String getEntity(int index), Returns the entity at the specified index.
android.view.textclassifier.TextSelection,int getEntityCount(), Returns the number of entities found in the classified text.
android.view.textclassifier.TextSelection,int getSelectionEndIndex(), Returns the end index of the text selection.
android.view.textclassifier.TextSelection,int getSelectionStartIndex(), Returns the start index of the text selection.
android.view.textclassifier.TextSelection,String getSignature(), Returns the signature for this object.
android.view.textclassifier.TextSelection,String toString(), Returns a string representation of the object.
android.view.textclassifier.TextSelection,"void writeToParcel(Parcel dest, int flags)", Flatten this object in to a Parcel.
android.view.textservice.SentenceSuggestionsInfo,int describeContents(), Describe the kinds of special objects contained in this Parcelable instance's marshaled representation.
android.view.textservice.SentenceSuggestionsInfo,int getLengthAt(int i),
android.view.textservice.SentenceSuggestionsInfo,int getOffsetAt(int i),
android.view.textservice.SentenceSuggestionsInfo,int getSuggestionsCount(),
android.view.textservice.SentenceSuggestionsInfo,SuggestionsInfo getSuggestionsInfoAt(int i),
android.view.textservice.SentenceSuggestionsInfo,"void writeToParcel(Parcel dest, int flags)", Used to package this object into a Parcel.
android.view.textservice.SpellCheckerInfo,int describeContents(), Used to make this class parcelable.
android.view.textservice.SpellCheckerInfo,ComponentName getComponent(), Return the component of the service that implements.
android.view.textservice.SpellCheckerInfo,String getId(), Return a unique ID for this spell checker.
android.view.textservice.SpellCheckerInfo,String getPackageName(), Return the .apk package that implements this.
android.view.textservice.SpellCheckerInfo,ServiceInfo getServiceInfo(), Return the raw information about the Service implementing this spell checker.
android.view.textservice.SpellCheckerInfo,String getSettingsActivity(), Return the class name of an activity that provides a settings UI.
android.view.textservice.SpellCheckerInfo,SpellCheckerSubtype getSubtypeAt(int index), Return the subtype at the specified index.
android.view.textservice.SpellCheckerInfo,int getSubtypeCount(), Return the count of the subtypes.
android.view.textservice.SpellCheckerInfo,Drawable loadIcon(PackageManager pm), Load the user-displayed icon for this spell checker.
android.view.textservice.SpellCheckerInfo,CharSequence loadLabel(PackageManager pm), Load the user-displayed label for this spell checker.
android.view.textservice.SpellCheckerInfo,"void writeToParcel(Parcel dest, int flags)", Used to package this object into a Parcel.
android.view.textservice.SpellCheckerSession.SpellCheckerSessionListener,abstract void onGetSentenceSuggestions(SentenceSuggestionsInfo[] results)," Callback for getSentenceSuggestions(TextInfo[], int)"
android.view.textservice.SpellCheckerSession.SpellCheckerSessionListener,abstract void onGetSuggestions(SuggestionsInfo[] results)," Callback for getSuggestions(TextInfo, int) and getSuggestions(TextInfo[], int, boolean)"
android.view.textservice.SpellCheckerSession,void cancel(), Cancel pending and running spell check tasks
android.view.textservice.SpellCheckerSession,void close(), Finish this session and allow TextServicesManagerService to disconnect the bound spell checker.
android.view.textservice.SpellCheckerSession,"void getSentenceSuggestions(TextInfo[] textInfos, int suggestionsLimit)", Get suggestions from the specified sentences
android.view.textservice.SpellCheckerSession,SpellCheckerInfo getSpellChecker(), Get the spell checker service info this spell checker session has.
android.view.textservice.SpellCheckerSession,"void getSuggestions(TextInfo textInfo, int suggestionsLimit)"," This method was deprecated in API level 16. use getSentenceSuggestions(TextInfo[], int) instead"
android.view.textservice.SpellCheckerSession,"void getSuggestions(TextInfo[] textInfos, int suggestionsLimit, boolean sequentialWords)"," This method was deprecated in API level 16. use getSentenceSuggestions(TextInfo[], int) instead"
android.view.textservice.SpellCheckerSession,boolean isSessionDisconnected(),
android.view.textservice.SpellCheckerSubtype,boolean containsExtraValueKey(String key)," The string of ExtraValue in subtype should be defined as follows: example: key0,key1=value1,key2,key3,key4=value4"
android.view.textservice.SpellCheckerSubtype,int describeContents(), Describe the kinds of special objects contained in this Parcelable instance's marshaled representation.
android.view.textservice.SpellCheckerSubtype,boolean equals(Object o)," Indicates whether some other object is ""equal to"" this one."
android.view.textservice.SpellCheckerSubtype,"CharSequence getDisplayName(Context context, String packageName, ApplicationInfo appInfo)",
android.view.textservice.SpellCheckerSubtype,String getExtraValue(),
android.view.textservice.SpellCheckerSubtype,String getExtraValueOf(String key)," The string of ExtraValue in subtype should be defined as follows: example: key0,key1=value1,key2,key3,key4=value4"
android.view.textservice.SpellCheckerSubtype,String getLanguageTag(),
android.view.textservice.SpellCheckerSubtype,String getLocale(), This method was deprecated in API level 24. Use getLanguageTag() instead.
android.view.textservice.SpellCheckerSubtype,int getNameResId(),
android.view.textservice.SpellCheckerSubtype,int hashCode(), Returns a hash code value for the object.
android.view.textservice.SpellCheckerSubtype,"void writeToParcel(Parcel dest, int parcelableFlags)", Flatten this object in to a Parcel.
android.view.textservice.SuggestionsInfo,int describeContents(), Used to make this class parcelable.
android.view.textservice.SuggestionsInfo,int getCookie(),
android.view.textservice.SuggestionsInfo,int getSequence(),
android.view.textservice.SuggestionsInfo,String getSuggestionAt(int i),
android.view.textservice.SuggestionsInfo,int getSuggestionsAttributes(),
android.view.textservice.SuggestionsInfo,int getSuggestionsCount(),
android.view.textservice.SuggestionsInfo,"void setCookieAndSequence(int cookie, int sequence)", Set the cookie and the sequence of SuggestionsInfo which are set to TextInfo from a client application
android.view.textservice.SuggestionsInfo,"void writeToParcel(Parcel dest, int flags)", Used to package this object into a Parcel.
android.view.textservice.TextInfo,int describeContents(), Used to make this class parcelable.
android.view.textservice.TextInfo,CharSequence getCharSequence(),
android.view.textservice.TextInfo,int getCookie(),
android.view.textservice.TextInfo,int getSequence(),
android.view.textservice.TextInfo,String getText(),
android.view.textservice.TextInfo,"void writeToParcel(Parcel dest, int flags)", Used to package this object into a Parcel.
android.view.textservice.TextServicesManager,"SpellCheckerSession newSpellCheckerSession(Bundle bundle, Locale locale, SpellCheckerSession.SpellCheckerSessionListener listener, boolean referToSpellCheckerLanguageSettings)", Get a spell checker session for the specified spell checker
android.view.TextureView.SurfaceTextureListener,"abstract void onSurfaceTextureAvailable(SurfaceTexture surface, int width, int height)", Invoked when a TextureView's SurfaceTexture is ready for use.
android.view.TextureView.SurfaceTextureListener,abstract boolean onSurfaceTextureDestroyed(SurfaceTexture surface), Invoked when the specified SurfaceTexture is about to be destroyed.
android.view.TextureView.SurfaceTextureListener,"abstract void onSurfaceTextureSizeChanged(SurfaceTexture surface, int width, int height)", Invoked when the SurfaceTexture's buffers size changed.
android.view.TextureView.SurfaceTextureListener,abstract void onSurfaceTextureUpdated(SurfaceTexture surface), Invoked when the specified SurfaceTexture is updated through updateTexImage().
android.view.TextureView,void buildLayer(), Calling this method has no effect.
android.view.TextureView,final void draw(Canvas canvas), Subclasses of TextureView cannot do their own rendering with the Canvas object.
android.view.TextureView,"Bitmap getBitmap(int width, int height)", Returns a Bitmap representation of the content of the associated surface texture.
android.view.TextureView,Bitmap getBitmap(), Returns a Bitmap representation of the content of the associated surface texture.
android.view.TextureView,Bitmap getBitmap(Bitmap bitmap), Copies the content of this view's surface texture into the specified bitmap.
android.view.TextureView,int getLayerType(), Always returns LAYER_TYPE_HARDWARE.
android.view.TextureView,SurfaceTexture getSurfaceTexture(), Returns the SurfaceTexture used by this view.
android.view.TextureView,TextureView.SurfaceTextureListener getSurfaceTextureListener(), Returns the TextureView.SurfaceTextureListener currently associated with this texture view.
android.view.TextureView,Matrix getTransform(Matrix transform), Returns the transform associated with this texture view.
android.view.TextureView,boolean isAvailable(), Returns true if the SurfaceTexture associated with this TextureView is available for rendering.
android.view.TextureView,boolean isOpaque(), Indicates whether this View is opaque.
android.view.TextureView,Canvas lockCanvas(), Start editing the pixels in the surface.
android.view.TextureView,Canvas lockCanvas(Rect dirty), Just like lockCanvas() but allows specification of a dirty rectangle.
android.view.TextureView,void setBackgroundDrawable(Drawable background), This method is deprecated. use setBackground(Drawable) instead
android.view.TextureView,void setForeground(Drawable foreground), Supply a Drawable that is to be rendered on top of all of the content in the view.
android.view.TextureView,void setLayerPaint(Paint paint), Updates the Paint object used with the current layer (used only if the current layer type is not set to LAYER_TYPE_NONE).
android.view.TextureView,"void setLayerType(int layerType, Paint paint)", The layer type of a TextureView is ignored since a TextureView is always considered to act as a hardware layer.
android.view.TextureView,void setOpaque(boolean opaque), Indicates whether the content of this TextureView is opaque.
android.view.TextureView,void setSurfaceTexture(SurfaceTexture surfaceTexture), Set the SurfaceTexture for this view to use.
android.view.TextureView,void setSurfaceTextureListener(TextureView.SurfaceTextureListener listener), Sets the TextureView.SurfaceTextureListener used to listen to surface texture events.
android.view.TextureView,void setTransform(Matrix transform), Sets the transform to associate with this texture view.
android.view.TextureView,void unlockCanvasAndPost(Canvas canvas), Finish editing pixels in the surface.
android.view.TouchDelegate,boolean onTouchEvent(MotionEvent event), Will forward touch events to the delegate view if the event is within the bounds specified in the constructor.
android.view.VelocityTracker,void addMovement(MotionEvent event), Add a user's movement to the tracker.
android.view.VelocityTracker,void clear(), Reset the velocity tracker back to its initial state.
android.view.VelocityTracker,void computeCurrentVelocity(int units)," Equivalent to invoking computeCurrentVelocity(int, float) with a maximum velocity of Float.MAX_VALUE."
android.view.VelocityTracker,"void computeCurrentVelocity(int units, float maxVelocity)", Compute the current velocity based on the points that have been collected.
android.view.VelocityTracker,float getXVelocity(int id), Retrieve the last computed X velocity.
android.view.VelocityTracker,float getXVelocity(), Retrieve the last computed X velocity.
android.view.VelocityTracker,float getYVelocity(), Retrieve the last computed Y velocity.
android.view.VelocityTracker,float getYVelocity(int id), Retrieve the last computed Y velocity.
android.view.VelocityTracker,static VelocityTracker obtain(), Retrieve a new VelocityTracker object to watch the velocity of a motion.
android.view.VelocityTracker,void recycle(), Return a VelocityTracker object back to be re-used by others.
android.view.View.AccessibilityDelegate,"void addExtraDataToAccessibilityNodeInfo(View host, AccessibilityNodeInfo info, String extraDataKey, Bundle arguments)", Adds extra data to an AccessibilityNodeInfo based on an explicit request for the additional data.
android.view.View.AccessibilityDelegate,"boolean dispatchPopulateAccessibilityEvent(View host, AccessibilityEvent event)", Dispatches an AccessibilityEvent to the host View first and then to its children for adding their text content to the event.
android.view.View.AccessibilityDelegate,AccessibilityNodeProvider getAccessibilityNodeProvider(View host), Gets the provider for managing a virtual view hierarchy rooted at this View and reported to AccessibilityServices that explore the window content.
android.view.View.AccessibilityDelegate,"void onInitializeAccessibilityEvent(View host, AccessibilityEvent event)", Initializes an AccessibilityEvent with information about the the host View which is the event source.
android.view.View.AccessibilityDelegate,"void onInitializeAccessibilityNodeInfo(View host, AccessibilityNodeInfo info)", Initializes an AccessibilityNodeInfo with information about the host view.
android.view.View.AccessibilityDelegate,"void onPopulateAccessibilityEvent(View host, AccessibilityEvent event)", Gives a chance to the host View to populate the accessibility event with its text content.
android.view.View.AccessibilityDelegate,"boolean onRequestSendAccessibilityEvent(ViewGroup host, View child, AccessibilityEvent event)", Called when a child of the host View has requested sending an AccessibilityEvent and gives an opportunity to the parent (the host) to augment the event.
android.view.View.AccessibilityDelegate,"boolean performAccessibilityAction(View host, int action, Bundle args)", Performs the specified accessibility action on the view.
android.view.View.AccessibilityDelegate,"void sendAccessibilityEvent(View host, int eventType)", Sends an accessibility event of the given type.
android.view.View.AccessibilityDelegate,"void sendAccessibilityEventUnchecked(View host, AccessibilityEvent event)", Sends an accessibility event.
android.view.View.BaseSavedState,"void writeToParcel(Parcel out, int flags)", Flatten this object in to a Parcel.
android.view.View.DragShadowBuilder,final View getView(), Returns the View object that had been passed to the View.DragShadowBuilder(View) constructor.
android.view.View.DragShadowBuilder,void onDrawShadow(Canvas canvas), Draws the shadow image.
android.view.View.DragShadowBuilder,"void onProvideShadowMetrics(Point outShadowSize, Point outShadowTouchPoint)", Provides the metrics for the shadow image.
android.view.View.MeasureSpec,static int getMode(int measureSpec), Extracts the mode from the supplied measure specification.
android.view.View.MeasureSpec,static int getSize(int measureSpec), Extracts the size from the supplied measure specification.
android.view.View.MeasureSpec,"static int makeMeasureSpec(int size, int mode)", Creates a measure specification based on the supplied size and mode.
android.view.View.MeasureSpec,static String toString(int measureSpec), Returns a String representation of the specified measure specification.
android.view.View.OnApplyWindowInsetsListener,"abstract WindowInsets onApplyWindowInsets(View v, WindowInsets insets)"," When set on a View, this listener method will be called instead of the view's own onApplyWindowInsets method."
android.view.View.OnAttachStateChangeListener,abstract void onViewAttachedToWindow(View v), Called when the view is attached to a window.
android.view.View.OnAttachStateChangeListener,abstract void onViewDetachedFromWindow(View v), Called when the view is detached from a window.
android.view.View.OnCapturedPointerListener,"abstract boolean onCapturedPointer(View view, MotionEvent event)", Called when a captured pointer event is dispatched to a view.
android.view.View.OnClickListener,abstract void onClick(View v), Called when a view has been clicked.
android.view.View.OnContextClickListener,abstract boolean onContextClick(View v), Called when a view is context clicked.
android.view.View.OnCreateContextMenuListener,"abstract void onCreateContextMenu(ContextMenu menu, View v, ContextMenu.ContextMenuInfo menuInfo)", Called when the context menu for this view is being built.
android.view.View.OnDragListener,"abstract boolean onDrag(View v, DragEvent event)", Called when a drag event is dispatched to a view.
android.view.View.OnFocusChangeListener,"abstract void onFocusChange(View v, boolean hasFocus)", Called when the focus state of a view has changed.
android.view.View.OnGenericMotionListener,"abstract boolean onGenericMotion(View v, MotionEvent event)", Called when a generic motion event is dispatched to a view.
android.view.View.OnHoverListener,"abstract boolean onHover(View v, MotionEvent event)", Called when a hover event is dispatched to a view.
android.view.View.OnKeyFallbackListener,"abstract boolean onKeyFallback(View v, KeyEvent event)", Called when a hardware key is dispatched to a view in the fallback phase.
android.view.View.OnKeyListener,"abstract boolean onKey(View v, int keyCode, KeyEvent event)", Called when a hardware key is dispatched to a view.
android.view.View.OnLayoutChangeListener,"abstract void onLayoutChange(View v, int left, int top, int right, int bottom, int oldLeft, int oldTop, int oldRight, int oldBottom)", Called when the layout bounds of a view changes due to layout processing.
android.view.View.OnLongClickListener,abstract boolean onLongClick(View v), Called when a view has been clicked and held.
android.view.View.OnScrollChangeListener,"abstract void onScrollChange(View v, int scrollX, int scrollY, int oldScrollX, int oldScrollY)", Called when the scroll position of a view changes.
android.view.View.OnSystemUiVisibilityChangeListener,abstract void onSystemUiVisibilityChange(int visibility), Called when the status bar changes visibility because of a call to setSystemUiVisibility(int).
android.view.View.OnTouchListener,"abstract boolean onTouch(View v, MotionEvent event)", Called when a touch event is dispatched to a view.
android.view.View,void addChildrenForAccessibility(ArrayList<View> outChildren), Adds the children of this View relevant for accessibility to the given list as output.
android.view.View,"void addExtraDataToAccessibilityNodeInfo(AccessibilityNodeInfo info, String extraDataKey, Bundle arguments)", Adds extra data to an AccessibilityNodeInfo based on an explicit request for the additional data.
android.view.View,"void addFocusables(ArrayList<View> views, int direction)", Add any focusable views that are descendants of this view (possibly including this view if it is focusable itself) to views.
android.view.View,"void addFocusables(ArrayList<View> views, int direction, int focusableMode)", Adds any focusable views that are descendants of this view (possibly including this view if it is focusable itself) to views.
android.view.View,void addKeyFallbackListener(View.OnKeyFallbackListener listener), Adds a listener which will receive unhandled KeyEvents.
android.view.View,"void addKeyboardNavigationClusters(Collection<View> views, int direction)", Adds any keyboard navigation cluster roots that are descendants of this view (possibly including this view if it is a cluster root itself) to views.
android.view.View,void addOnAttachStateChangeListener(View.OnAttachStateChangeListener listener), Add a listener for attach state changes.
android.view.View,void addOnLayoutChangeListener(View.OnLayoutChangeListener listener), Add a listener that will be called when the bounds of the view change due to layout processing.
android.view.View,void addTouchables(ArrayList<View> views), Add any touchable views that are descendants of this view (possibly including this view if it is touchable itself) to views.
android.view.View,ViewPropertyAnimator animate()," This method returns a ViewPropertyAnimator object, which can be used to animate specific properties on this View."
android.view.View,void announceForAccessibility(CharSequence text), Convenience method for sending a TYPE_ANNOUNCEMENT AccessibilityEvent to make an announcement which is related to some sort of a context change for which none of the events representing UI transitions is a good fit.
android.view.View,void autofill(AutofillValue value), Automatically fills the content of this view with the value.
android.view.View,void autofill(SparseArray<AutofillValue> values), Automatically fills the content of the virtual children within this view.
android.view.View,void bringToFront()," Change the view's z order in the tree, so it's on top of other sibling views."
android.view.View,void buildDrawingCache(boolean autoScale)," This method was deprecated in API level P. The view drawing cache was largely made obsolete with the introduction of hardware-accelerated rendering in API 11. With hardware-acceleration, intermediate cache layers are largely unnecessary and can easily result in a net loss in performance due to the cost of creating and updating the layer. In the rare cases where caching layers are useful, such as for alpha animations, setLayerType(int, Paint) handles this with hardware rendering. For software-rendered snapshots of a small part of the View hierarchy or individual Views it is recommended to create a Canvas from either a Bitmap or Picture and call draw(Canvas) on the View. However these software-rendered usages are discouraged and have compatibility issues with hardware-only rendering features such as Config.HARDWARE bitmaps, real-time shadows, and outline clipping. For screenshots of the UI for feedback reports or unit testing the PixelCopy API is recommended."
android.view.View,void buildDrawingCache()," This method was deprecated in API level P. The view drawing cache was largely made obsolete with the introduction of hardware-accelerated rendering in API 11. With hardware-acceleration, intermediate cache layers are largely unnecessary and can easily result in a net loss in performance due to the cost of creating and updating the layer. In the rare cases where caching layers are useful, such as for alpha animations, setLayerType(int, Paint) handles this with hardware rendering. For software-rendered snapshots of a small part of the View hierarchy or individual Views it is recommended to create a Canvas from either a Bitmap or Picture and call draw(Canvas) on the View. However these software-rendered usages are discouraged and have compatibility issues with hardware-only rendering features such as Config.HARDWARE bitmaps, real-time shadows, and outline clipping. For screenshots of the UI for feedback reports or unit testing the PixelCopy API is recommended."
android.view.View,void buildLayer(), Forces this view's layer to be created and this view to be rendered into its layer.
android.view.View,boolean callOnClick(), Directly call any attached OnClickListener.
android.view.View,boolean canResolveLayoutDirection(), Check if layout direction resolution can be done.
android.view.View,boolean canResolveTextAlignment(), Check if text alignment resolution can be done.
android.view.View,boolean canResolveTextDirection(), Check if text direction resolution can be done.
android.view.View,boolean canScrollHorizontally(int direction), Check if this view can be scrolled horizontally in a certain direction.
android.view.View,boolean canScrollVertically(int direction), Check if this view can be scrolled vertically in a certain direction.
android.view.View,final void cancelDragAndDrop(), Cancels an ongoing drag and drop operation.
android.view.View,void cancelLongPress(), Cancels a pending long press.
android.view.View,final void cancelPendingInputEvents(), Cancel any deferred high-level input events that were previously posted to the event queue.
android.view.View,boolean checkInputConnectionProxy(View view), Called by the InputMethodManager when a view who is not the current input connection target is trying to make a call on the manager.
android.view.View,void clearAnimation(), Cancels any animations for this view.
android.view.View,void clearFocus(), Called when this view wants to give up focus.
android.view.View,"static int combineMeasuredStates(int curState, int newState)", Merge two states as returned by getMeasuredState().
android.view.View,void computeScroll(), Called by a parent to request that a child update its values for mScrollX and mScrollY if necessary.
android.view.View,"WindowInsets computeSystemWindowInsets(WindowInsets in, Rect outLocalInsets)", Compute insets that should be consumed by this view and the ones that should propagate to those under it.
android.view.View,AccessibilityNodeInfo createAccessibilityNodeInfo(), Returns an AccessibilityNodeInfo representing this view from the point of view of an AccessibilityService.
android.view.View,void createContextMenu(ContextMenu menu), Show the context menu for this view.
android.view.View,void destroyDrawingCache()," This method was deprecated in API level P. The view drawing cache was largely made obsolete with the introduction of hardware-accelerated rendering in API 11. With hardware-acceleration, intermediate cache layers are largely unnecessary and can easily result in a net loss in performance due to the cost of creating and updating the layer. In the rare cases where caching layers are useful, such as for alpha animations, setLayerType(int, Paint) handles this with hardware rendering. For software-rendered snapshots of a small part of the View hierarchy or individual Views it is recommended to create a Canvas from either a Bitmap or Picture and call draw(Canvas) on the View. However these software-rendered usages are discouraged and have compatibility issues with hardware-only rendering features such as Config.HARDWARE bitmaps, real-time shadows, and outline clipping. For screenshots of the UI for feedback reports or unit testing the PixelCopy API is recommended."
android.view.View,WindowInsets dispatchApplyWindowInsets(WindowInsets insets), Request to apply the given window insets to this view or another view in its subtree.
android.view.View,boolean dispatchCapturedPointerEvent(MotionEvent event), Pass a captured pointer event down to the focused view.
android.view.View,void dispatchConfigurationChanged(Configuration newConfig), Dispatch a notification about a resource configuration change down the view hierarchy.
android.view.View,void dispatchDisplayHint(int hint), Dispatch a hint about whether this view is displayed.
android.view.View,boolean dispatchDragEvent(DragEvent event), Detects if this View is enabled and has a drag event listener.
android.view.View,"void dispatchDrawableHotspotChanged(float x, float y)", Dispatches drawableHotspotChanged to all of this View's children.
android.view.View,void dispatchFinishTemporaryDetach(), Dispatch onFinishTemporaryDetach() to this View and its direct children if this is a container View.
android.view.View,boolean dispatchGenericMotionEvent(MotionEvent event), Dispatch a generic motion event.
android.view.View,boolean dispatchKeyEvent(KeyEvent event), Dispatch a key event to the next view on the focus path.
android.view.View,boolean dispatchKeyEventPreIme(KeyEvent event), Dispatch a key event before it is processed by any input method associated with the view hierarchy.
android.view.View,boolean dispatchKeyShortcutEvent(KeyEvent event), Dispatches a key shortcut event.
android.view.View,"boolean dispatchNestedFling(float velocityX, float velocityY, boolean consumed)", Dispatch a fling to a nested scrolling parent.
android.view.View,"boolean dispatchNestedPreFling(float velocityX, float velocityY)", Dispatch a fling to a nested scrolling parent before it is processed by this view.
android.view.View,"boolean dispatchNestedPrePerformAccessibilityAction(int action, Bundle arguments)", Report an accessibility action to this view's parents for delegated processing.
android.view.View,"boolean dispatchNestedPreScroll(int dx, int dy, int[] consumed, int[] offsetInWindow)", Dispatch one step of a nested scroll in progress before this view consumes any portion of it.
android.view.View,"boolean dispatchNestedScroll(int dxConsumed, int dyConsumed, int dxUnconsumed, int dyUnconsumed, int[] offsetInWindow)", Dispatch one step of a nested scroll in progress.
android.view.View,void dispatchPointerCaptureChanged(boolean hasCapture),
android.view.View,boolean dispatchPopulateAccessibilityEvent(AccessibilityEvent event), Dispatches an AccessibilityEvent to the View first and then to its children for adding their text content to the event.
android.view.View,"void dispatchProvideAutofillStructure(ViewStructure structure, int flags)"," Dispatches creation of a ViewStructures for autofill purposes down the hierarchy, when an Assist structure is being created as part of an autofill request."
android.view.View,void dispatchProvideStructure(ViewStructure structure), Dispatch creation of ViewStructure down the hierarchy.
android.view.View,void dispatchStartTemporaryDetach(), Dispatch onStartTemporaryDetach() to this View and its direct children if this is a container View.
android.view.View,void dispatchSystemUiVisibilityChanged(int visibility), Dispatch callbacks to setOnSystemUiVisibilityChangeListener(View.OnSystemUiVisibilityChangeListener) down the view hierarchy.
android.view.View,boolean dispatchTouchEvent(MotionEvent event)," Pass the touch screen motion event down to the target view, or this view if it is the target."
android.view.View,boolean dispatchTrackballEvent(MotionEvent event), Pass a trackball motion event down to the focused view.
android.view.View,"boolean dispatchUnhandledMove(View focused, int direction)", This method is the last chance for the focused view and its ancestors to respond to an arrow key.
android.view.View,void dispatchWindowFocusChanged(boolean hasFocus), Called when the window containing this view gains or loses window focus.
android.view.View,void dispatchWindowSystemUiVisiblityChanged(int visible), Dispatch callbacks to onWindowSystemUiVisibilityChanged(int) down the view hierarchy.
android.view.View,void dispatchWindowVisibilityChanged(int visibility), Dispatch a window visibility change down the view hierarchy.
android.view.View,void draw(Canvas canvas), Manually render this view (and all of its children) to the given Canvas.
android.view.View,"void drawableHotspotChanged(float x, float y)", This function is called whenever the view hotspot changes and needs to be propagated to drawables or child views managed by the view.
android.view.View,View findFocus(), Find the view in the hierarchy rooted at this view that currently has focus.
android.view.View,final <TextendsView> T findViewById(int id)," Finds the first descendant view with the given ID, the view itself if the ID matches getId(), or null if the ID is invalid (< 0) or there is no matching view in the hierarchy."
android.view.View,final <TextendsView> T findViewWithTag(Object tag), Look for a child view with the given tag.
android.view.View,"void findViewsWithText(ArrayList<View> outViews, CharSequence searched, int flags)", Finds the Views that contain given text.
android.view.View,View focusSearch(int direction), Find the nearest view in the specified direction that can take focus.
android.view.View,void forceHasOverlappingRendering(boolean hasOverlappingRendering), Sets the behavior for overlapping rendering for this view (see hasOverlappingRendering() for more details on this behavior).
android.view.View,void forceLayout(), Forces this view to be laid out during the next layout pass.
android.view.View,static int generateViewId(), Generate a value suitable for use in setId(int).
android.view.View,CharSequence getAccessibilityClassName(), Return the class name of this object to be used for accessibility purposes.
android.view.View,int getAccessibilityLiveRegion(), Gets the live region mode for this View.
android.view.View,AccessibilityNodeProvider getAccessibilityNodeProvider(), Gets the provider for managing a virtual view hierarchy rooted at this View and reported to AccessibilityServices that explore the window content.
android.view.View,CharSequence getAccessibilityPaneTitle(), Get the title of the pane for purposes of accessibility.
android.view.View,int getAccessibilityTraversalAfter(), Gets the id of a view after which this one is visited in accessibility traversal.
android.view.View,int getAccessibilityTraversalBefore(), Gets the id of a view before which this one is visited in accessibility traversal.
android.view.View,float getAlpha(), The opacity of the view.
android.view.View,Animation getAnimation(), Get the animation currently associated with this view.
android.view.View,IBinder getApplicationWindowToken()," Retrieve a unique token identifying the top-level ""real"" window of the window that this view is attached to."
android.view.View,String[] getAutofillHints(), Gets the hints that help an AutofillService determine how to autofill the view with the user's data.
android.view.View,final AutofillId getAutofillId()," Gets the unique identifier of this view in the screen, for autofill purposes."
android.view.View,int getAutofillType()," Describes the autofill type of this view, so an AutofillService can create the proper AutofillValue when autofilling the view."
android.view.View,AutofillValue getAutofillValue(), Gets the View's current autofill value.
android.view.View,Drawable getBackground(), Gets the background drawable
android.view.View,ColorStateList getBackgroundTintList()," Return the tint applied to the background drawable, if specified."
android.view.View,PorterDuff.Mode getBackgroundTintMode()," Return the blending mode used to apply the tint to the background drawable, if specified."
android.view.View,int getBaseline(), Return the offset of the widget's text baseline from the widget's top boundary.
android.view.View,final int getBottom(), Bottom position of this view relative to its parent.
android.view.View,float getCameraDistance(), Gets the distance along the Z axis from the camera to this view.
android.view.View,boolean getClipBounds(Rect outRect)," Populates an output rectangle with the clip bounds of the view, returning true if successful or false if the view's clip bounds are null."
android.view.View,Rect getClipBounds(), Returns a copy of the current clipBounds.
android.view.View,final boolean getClipToOutline(), Returns whether the Outline should be used to clip the contents of the View.
android.view.View,CharSequence getContentDescription(), Returns the View's content description.
android.view.View,final Context getContext()," Returns the context the view is running in, through which it can access the current theme, resources, etc."
android.view.View,final boolean getDefaultFocusHighlightEnabled(), /** Returns whether this View should use a default focus highlight when it gets focused but doesn't have state_focused defined in its background.
android.view.View,"static int getDefaultSize(int size, int measureSpec)", Utility to return a default size.
android.view.View,Display getDisplay(), Gets the logical display to which the view's window has been attached.
android.view.View,final int[] getDrawableState(), Return an array of resource IDs of the drawable states representing the current state of the view.
android.view.View,Bitmap getDrawingCache()," This method was deprecated in API level P. The view drawing cache was largely made obsolete with the introduction of hardware-accelerated rendering in API 11. With hardware-acceleration, intermediate cache layers are largely unnecessary and can easily result in a net loss in performance due to the cost of creating and updating the layer. In the rare cases where caching layers are useful, such as for alpha animations, setLayerType(int, Paint) handles this with hardware rendering. For software-rendered snapshots of a small part of the View hierarchy or individual Views it is recommended to create a Canvas from either a Bitmap or Picture and call draw(Canvas) on the View. However these software-rendered usages are discouraged and have compatibility issues with hardware-only rendering features such as Config.HARDWARE bitmaps, real-time shadows, and outline clipping. For screenshots of the UI for feedback reports or unit testing the PixelCopy API is recommended."
android.view.View,Bitmap getDrawingCache(boolean autoScale)," This method was deprecated in API level P. The view drawing cache was largely made obsolete with the introduction of hardware-accelerated rendering in API 11. With hardware-acceleration, intermediate cache layers are largely unnecessary and can easily result in a net loss in performance due to the cost of creating and updating the layer. In the rare cases where caching layers are useful, such as for alpha animations, setLayerType(int, Paint) handles this with hardware rendering. For software-rendered snapshots of a small part of the View hierarchy or individual Views it is recommended to create a Canvas from either a Bitmap or Picture and call draw(Canvas) on the View. However these software-rendered usages are discouraged and have compatibility issues with hardware-only rendering features such as Config.HARDWARE bitmaps, real-time shadows, and outline clipping. For screenshots of the UI for feedback reports or unit testing the PixelCopy API is recommended."
android.view.View,int getDrawingCacheBackgroundColor()," This method was deprecated in API level P. The view drawing cache was largely made obsolete with the introduction of hardware-accelerated rendering in API 11. With hardware-acceleration, intermediate cache layers are largely unnecessary and can easily result in a net loss in performance due to the cost of creating and updating the layer. In the rare cases where caching layers are useful, such as for alpha animations, setLayerType(int, Paint) handles this with hardware rendering. For software-rendered snapshots of a small part of the View hierarchy or individual Views it is recommended to create a Canvas from either a Bitmap or Picture and call draw(Canvas) on the View. However these software-rendered usages are discouraged and have compatibility issues with hardware-only rendering features such as Config.HARDWARE bitmaps, real-time shadows, and outline clipping. For screenshots of the UI for feedback reports or unit testing the PixelCopy API is recommended."
android.view.View,int getDrawingCacheQuality()," This method was deprecated in API level P. The view drawing cache was largely made obsolete with the introduction of hardware-accelerated rendering in API 11. With hardware-acceleration, intermediate cache layers are largely unnecessary and can easily result in a net loss in performance due to the cost of creating and updating the layer. In the rare cases where caching layers are useful, such as for alpha animations, setLayerType(int, Paint) handles this with hardware rendering. For software-rendered snapshots of a small part of the View hierarchy or individual Views it is recommended to create a Canvas from either a Bitmap or Picture and call draw(Canvas) on the View. However these software-rendered usages are discouraged and have compatibility issues with hardware-only rendering features such as Config.HARDWARE bitmaps, real-time shadows, and outline clipping. For screenshots of the UI for feedback reports or unit testing the PixelCopy API is recommended."
android.view.View,void getDrawingRect(Rect outRect), Return the visible drawing bounds of your view.
android.view.View,long getDrawingTime(), Return the time at which the drawing of the view hierarchy started.
android.view.View,float getElevation()," The base elevation of this view relative to its parent, in pixels."
android.view.View,boolean getFilterTouchesWhenObscured(), Gets whether the framework should discard touches when the view's window is obscured by another visible window.
android.view.View,boolean getFitsSystemWindows(), Check for state of setFitsSystemWindows(boolean).
android.view.View,int getFocusable(), Returns the focusable setting for this view.
android.view.View,ArrayList<View> getFocusables(int direction)," Find and return all focusable views that are descendants of this view, possibly including this view if it is focusable itself."
android.view.View,void getFocusedRect(Rect r)," When a view has focus and the user navigates away from it, the next view is searched for starting from the rectangle filled in by this method."
android.view.View,Drawable getForeground(), Returns the drawable used as the foreground of this View.
android.view.View,int getForegroundGravity(), Describes how the foreground is positioned.
android.view.View,ColorStateList getForegroundTintList()," Return the tint applied to the foreground drawable, if specified."
android.view.View,PorterDuff.Mode getForegroundTintMode()," Return the blending mode used to apply the tint to the foreground drawable, if specified."
android.view.View,final boolean getGlobalVisibleRect(Rect r),
android.view.View,"boolean getGlobalVisibleRect(Rect r, Point globalOffset)"," If some part of this view is not clipped by any of its parents, then return that area in r in global (root) coordinates."
android.view.View,Handler getHandler(),
android.view.View,final boolean getHasOverlappingRendering(), Returns the value for overlapping rendering that is used internally.
android.view.View,final int getHeight(), Return the height of your view.
android.view.View,void getHitRect(Rect outRect), Hit rectangle in parent's coordinates
android.view.View,int getHorizontalFadingEdgeLength(), Returns the size of the horizontal faded edges used to indicate that more content in this view is visible.
android.view.View,int getId(), Returns this view's identifier.
android.view.View,int getImportantForAccessibility(), Gets the mode for determining whether this View is important for accessibility.
android.view.View,int getImportantForAutofill(), Gets the mode for determining whether this view is important for autofill.
android.view.View,boolean getKeepScreenOn()," Returns whether the screen should remain on, corresponding to the current value of KEEP_SCREEN_ON."
android.view.View,KeyEvent.DispatcherState getKeyDispatcherState(), Return the global KeyEvent.DispatcherState for this view's window.
android.view.View,int getLabelFor(), Gets the id of a view for which this view serves as a label for accessibility purposes.
android.view.View,int getLayerType(), Indicates what type of layer is currently associated with this view.
android.view.View,int getLayoutDirection(), Returns the resolved layout direction for this view.
android.view.View,ViewGroup.LayoutParams getLayoutParams(), Get the LayoutParams associated with this view.
android.view.View,final int getLeft(), Left position of this view relative to its parent.
android.view.View,final boolean getLocalVisibleRect(Rect r),
android.view.View,void getLocationInWindow(int[] outLocation), Computes the coordinates of this view in its window.
android.view.View,void getLocationOnScreen(int[] outLocation), Computes the coordinates of this view on the screen.
android.view.View,Matrix getMatrix()," The transform matrix of this view, which is calculated based on the current rotation, scale, and pivot properties."
android.view.View,final int getMeasuredHeight()," Like getMeasuredHeightAndState(), but only returns the raw height component (that is the result is masked by MEASURED_SIZE_MASK)."
android.view.View,final int getMeasuredHeightAndState()," Return the full height measurement information for this view as computed by the most recent call to measure(int, int)."
android.view.View,final int getMeasuredState()," Return only the state bits of getMeasuredWidthAndState() and getMeasuredHeightAndState(), combined into one integer."
android.view.View,final int getMeasuredWidth()," Like getMeasuredWidthAndState(), but only returns the raw width component (that is the result is masked by MEASURED_SIZE_MASK)."
android.view.View,final int getMeasuredWidthAndState()," Return the full width measurement information for this view as computed by the most recent call to measure(int, int)."
android.view.View,int getMinimumHeight(), Returns the minimum height of the view.
android.view.View,int getMinimumWidth(), Returns the minimum width of the view.
android.view.View,int getNextClusterForwardId(), Gets the id of the root of the next keyboard navigation cluster.
android.view.View,int getNextFocusDownId(), Gets the id of the view to use when the next focus is FOCUS_DOWN.
android.view.View,int getNextFocusForwardId(), Gets the id of the view to use when the next focus is FOCUS_FORWARD.
android.view.View,int getNextFocusLeftId(), Gets the id of the view to use when the next focus is FOCUS_LEFT.
android.view.View,int getNextFocusRightId(), Gets the id of the view to use when the next focus is FOCUS_RIGHT.
android.view.View,int getNextFocusUpId(), Gets the id of the view to use when the next focus is FOCUS_UP.
android.view.View,View.OnFocusChangeListener getOnFocusChangeListener(), Returns the focus-change callback registered for this view.
android.view.View,int getOutlineAmbientShadowColor(),
android.view.View,ViewOutlineProvider getOutlineProvider()," Returns the current ViewOutlineProvider of the view, which generates the Outline that defines the shape of the shadow it casts, and enables outline clipping."
android.view.View,int getOutlineSpotShadowColor(),
android.view.View,int getOverScrollMode(), Returns the over-scroll mode for this view.
android.view.View,ViewOverlay getOverlay()," Returns the overlay for this view, creating it if it does not yet exist."
android.view.View,int getPaddingBottom(), Returns the bottom padding of this view.
android.view.View,int getPaddingEnd(), Returns the end padding of this view depending on its resolved layout direction.
android.view.View,int getPaddingLeft(), Returns the left padding of this view.
android.view.View,int getPaddingRight(), Returns the right padding of this view.
android.view.View,int getPaddingStart(), Returns the start padding of this view depending on its resolved layout direction.
android.view.View,int getPaddingTop(), Returns the top padding of this view.
android.view.View,final ViewParent getParent(), Gets the parent of this view.
android.view.View,ViewParent getParentForAccessibility(), Gets the parent for accessibility purposes.
android.view.View,float getPivotX(), The x location of the point around which the view is rotated and scaled.
android.view.View,float getPivotY(), The y location of the point around which the view is rotated and scaled.
android.view.View,PointerIcon getPointerIcon(), Gets the pointer icon for the current view.
android.view.View,Resources getResources(), Returns the resources associated with this view.
android.view.View,final boolean getRevealOnFocusHint(), Returns this view's preference for reveal behavior when it gains focus.
android.view.View,final int getRight(), Right position of this view relative to its parent.
android.view.View,View getRootView(), Finds the topmost view in the current view hierarchy.
android.view.View,WindowInsets getRootWindowInsets(), Provide original WindowInsets that are dispatched to the view hierarchy.
android.view.View,float getRotation(), The degrees that the view is rotated around the pivot point.
android.view.View,float getRotationX(), The degrees that the view is rotated around the horizontal axis through the pivot point.
android.view.View,float getRotationY(), The degrees that the view is rotated around the vertical axis through the pivot point.
android.view.View,float getScaleX()," The amount that the view is scaled in x around the pivot point, as a proportion of the view's unscaled width."
android.view.View,float getScaleY()," The amount that the view is scaled in y around the pivot point, as a proportion of the view's unscaled height."
android.view.View,int getScrollBarDefaultDelayBeforeFade(), Returns the delay before scrollbars fade.
android.view.View,int getScrollBarFadeDuration(), Returns the scrollbar fade duration.
android.view.View,int getScrollBarSize(), Returns the scrollbar size.
android.view.View,int getScrollBarStyle(), Returns the current scrollbar style.
android.view.View,int getScrollIndicators(), Returns a bitmask representing the enabled scroll indicators.
android.view.View,final int getScrollX(), Return the scrolled left position of this view.
android.view.View,final int getScrollY(), Return the scrolled top position of this view.
android.view.View,int getSolidColor()," Override this if your view is known to always be drawn on top of a solid color background, and needs to draw fading edges."
android.view.View,StateListAnimator getStateListAnimator(), Returns the current StateListAnimator if exists.
android.view.View,int getSystemUiVisibility(), Returns the last setSystemUiVisibility(int) that this view has requested.
android.view.View,Object getTag(), Returns this view's tag.
android.view.View,Object getTag(int key), Returns the tag associated with this view and the specified key.
android.view.View,int getTextAlignment(), Return the resolved text alignment.
android.view.View,int getTextDirection(), Return the resolved text direction.
android.view.View,CharSequence getTooltipText(), Returns the view's tooltip text.
android.view.View,final int getTop(), Top position of this view relative to its parent.
android.view.View,TouchDelegate getTouchDelegate(), Gets the TouchDelegate for this View.
android.view.View,ArrayList<View> getTouchables()," Find and return all touchable views that are descendants of this view, possibly including this view if it is touchable itself."
android.view.View,String getTransitionName(), Returns the name of the View to be used to identify Views in Transitions.
android.view.View,float getTranslationX(), The horizontal location of this view relative to its left position.
android.view.View,float getTranslationY(), The vertical location of this view relative to its top position.
android.view.View,float getTranslationZ(), The depth location of this view relative to its elevation.
android.view.View,int getVerticalFadingEdgeLength(), Returns the size of the vertical faded edges used to indicate that more content in this view is visible.
android.view.View,int getVerticalScrollbarPosition(),
android.view.View,int getVerticalScrollbarWidth(), Returns the width of the vertical scrollbar.
android.view.View,ViewTreeObserver getViewTreeObserver(), Returns the ViewTreeObserver for this view's hierarchy.
android.view.View,int getVisibility(), Returns the visibility status for this view.
android.view.View,final int getWidth(), Return the width of the your view.
android.view.View,WindowId getWindowId(), Retrieve the WindowId for the window this view is currently attached to.
android.view.View,int getWindowSystemUiVisibility(), Returns the current system UI visibility that is currently set for the entire window.
android.view.View,IBinder getWindowToken(), Retrieve a unique token identifying the window this view is attached to.
android.view.View,int getWindowVisibility()," Returns the current visibility of the window this view is attached to (either GONE, INVISIBLE, or VISIBLE)."
android.view.View,void getWindowVisibleDisplayFrame(Rect outRect), Retrieve the overall visible display size in which the window this view is attached to has been positioned in.
android.view.View,float getX()," The visual x position of this view, in pixels."
android.view.View,float getY()," The visual y position of this view, in pixels."
android.view.View,float getZ()," The visual z position of this view, in pixels."
android.view.View,boolean hasExplicitFocusable(), Returns true if this view is focusable or if it contains a reachable View for which hasExplicitFocusable() returns true.
android.view.View,boolean hasFocus()," Returns true if this view has focus itself, or is the ancestor of the view that has focus."
android.view.View,boolean hasFocusable(), Returns true if this view is focusable or if it contains a reachable View for which hasFocusable() returns true.
android.view.View,boolean hasNestedScrollingParent(), Returns true if this view has a nested scrolling parent.
android.view.View,boolean hasOnClickListeners(), Return whether this view has an attached OnClickListener.
android.view.View,boolean hasOverlappingRendering(), Returns whether this View has content which overlaps.
android.view.View,boolean hasPointerCapture(), Checks pointer capture status.
android.view.View,boolean hasTransientState()," Indicates whether the view is currently tracking transient state that the app should not need to concern itself with saving and restoring, but that the framework should take special note to preserve when possible."
android.view.View,boolean hasWindowFocus(), Returns true if this view is in a window that currently has window focus.
android.view.View,"static View inflate(Context context, int resource, ViewGroup root)", Inflate a view from an XML resource.
android.view.View,void invalidate(), Invalidate the whole view.
android.view.View,void invalidate(Rect dirty)," This method was deprecated in API level P. The switch to hardware accelerated rendering in API 14 reduced the importance of the dirty rectangle. In API 21 the given rectangle is ignored entirely in favor of an internally-calculated area instead. Because of this, clients are encouraged to just call invalidate()."
android.view.View,"void invalidate(int l, int t, int r, int b)"," This method was deprecated in API level P. The switch to hardware accelerated rendering in API 14 reduced the importance of the dirty rectangle. In API 21 the given rectangle is ignored entirely in favor of an internally-calculated area instead. Because of this, clients are encouraged to just call invalidate()."
android.view.View,void invalidateDrawable(Drawable drawable), Invalidates the specified Drawable.
android.view.View,void invalidateOutline(), Called to rebuild this View's Outline from its outline provider
android.view.View,boolean isAccessibilityFocused(), Returns whether this View is accessibility focused.
android.view.View,boolean isActivated(), Indicates the activation state of this view.
android.view.View,boolean isAttachedToWindow(), Returns true if this view is currently attached to a window.
android.view.View,boolean isClickable(), Indicates whether this view reacts to click events or not.
android.view.View,boolean isContextClickable(), Indicates whether this view reacts to context clicks or not.
android.view.View,boolean isDirty(), True if this view has changed since the last time being drawn.
android.view.View,boolean isDrawingCacheEnabled()," This method was deprecated in API level P. The view drawing cache was largely made obsolete with the introduction of hardware-accelerated rendering in API 11. With hardware-acceleration, intermediate cache layers are largely unnecessary and can easily result in a net loss in performance due to the cost of creating and updating the layer. In the rare cases where caching layers are useful, such as for alpha animations, setLayerType(int, Paint) handles this with hardware rendering. For software-rendered snapshots of a small part of the View hierarchy or individual Views it is recommended to create a Canvas from either a Bitmap or Picture and call draw(Canvas) on the View. However these software-rendered usages are discouraged and have compatibility issues with hardware-only rendering features such as Config.HARDWARE bitmaps, real-time shadows, and outline clipping. For screenshots of the UI for feedback reports or unit testing the PixelCopy API is recommended."
android.view.View,boolean isDuplicateParentStateEnabled(), Indicates whether this duplicates its drawable state from its parent.
android.view.View,boolean isEnabled(), Returns the enabled status for this view.
android.view.View,final boolean isFocusable(), Returns whether this View is currently able to take focus.
android.view.View,final boolean isFocusableInTouchMode()," When a view is focusable, it may not want to take focus when in touch mode."
android.view.View,boolean isFocused(), Returns true if this view has focus
android.view.View,final boolean isFocusedByDefault(), Returns whether this View should receive focus when the focus is restored for the view hierarchy containing this view.
android.view.View,boolean isHapticFeedbackEnabled(),
android.view.View,boolean isHardwareAccelerated(), Indicates whether this view is attached to a hardware accelerated window or not.
android.view.View,boolean isHorizontalFadingEdgeEnabled(), Indicate whether the horizontal edges are faded when the view is scrolled horizontally.
android.view.View,boolean isHorizontalScrollBarEnabled(), Indicate whether the horizontal scrollbar should be drawn or not.
android.view.View,boolean isHovered(), Returns true if the view is currently hovered.
android.view.View,boolean isImportantForAccessibility(), Computes whether this view should be exposed for accessibility.
android.view.View,final boolean isImportantForAutofill(), Hints the Android System whether the AssistStructure.ViewNode associated with this view is considered important for autofill purposes.
android.view.View,boolean isInEditMode(), Indicates whether this View is currently in edit mode.
android.view.View,boolean isInLayout(), Returns whether the view hierarchy is currently undergoing a layout pass.
android.view.View,boolean isInTouchMode(), Returns whether the device is currently in touch mode.
android.view.View,final boolean isKeyboardNavigationCluster(), Returns whether this View is a root of a keyboard navigation cluster.
android.view.View,boolean isLaidOut(), Returns true if this view has been through at least one layout since it was last attached to or detached from a window.
android.view.View,boolean isLayoutDirectionResolved(),
android.view.View,boolean isLayoutRequested(), Indicates whether or not this view's layout will be requested during the next hierarchy layout pass.
android.view.View,boolean isLongClickable(), Indicates whether this view reacts to long click events or not.
android.view.View,boolean isNestedScrollingEnabled(), Returns true if nested scrolling is enabled for this view.
android.view.View,boolean isOpaque(), Indicates whether this View is opaque.
android.view.View,boolean isPaddingRelative()," Return if the padding has been set through relative values setPaddingRelative(int, int, int, int) or through"
android.view.View,boolean isPressed(), Indicates whether the view is currently in pressed state.
android.view.View,boolean isSaveEnabled()," Indicates whether this view will save its state (that is, whether its onSaveInstanceState() method will be called)."
android.view.View,boolean isSaveFromParentEnabled(), Indicates whether the entire hierarchy under this view will save its state when a state saving traversal occurs from its parent.
android.view.View,boolean isScreenReaderFocusable(), Returns whether the view should be treated as a focusable unit by screen reader accessibility tools.
android.view.View,boolean isScrollContainer(), Indicates whether this view is one of the set of scrollable containers in its window.
android.view.View,boolean isScrollbarFadingEnabled(), Returns true if scrollbars will fade when this view is not scrolling
android.view.View,boolean isSelected(), Indicates the selection state of this view.
android.view.View,boolean isShown(), Returns the visibility of this view and all of its ancestors
android.view.View,boolean isSoundEffectsEnabled(),
android.view.View,final boolean isTemporarilyDetached(), Tells whether the View is in the state between onStartTemporaryDetach() and onFinishTemporaryDetach().
android.view.View,boolean isTextAlignmentResolved(),
android.view.View,boolean isTextDirectionResolved(),
android.view.View,boolean isVerticalFadingEdgeEnabled(), Indicate whether the vertical edges are faded when the view is scrolled horizontally.
android.view.View,boolean isVerticalScrollBarEnabled(), Indicate whether the vertical scrollbar should be drawn or not.
android.view.View,boolean isVisibleToUserForAutofill(int virtualId), Computes whether this virtual autofill view is visible to the user.
android.view.View,void jumpDrawablesToCurrentState(), Call Drawable.jumpToCurrentState() on all Drawable objects associated with this view.
android.view.View,"View keyboardNavigationClusterSearch(View currentCluster, int direction)", Find the nearest keyboard navigation cluster in the specified direction.
android.view.View,"void layout(int l, int t, int r, int b)", Assign a size and position to a view and all of its descendants This is the second phase of the layout mechanism.
android.view.View,"final void measure(int widthMeasureSpec, int heightMeasureSpec)", This is called to find out how big a view should be.
android.view.View,void offsetLeftAndRight(int offset), Offset this view's horizontal location by the specified amount of pixels.
android.view.View,void offsetTopAndBottom(int offset), Offset this view's vertical location by the specified number of pixels.
android.view.View,WindowInsets onApplyWindowInsets(WindowInsets insets), Called when the view should apply WindowInsets according to its internal policy.
android.view.View,void onCancelPendingInputEvents(), Called as the result of a call to cancelPendingInputEvents() on this view or a parent view.
android.view.View,boolean onCapturedPointerEvent(MotionEvent event), Implement this method to handle captured pointer events
android.view.View,boolean onCheckIsTextEditor()," Check whether the called view is a text editor, in which case it would make sense to automatically display a soft input window for it."
android.view.View,InputConnection onCreateInputConnection(EditorInfo outAttrs), Create a new InputConnection for an InputMethod to interact with the view.
android.view.View,boolean onDragEvent(DragEvent event), Handles drag events sent by the system following a call to startDragAndDrop().
android.view.View,void onDrawForeground(Canvas canvas), Draw any foreground content for this view.
android.view.View,boolean onFilterTouchEventForSecurity(MotionEvent event), Filter the touch event to apply security policies.
android.view.View,void onFinishTemporaryDetach(), Called after onStartTemporaryDetach() when the container is done changing the view.
android.view.View,boolean onGenericMotionEvent(MotionEvent event), Implement this method to handle generic motion events.
android.view.View,void onHoverChanged(boolean hovered), Implement this method to handle hover state changes.
android.view.View,boolean onHoverEvent(MotionEvent event), Implement this method to handle hover events.
android.view.View,void onInitializeAccessibilityEvent(AccessibilityEvent event), Initializes an AccessibilityEvent with information about this View which is the event source.
android.view.View,void onInitializeAccessibilityNodeInfo(AccessibilityNodeInfo info), Initializes an AccessibilityNodeInfo with information about this view.
android.view.View,"boolean onKeyDown(int keyCode, KeyEvent event)"," Default implementation of KeyEvent.Callback.onKeyDown(): perform press of the view when KEYCODE_DPAD_CENTER or KEYCODE_ENTER is released, if the view is enabled and clickable."
android.view.View,boolean onKeyFallback(KeyEvent event), Allows this view to handle KeyEvents which weren't handled by normal dispatch.
android.view.View,"boolean onKeyLongPress(int keyCode, KeyEvent event)", Default implementation of KeyEvent.Callback.onKeyLongPress(): always returns false (doesn't handle the event).
android.view.View,"boolean onKeyMultiple(int keyCode, int repeatCount, KeyEvent event)", Default implementation of KeyEvent.Callback.onKeyMultiple(): always returns false (doesn't handle the event).
android.view.View,"boolean onKeyPreIme(int keyCode, KeyEvent event)", Handle a key event before it is processed by any input method associated with the view hierarchy.
android.view.View,"boolean onKeyShortcut(int keyCode, KeyEvent event)", Called on the focused view when a key shortcut event is not handled.
android.view.View,"boolean onKeyUp(int keyCode, KeyEvent event)"," Default implementation of KeyEvent.Callback.onKeyUp(): perform clicking of the view when KEYCODE_DPAD_CENTER, KEYCODE_ENTER or KEYCODE_SPACE is released."
android.view.View,void onPointerCaptureChange(boolean hasCapture), Called when the window has just acquired or lost pointer capture.
android.view.View,void onPopulateAccessibilityEvent(AccessibilityEvent event), Called from dispatchPopulateAccessibilityEvent(AccessibilityEvent) giving a chance to this View to populate the accessibility event with its text content.
android.view.View,"void onProvideAutofillStructure(ViewStructure structure, int flags)", Populates a ViewStructure to fullfil an autofill request.
android.view.View,"void onProvideAutofillVirtualStructure(ViewStructure structure, int flags)", Populates a ViewStructure containing virtual children to fullfil an autofill request.
android.view.View,void onProvideStructure(ViewStructure structure), Called when assist structure is being retrieved from a view as part of Activity.onProvideAssistData.
android.view.View,void onProvideVirtualStructure(ViewStructure structure), Called when assist structure is being retrieved from a view as part of Activity.onProvideAssistData to generate additional virtual structure under this view.
android.view.View,"PointerIcon onResolvePointerIcon(MotionEvent event, int pointerIndex)"," Returns the pointer icon for the motion event, or null if it doesn't specify the icon."
android.view.View,void onRtlPropertiesChanged(int layoutDirection), Called when any RTL property (layout direction or text direction or text alignment) has been changed.
android.view.View,void onScreenStateChanged(int screenState), This method is called whenever the state of the screen this view is attached to changes.
android.view.View,void onStartTemporaryDetach()," This is called when a container is going to temporarily detach a child, with ViewGroup.detachViewFromParent."
android.view.View,boolean onTouchEvent(MotionEvent event), Implement this method to handle touch screen motion events.
android.view.View,boolean onTrackballEvent(MotionEvent event), Implement this method to handle trackball motion events.
android.view.View,void onVisibilityAggregated(boolean isVisible)," Called when the user-visibility of this View is potentially affected by a change to this view itself, an ancestor view or the window this view is attached to."
android.view.View,void onWindowFocusChanged(boolean hasWindowFocus), Called when the window containing this view gains or loses focus.
android.view.View,void onWindowSystemUiVisibilityChanged(int visible)," Override to find out when the window's requested system UI visibility has changed, that is the value returned by getWindowSystemUiVisibility()."
android.view.View,"boolean performAccessibilityAction(int action, Bundle arguments)", Performs the specified accessibility action on the view.
android.view.View,boolean performClick()," Call this view's OnClickListener, if it is defined."
android.view.View,"boolean performContextClick(float x, float y)"," Call this view's OnContextClickListener, if it is defined."
android.view.View,boolean performContextClick()," Call this view's OnContextClickListener, if it is defined."
android.view.View,boolean performHapticFeedback(int feedbackConstant), BZZZTT!!1! Provide haptic feedback to the user for this view.
android.view.View,"boolean performHapticFeedback(int feedbackConstant, int flags)"," BZZZTT!!1! Like performHapticFeedback(int), with additional options."
android.view.View,"boolean performLongClick(float x, float y)"," Calls this view's OnLongClickListener, if it is defined."
android.view.View,boolean performLongClick()," Calls this view's OnLongClickListener, if it is defined."
android.view.View,void playSoundEffect(int soundConstant), Play a sound effect for this view.
android.view.View,boolean post(Runnable action), Causes the Runnable to be added to the message queue.
android.view.View,"boolean postDelayed(Runnable action, long delayMillis)"," Causes the Runnable to be added to the message queue, to be run after the specified amount of time elapses."
android.view.View,void postInvalidate(), Cause an invalidate to happen on a subsequent cycle through the event loop.
android.view.View,"void postInvalidate(int left, int top, int right, int bottom)", Cause an invalidate of the specified area to happen on a subsequent cycle through the event loop.
android.view.View,"void postInvalidateDelayed(long delayMilliseconds, int left, int top, int right, int bottom)", Cause an invalidate of the specified area to happen on a subsequent cycle through the event loop.
android.view.View,void postInvalidateDelayed(long delayMilliseconds), Cause an invalidate to happen on a subsequent cycle through the event loop.
android.view.View,"void postInvalidateOnAnimation(int left, int top, int right, int bottom)"," Cause an invalidate of the specified area to happen on the next animation time step, typically the next display frame."
android.view.View,void postInvalidateOnAnimation()," Cause an invalidate to happen on the next animation time step, typically the next display frame."
android.view.View,void postOnAnimation(Runnable action), Causes the Runnable to execute on the next animation time step.
android.view.View,"void postOnAnimationDelayed(Runnable action, long delayMillis)"," Causes the Runnable to execute on the next animation time step, after the specified amount of time elapses."
android.view.View,void refreshDrawableState(), Call this to force a view to update its drawable state.
android.view.View,void releasePointerCapture(), Releases the pointer capture.
android.view.View,boolean removeCallbacks(Runnable action), Removes the specified Runnable from the message queue.
android.view.View,void removeKeyFallbackListener(View.OnKeyFallbackListener listener), Removes a listener which will receive unhandled KeyEvents.
android.view.View,void removeOnAttachStateChangeListener(View.OnAttachStateChangeListener listener), Remove a listener for attach state changes.
android.view.View,void removeOnLayoutChangeListener(View.OnLayoutChangeListener listener), Remove a listener for layout changes.
android.view.View,void requestApplyInsets(), Ask that a new dispatch of onApplyWindowInsets(WindowInsets) be performed.
android.view.View,void requestFitSystemWindows(), This method was deprecated in API level 20. Use requestApplyInsets() for newer platform versions.
android.view.View,final boolean requestFocus(int direction), Call this to try to give focus to a specific view or to one of its descendants and give it a hint about what direction focus is heading.
android.view.View,final boolean requestFocus(), Call this to try to give focus to a specific view or to one of its descendants.
android.view.View,"boolean requestFocus(int direction, Rect previouslyFocusedRect)", Call this to try to give focus to a specific view or to one of its descendants and give it hints about the direction and a specific rectangle that the focus is coming from.
android.view.View,final boolean requestFocusFromTouch(), Call this to try to give focus to a specific view or to one of its descendants.
android.view.View,void requestLayout(), Call this when something has changed which has invalidated the layout of this view.
android.view.View,void requestPointerCapture(), Requests pointer capture mode.
android.view.View,boolean requestRectangleOnScreen(Rect rectangle)," Request that a rectangle of this view be visible on the screen, scrolling if necessary just enough."
android.view.View,"boolean requestRectangleOnScreen(Rect rectangle, boolean immediate)"," Request that a rectangle of this view be visible on the screen, scrolling if necessary just enough."
android.view.View,final void requestUnbufferedDispatch(MotionEvent event), Request unbuffered dispatch of the given stream of MotionEvents to this View.
android.view.View,final <TextendsView> T requireViewById(int id)," Finds the first descendant view with the given ID, the view itself if the ID matches getId(), or throws an IllegalArgumentException if the ID is invalid or there is no matching view in the hierarchy."
android.view.View,"static int resolveSize(int size, int measureSpec)"," Version of resolveSizeAndState(int, int, int) returning only the MEASURED_SIZE_MASK bits of the result."
android.view.View,"static int resolveSizeAndState(int size, int measureSpec, int childMeasuredState)"," Utility to reconcile a desired size and state, with constraints imposed by a MeasureSpec."
android.view.View,boolean restoreDefaultFocus(), Gives focus to the default-focus view in the view hierarchy that has this view as a root.
android.view.View,void restoreHierarchyState(SparseArray<Parcelable> container), Restore this view hierarchy's frozen state from the given container.
android.view.View,void saveHierarchyState(SparseArray<Parcelable> container), Store this view hierarchy's frozen state into the given container.
android.view.View,"void scheduleDrawable(Drawable who, Runnable what, long when)", Schedules an action on a drawable to occur at a specified time.
android.view.View,"void scrollBy(int x, int y)", Move the scrolled position of your view.
android.view.View,"void scrollTo(int x, int y)", Set the scrolled position of your view.
android.view.View,void sendAccessibilityEvent(int eventType), Sends an accessibility event of the given type.
android.view.View,void sendAccessibilityEventUnchecked(AccessibilityEvent event), This method behaves exactly as sendAccessibilityEvent(int) but takes as an argument an empty AccessibilityEvent and does not perform a check whether accessibility is enabled.
android.view.View,void setAccessibilityDelegate(View.AccessibilityDelegate delegate), Sets a delegate for implementing accessibility support via composition (as opposed to inheritance).
android.view.View,void setAccessibilityLiveRegion(int mode), Sets the live region mode for this view.
android.view.View,void setAccessibilityPaneTitle(CharSequence accessibilityPaneTitle)," If this view is a visually distinct portion of a window, for example the content view of a fragment that is replaced, it is considered a pane for accessibility purposes."
android.view.View,void setAccessibilityTraversalAfter(int afterId), Sets the id of a view after which this one is visited in accessibility traversal.
android.view.View,void setAccessibilityTraversalBefore(int beforeId), Sets the id of a view before which this one is visited in accessibility traversal.
android.view.View,void setActivated(boolean activated), Changes the activated state of this view.
android.view.View,void setAlpha(float alpha)," Sets the opacity of the view to a value from 0 to 1, where 0 means the view is completely transparent and 1 means the view is completely opaque."
android.view.View,void setAnimation(Animation animation), Sets the next animation to play for this view.
android.view.View,void setAutofillHints(String... autofillHints), Sets the hints that help an AutofillService determine how to autofill the view with the user's data.
android.view.View,void setBackground(Drawable background)," Set the background to a given Drawable, or remove the background."
android.view.View,void setBackgroundColor(int color), Sets the background color for this view.
android.view.View,void setBackgroundDrawable(Drawable background), This method was deprecated in API level 16. use setBackground(Drawable) instead
android.view.View,void setBackgroundResource(int resid), Set the background to a given resource.
android.view.View,void setBackgroundTintList(ColorStateList tint), Applies a tint to the background drawable.
android.view.View,void setBackgroundTintMode(PorterDuff.Mode tintMode), Specifies the blending mode used to apply the tint specified by setBackgroundTintList(ColorStateList)} to the background drawable.
android.view.View,final void setBottom(int bottom), Sets the bottom position of this view relative to its parent.
android.view.View,void setCameraDistance(float distance), Sets the distance along the Z axis (orthogonal to the X/Y plane on which views are drawn) from the camera to this view.
android.view.View,void setClickable(boolean clickable), Enables or disables click events for this view.
android.view.View,void setClipBounds(Rect clipBounds), Sets a rectangular area on this view to which the view will be clipped when it is drawn.
android.view.View,void setClipToOutline(boolean clipToOutline), Sets whether the View's Outline should be used to clip the contents of the View.
android.view.View,void setContentDescription(CharSequence contentDescription), Sets the View's content description.
android.view.View,void setContextClickable(boolean contextClickable), Enables or disables context clicking for this view.
android.view.View,void setDefaultFocusHighlightEnabled(boolean defaultFocusHighlightEnabled), Sets whether this View should use a default focus highlight when it gets focused but doesn't have state_focused defined in its background.
android.view.View,void setDrawingCacheBackgroundColor(int color)," This method was deprecated in API level P. The view drawing cache was largely made obsolete with the introduction of hardware-accelerated rendering in API 11. With hardware-acceleration, intermediate cache layers are largely unnecessary and can easily result in a net loss in performance due to the cost of creating and updating the layer. In the rare cases where caching layers are useful, such as for alpha animations, setLayerType(int, Paint) handles this with hardware rendering. For software-rendered snapshots of a small part of the View hierarchy or individual Views it is recommended to create a Canvas from either a Bitmap or Picture and call draw(Canvas) on the View. However these software-rendered usages are discouraged and have compatibility issues with hardware-only rendering features such as Config.HARDWARE bitmaps, real-time shadows, and outline clipping. For screenshots of the UI for feedback reports or unit testing the PixelCopy API is recommended."
android.view.View,void setDrawingCacheEnabled(boolean enabled)," This method was deprecated in API level P. The view drawing cache was largely made obsolete with the introduction of hardware-accelerated rendering in API 11. With hardware-acceleration, intermediate cache layers are largely unnecessary and can easily result in a net loss in performance due to the cost of creating and updating the layer. In the rare cases where caching layers are useful, such as for alpha animations, setLayerType(int, Paint) handles this with hardware rendering. For software-rendered snapshots of a small part of the View hierarchy or individual Views it is recommended to create a Canvas from either a Bitmap or Picture and call draw(Canvas) on the View. However these software-rendered usages are discouraged and have compatibility issues with hardware-only rendering features such as Config.HARDWARE bitmaps, real-time shadows, and outline clipping. For screenshots of the UI for feedback reports or unit testing the PixelCopy API is recommended."
android.view.View,void setDrawingCacheQuality(int quality)," This method was deprecated in API level P. The view drawing cache was largely made obsolete with the introduction of hardware-accelerated rendering in API 11. With hardware-acceleration, intermediate cache layers are largely unnecessary and can easily result in a net loss in performance due to the cost of creating and updating the layer. In the rare cases where caching layers are useful, such as for alpha animations, setLayerType(int, Paint) handles this with hardware rendering. For software-rendered snapshots of a small part of the View hierarchy or individual Views it is recommended to create a Canvas from either a Bitmap or Picture and call draw(Canvas) on the View. However these software-rendered usages are discouraged and have compatibility issues with hardware-only rendering features such as Config.HARDWARE bitmaps, real-time shadows, and outline clipping. For screenshots of the UI for feedback reports or unit testing the PixelCopy API is recommended."
android.view.View,void setDuplicateParentStateEnabled(boolean enabled), Enables or disables the duplication of the parent's state into this view.
android.view.View,void setElevation(float elevation)," Sets the base elevation of this view, in pixels."
android.view.View,void setEnabled(boolean enabled), Set the enabled state of this view.
android.view.View,void setFadingEdgeLength(int length), Set the size of the faded edge used to indicate that more content in this view is available.
android.view.View,void setFilterTouchesWhenObscured(boolean enabled), Sets whether the framework should discard touches when the view's window is obscured by another visible window.
android.view.View,void setFitsSystemWindows(boolean fitSystemWindows)," Sets whether or not this view should account for system screen decorations such as the status bar and inset its content; that is, controlling whether the default implementation of fitSystemWindows(Rect) will be executed."
android.view.View,void setFocusable(boolean focusable), Set whether this view can receive the focus.
android.view.View,void setFocusable(int focusable), Sets whether this view can receive focus.
android.view.View,void setFocusableInTouchMode(boolean focusableInTouchMode), Set whether this view can receive focus while in touch mode.
android.view.View,void setFocusedByDefault(boolean isFocusedByDefault), Sets whether this View should receive focus when the focus is restored for the view hierarchy containing this view.
android.view.View,void setForeground(Drawable foreground), Supply a Drawable that is to be rendered on top of all of the content in the view.
android.view.View,void setForegroundGravity(int gravity), Describes how the foreground is positioned.
android.view.View,void setForegroundTintList(ColorStateList tint), Applies a tint to the foreground drawable.
android.view.View,void setForegroundTintMode(PorterDuff.Mode tintMode), Specifies the blending mode used to apply the tint specified by setForegroundTintList(ColorStateList)} to the background drawable.
android.view.View,void setHapticFeedbackEnabled(boolean hapticFeedbackEnabled), Set whether this view should have haptic feedback for events such as long presses.
android.view.View,void setHasTransientState(boolean hasTransientState), Set whether this view is currently tracking transient state that the framework should attempt to preserve when possible.
android.view.View,void setHorizontalFadingEdgeEnabled(boolean horizontalFadingEdgeEnabled), Define whether the horizontal edges should be faded when this view is scrolled horizontally.
android.view.View,void setHorizontalScrollBarEnabled(boolean horizontalScrollBarEnabled), Define whether the horizontal scrollbar should be drawn or not.
android.view.View,void setHovered(boolean hovered), Sets whether the view is currently hovered.
android.view.View,void setId(int id), Sets the identifier for this view.
android.view.View,void setImportantForAccessibility(int mode), Sets how to determine whether this view is important for accessibility which is if it fires accessibility events and if it is reported to accessibility services that query the screen.
android.view.View,void setImportantForAutofill(int mode), Sets the mode for determining whether this view is considered important for autofill.
android.view.View,void setKeepScreenOn(boolean keepScreenOn)," Controls whether the screen should remain on, modifying the value of KEEP_SCREEN_ON."
android.view.View,void setKeyboardNavigationCluster(boolean isCluster), Set whether this view is a root of a keyboard navigation cluster.
android.view.View,void setLabelFor(int id), Sets the id of a view for which this view serves as a label for accessibility purposes.
android.view.View,void setLayerPaint(Paint paint), Updates the Paint object used with the current layer (used only if the current layer type is not set to LAYER_TYPE_NONE).
android.view.View,"void setLayerType(int layerType, Paint paint)", Specifies the type of layer backing this view.
android.view.View,void setLayoutDirection(int layoutDirection), Set the layout direction for this view.
android.view.View,void setLayoutParams(ViewGroup.LayoutParams params), Set the layout parameters associated with this view.
android.view.View,final void setLeft(int left), Sets the left position of this view relative to its parent.
android.view.View,void setLongClickable(boolean longClickable), Enables or disables long click events for this view.
android.view.View,void setMinimumHeight(int minHeight), Sets the minimum height of the view.
android.view.View,void setMinimumWidth(int minWidth), Sets the minimum width of the view.
android.view.View,void setNestedScrollingEnabled(boolean enabled), Enable or disable nested scrolling for this view.
android.view.View,void setNextClusterForwardId(int nextClusterForwardId), Sets the id of the view to use as the root of the next keyboard navigation cluster.
android.view.View,void setNextFocusDownId(int nextFocusDownId), Sets the id of the view to use when the next focus is FOCUS_DOWN.
android.view.View,void setNextFocusForwardId(int nextFocusForwardId), Sets the id of the view to use when the next focus is FOCUS_FORWARD.
android.view.View,void setNextFocusLeftId(int nextFocusLeftId), Sets the id of the view to use when the next focus is FOCUS_LEFT.
android.view.View,void setNextFocusRightId(int nextFocusRightId), Sets the id of the view to use when the next focus is FOCUS_RIGHT.
android.view.View,void setNextFocusUpId(int nextFocusUpId), Sets the id of the view to use when the next focus is FOCUS_UP.
android.view.View,void setOnApplyWindowInsetsListener(View.OnApplyWindowInsetsListener listener), Set an View.OnApplyWindowInsetsListener to take over the policy for applying window insets to this view.
android.view.View,void setOnCapturedPointerListener(View.OnCapturedPointerListener l), Set a listener to receive callbacks when the pointer capture state of a view changes.
android.view.View,void setOnClickListener(View.OnClickListener l), Register a callback to be invoked when this view is clicked.
android.view.View,void setOnContextClickListener(View.OnContextClickListener l), Register a callback to be invoked when this view is context clicked.
android.view.View,void setOnCreateContextMenuListener(View.OnCreateContextMenuListener l), Register a callback to be invoked when the context menu for this view is being built.
android.view.View,void setOnDragListener(View.OnDragListener l), Register a drag event listener callback object for this View.
android.view.View,void setOnFocusChangeListener(View.OnFocusChangeListener l), Register a callback to be invoked when focus of this view changed.
android.view.View,void setOnGenericMotionListener(View.OnGenericMotionListener l), Register a callback to be invoked when a generic motion event is sent to this view.
android.view.View,void setOnHoverListener(View.OnHoverListener l), Register a callback to be invoked when a hover event is sent to this view.
android.view.View,void setOnKeyListener(View.OnKeyListener l), Register a callback to be invoked when a hardware key is pressed in this view.
android.view.View,void setOnLongClickListener(View.OnLongClickListener l), Register a callback to be invoked when this view is clicked and held.
android.view.View,void setOnScrollChangeListener(View.OnScrollChangeListener l), Register a callback to be invoked when the scroll X or Y positions of this view change.
android.view.View,void setOnSystemUiVisibilityChangeListener(View.OnSystemUiVisibilityChangeListener l), Set a listener to receive callbacks when the visibility of the system bar changes.
android.view.View,void setOnTouchListener(View.OnTouchListener l), Register a callback to be invoked when a touch event is sent to this view.
android.view.View,void setOutlineAmbientShadowColor(int color), Sets the color of the ambient shadow that is drawn when the view has a positive Z or elevation value.
android.view.View,void setOutlineProvider(ViewOutlineProvider provider)," Sets the ViewOutlineProvider of the view, which generates the Outline that defines the shape of the shadow it casts, and enables outline clipping."
android.view.View,void setOutlineSpotShadowColor(int color), Sets the color of the spot shadow that is drawn when the view has a positive Z or elevation value.
android.view.View,void setOverScrollMode(int overScrollMode), Set the over-scroll mode for this view.
android.view.View,"void setPadding(int left, int top, int right, int bottom)", Sets the padding.
android.view.View,"void setPaddingRelative(int start, int top, int end, int bottom)", Sets the relative padding.
android.view.View,void setPivotX(float pivotX), Sets the x location of the point around which the view is rotated and scaled.
android.view.View,void setPivotY(float pivotY), Sets the y location of the point around which the view is rotated and scaled.
android.view.View,void setPointerIcon(PointerIcon pointerIcon), Set the pointer icon for the current view.
android.view.View,void setPressed(boolean pressed), Sets the pressed state for this view.
android.view.View,final void setRevealOnFocusHint(boolean revealOnFocus), Sets this view's preference for reveal behavior when it gains focus.
android.view.View,final void setRight(int right), Sets the right position of this view relative to its parent.
android.view.View,void setRotation(float rotation), Sets the degrees that the view is rotated around the pivot point.
android.view.View,void setRotationX(float rotationX), Sets the degrees that the view is rotated around the horizontal axis through the pivot point.
android.view.View,void setRotationY(float rotationY), Sets the degrees that the view is rotated around the vertical axis through the pivot point.
android.view.View,void setSaveEnabled(boolean enabled)," Controls whether the saving of this view's state is enabled (that is, whether its onSaveInstanceState() method will be called)."
android.view.View,void setSaveFromParentEnabled(boolean enabled), Controls whether the entire hierarchy under this view will save its state when a state saving traversal occurs from its parent.
android.view.View,void setScaleX(float scaleX)," Sets the amount that the view is scaled in x around the pivot point, as a proportion of the view's unscaled width."
android.view.View,void setScaleY(float scaleY)," Sets the amount that the view is scaled in Y around the pivot point, as a proportion of the view's unscaled width."
android.view.View,void setScreenReaderFocusable(boolean screenReaderFocusable)," When screen readers (one type of accessibility tool) decide what should be read to the user, they typically look for input focusable (isFocusable()) parents of non-focusable text items, and read those focusable parents and their non-focusable children as a unit."
android.view.View,void setScrollBarDefaultDelayBeforeFade(int scrollBarDefaultDelayBeforeFade), Define the delay before scrollbars fade.
android.view.View,void setScrollBarFadeDuration(int scrollBarFadeDuration), Define the scrollbar fade duration.
android.view.View,void setScrollBarSize(int scrollBarSize), Define the scrollbar size.
android.view.View,void setScrollBarStyle(int style), Specify the style of the scrollbars.
android.view.View,void setScrollContainer(boolean isScrollContainer), Change whether this view is one of the set of scrollable containers in its window.
android.view.View,"void setScrollIndicators(int indicators, int mask)", Sets the state of the scroll indicators specified by the mask.
android.view.View,void setScrollIndicators(int indicators), Sets the state of all scroll indicators.
android.view.View,void setScrollX(int value), Set the horizontal scrolled position of your view.
android.view.View,void setScrollY(int value), Set the vertical scrolled position of your view.
android.view.View,void setScrollbarFadingEnabled(boolean fadeScrollbars), Define whether scrollbars will fade when the view is not scrolling.
android.view.View,void setSelected(boolean selected), Changes the selection state of this view.
android.view.View,void setSoundEffectsEnabled(boolean soundEffectsEnabled), Set whether this view should have sound effects enabled for events such as clicking and touching.
android.view.View,void setStateListAnimator(StateListAnimator stateListAnimator), Attaches the provided StateListAnimator to this View.
android.view.View,void setSystemUiVisibility(int visibility), Request that the visibility of the status bar or other screen/window decorations be changed.
android.view.View,"void setTag(int key, Object tag)", Sets a tag associated with this view and a key.
android.view.View,void setTag(Object tag), Sets the tag associated with this view.
android.view.View,void setTextAlignment(int textAlignment), Set the text alignment.
android.view.View,void setTextDirection(int textDirection), Set the text direction.
android.view.View,void setTooltipText(CharSequence tooltipText), Sets the tooltip text which will be displayed in a small popup next to the view.
android.view.View,final void setTop(int top), Sets the top position of this view relative to its parent.
android.view.View,void setTouchDelegate(TouchDelegate delegate), Sets the TouchDelegate for this View.
android.view.View,final void setTransitionName(String transitionName), Sets the name of the View to be used to identify Views in Transitions.
android.view.View,void setTranslationX(float translationX), Sets the horizontal location of this view relative to its left position.
android.view.View,void setTranslationY(float translationY), Sets the vertical location of this view relative to its top position.
android.view.View,void setTranslationZ(float translationZ), Sets the depth location of this view relative to its elevation.
android.view.View,void setVerticalFadingEdgeEnabled(boolean verticalFadingEdgeEnabled), Define whether the vertical edges should be faded when this view is scrolled vertically.
android.view.View,void setVerticalScrollBarEnabled(boolean verticalScrollBarEnabled), Define whether the vertical scrollbar should be drawn or not.
android.view.View,void setVerticalScrollbarPosition(int position), Set the position of the vertical scroll bar.
android.view.View,void setVisibility(int visibility), Set the visibility state of this view.
android.view.View,void setWillNotCacheDrawing(boolean willNotCacheDrawing)," When a View's drawing cache is enabled, drawing is redirected to an offscreen bitmap."
android.view.View,void setWillNotDraw(boolean willNotDraw)," If this view doesn't do any drawing on its own, set this flag to allow further optimizations."
android.view.View,void setX(float x)," Sets the visual x position of this view, in pixels."
android.view.View,void setY(float y)," Sets the visual y position of this view, in pixels."
android.view.View,void setZ(float z)," Sets the visual z position of this view, in pixels."
android.view.View,boolean showContextMenu(), Shows the context menu for this view.
android.view.View,"boolean showContextMenu(float x, float y)", Shows the context menu for this view anchored to the specified view-relative coordinate.
android.view.View,"ActionMode startActionMode(ActionMode.Callback callback, int type)", Start an action mode with the given type.
android.view.View,ActionMode startActionMode(ActionMode.Callback callback), Start an action mode with the default type TYPE_PRIMARY.
android.view.View,void startAnimation(Animation animation), Start the specified animation now.
android.view.View,"final boolean startDrag(ClipData data, View.DragShadowBuilder shadowBuilder, Object myLocalState, int flags)", This method was deprecated in API level 24. Use startDragAndDrop() for newer platform versions.
android.view.View,"final boolean startDragAndDrop(ClipData data, View.DragShadowBuilder shadowBuilder, Object myLocalState, int flags)", Starts a drag and drop operation.
android.view.View,boolean startNestedScroll(int axes), Begin a nestable scroll operation along the given axes.
android.view.View,void stopNestedScroll(), Stop a nested scroll in progress.
android.view.View,String toString(), Returns a string representation of the object.
android.view.View,"void unscheduleDrawable(Drawable who, Runnable what)", Cancels a scheduled action on a drawable.
android.view.View,void unscheduleDrawable(Drawable who), Unschedule any events associated with the given Drawable.
android.view.View,final void updateDragShadow(View.DragShadowBuilder shadowBuilder), Updates the drag shadow for the ongoing drag and drop operation.
android.view.View,boolean willNotCacheDrawing(), Returns whether or not this View can cache its drawing or not.
android.view.View,boolean willNotDraw(), Returns whether or not this View draws on its own.
android.view.ViewAnimationUtils,"static Animator createCircularReveal(View view, int centerX, int centerY, float startRadius, float endRadius)", Returns an Animator which can animate a clipping circle.
android.view.ViewConfiguration,static ViewConfiguration get(Context context), Returns a configuration for the specified context.
android.view.ViewConfiguration,static long getDefaultActionModeHideDuration(),
android.view.ViewConfiguration,static int getDoubleTapTimeout(),
android.view.ViewConfiguration,static int getEdgeSlop(), This method was deprecated in API level 3. Use getScaledEdgeSlop() instead.
android.view.ViewConfiguration,static int getFadingEdgeLength(), This method was deprecated in API level 3. Use getScaledFadingEdgeLength() instead.
android.view.ViewConfiguration,static long getGlobalActionKeyTimeout(), This method was deprecated in API level 20. This timeout should not be used by applications
android.view.ViewConfiguration,static int getJumpTapTimeout(),
android.view.ViewConfiguration,static int getKeyRepeatDelay(),
android.view.ViewConfiguration,static int getKeyRepeatTimeout(),
android.view.ViewConfiguration,static int getLongPressTimeout(),
android.view.ViewConfiguration,static int getMaximumDrawingCacheSize(), This method was deprecated in API level 3. Use getScaledMaximumDrawingCacheSize() instead.
android.view.ViewConfiguration,static int getMaximumFlingVelocity(), This method was deprecated in API level 4. Use getScaledMaximumFlingVelocity() instead.
android.view.ViewConfiguration,static int getMinimumFlingVelocity(), This method was deprecated in API level 3. Use getScaledMinimumFlingVelocity() instead.
android.view.ViewConfiguration,static int getPressedStateDuration(),
android.view.ViewConfiguration,int getScaledDoubleTapSlop(),
android.view.ViewConfiguration,int getScaledEdgeSlop(),
android.view.ViewConfiguration,int getScaledFadingEdgeLength(),
android.view.ViewConfiguration,float getScaledHorizontalScrollFactor(),
android.view.ViewConfiguration,int getScaledHoverSlop(),
android.view.ViewConfiguration,int getScaledMaximumDrawingCacheSize(), The maximum drawing cache size expressed in bytes.
android.view.ViewConfiguration,int getScaledMaximumFlingVelocity(),
android.view.ViewConfiguration,int getScaledMinimumFlingVelocity(),
android.view.ViewConfiguration,int getScaledOverflingDistance(),
android.view.ViewConfiguration,int getScaledOverscrollDistance(),
android.view.ViewConfiguration,int getScaledPagingTouchSlop(),
android.view.ViewConfiguration,int getScaledScrollBarSize(),
android.view.ViewConfiguration,int getScaledTouchSlop(),
android.view.ViewConfiguration,float getScaledVerticalScrollFactor(),
android.view.ViewConfiguration,int getScaledWindowTouchSlop(),
android.view.ViewConfiguration,static int getScrollBarFadeDuration(),
android.view.ViewConfiguration,static int getScrollBarSize(), This method was deprecated in API level 3. Use getScaledScrollBarSize() instead.
android.view.ViewConfiguration,static int getScrollDefaultDelay(),
android.view.ViewConfiguration,static float getScrollFriction(), The amount of friction applied to scrolls and flings.
android.view.ViewConfiguration,static int getTapTimeout(),
android.view.ViewConfiguration,static int getTouchSlop(), This method was deprecated in API level 3. Use getScaledTouchSlop() instead.
android.view.ViewConfiguration,static int getWindowTouchSlop(), This method was deprecated in API level 3. Use getScaledWindowTouchSlop() instead.
android.view.ViewConfiguration,static long getZoomControlsTimeout(), The amount of time that the zoom controls should be displayed on the screen expressed in milliseconds.
android.view.ViewConfiguration,boolean hasPermanentMenuKey(), Report if the device has a permanent menu key available to the user.
android.view.ViewDebug.HierarchyTraceType,static ViewDebug.HierarchyTraceType valueOf(String name),
android.view.ViewDebug.HierarchyTraceType,static final HierarchyTraceType[] values(),
android.view.ViewDebug.RecyclerTraceType,static ViewDebug.RecyclerTraceType valueOf(String name),
android.view.ViewDebug.RecyclerTraceType,static final RecyclerTraceType[] values(),
android.view.ViewDebug,"static void dumpCapturedView(String tag, Object view)", Dump view info for id based instrument test generation (and possibly further data analysis).
android.view.ViewDebug,"static void startHierarchyTracing(String prefix, View view)", This method was deprecated in API level 16. This method is now unused and invoking it is a no-op
android.view.ViewDebug,"static void startRecyclerTracing(String prefix, View view)", This method was deprecated in API level 16. This method is now unused and invoking it is a no-op
android.view.ViewDebug,static void stopHierarchyTracing(), This method was deprecated in API level 16. This method is now unused and invoking it is a no-op
android.view.ViewDebug,static void stopRecyclerTracing(), This method was deprecated in API level 16. This method is now unused and invoking it is a no-op
android.view.ViewDebug,"static void trace(View view, ViewDebug.RecyclerTraceType type, int... parameters)", This method was deprecated in API level 16. This method is now unused and invoking it is a no-op
android.view.ViewDebug,"static void trace(View view, ViewDebug.HierarchyTraceType type)", This method was deprecated in API level 16. This method is now unused and invoking it is a no-op
android.view.ViewGroup.LayoutParams,void resolveLayoutDirection(int layoutDirection), Resolve layout parameters depending on the layout direction.
android.view.ViewGroup.MarginLayoutParams,int getLayoutDirection(), Retuns the layout direction.
android.view.ViewGroup.MarginLayoutParams,int getMarginEnd(), Returns the end margin in pixels.
android.view.ViewGroup.MarginLayoutParams,int getMarginStart(), Returns the start margin in pixels.
android.view.ViewGroup.MarginLayoutParams,boolean isMarginRelative(), Check if margins are relative.
android.view.ViewGroup.MarginLayoutParams,void resolveLayoutDirection(int layoutDirection), This will be called by requestLayout().
android.view.ViewGroup.MarginLayoutParams,void setLayoutDirection(int layoutDirection), Set the layout direction
android.view.ViewGroup.MarginLayoutParams,void setMarginEnd(int end), Sets the relative end margin.
android.view.ViewGroup.MarginLayoutParams,void setMarginStart(int start), Sets the relative start margin.
android.view.ViewGroup.MarginLayoutParams,"void setMargins(int left, int top, int right, int bottom)"," Sets the margins, in pixels."
android.view.ViewGroup.OnHierarchyChangeListener,"abstract void onChildViewAdded(View parent, View child)", Called when a new child is added to a parent view.
android.view.ViewGroup.OnHierarchyChangeListener,"abstract void onChildViewRemoved(View parent, View child)", Called when a child is removed from a parent view.
android.view.ViewGroup,void addChildrenForAccessibility(ArrayList<View> outChildren), Adds the children of this View relevant for accessibility to the given list as output.
android.view.ViewGroup,"void addFocusables(ArrayList<View> views, int direction, int focusableMode)", Adds any focusable views that are descendants of this view (possibly including this view if it is focusable itself) to views.
android.view.ViewGroup,"void addKeyboardNavigationClusters(Collection<View> views, int direction)", Adds any keyboard navigation cluster roots that are descendants of this view (possibly including this view if it is a cluster root itself) to views.
android.view.ViewGroup,boolean addStatesFromChildren(), Returns whether this ViewGroup's drawable states also include its children's drawable states.
android.view.ViewGroup,void addTouchables(ArrayList<View> views), Add any touchable views that are descendants of this view (possibly including this view if it is touchable itself) to views.
android.view.ViewGroup,"void addView(View child, ViewGroup.LayoutParams params)", Adds a child view with the specified layout parameters.
android.view.ViewGroup,"void addView(View child, int index)", Adds a child view.
android.view.ViewGroup,"void addView(View child, int index, ViewGroup.LayoutParams params)", Adds a child view with the specified layout parameters.
android.view.ViewGroup,void addView(View child), Adds a child view.
android.view.ViewGroup,"void addView(View child, int width, int height)", Adds a child view with this ViewGroup's default layout parameters and the specified width and height.
android.view.ViewGroup,void bringChildToFront(View child), Change the z order of the child so it's on top of all other children.
android.view.ViewGroup,void childDrawableStateChanged(View child)," If addStatesFromChildren() is true, refreshes this group's drawable state (to include the states from its children)."
android.view.ViewGroup,"void childHasTransientStateChanged(View child, boolean childHasTransientState)", Called when a child view has changed whether or not it is tracking transient state.
android.view.ViewGroup,void clearChildFocus(View child), Called when a child of this parent is giving up focus
android.view.ViewGroup,void clearDisappearingChildren(), Removes any pending animations for views that have been removed.
android.view.ViewGroup,void clearFocus(), Called when this view wants to give up focus.
android.view.ViewGroup,WindowInsets dispatchApplyWindowInsets(WindowInsets insets), Request to apply the given window insets to this view or another view in its subtree.
android.view.ViewGroup,boolean dispatchCapturedPointerEvent(MotionEvent event), Pass a captured pointer event down to the focused view.
android.view.ViewGroup,void dispatchConfigurationChanged(Configuration newConfig), Dispatch a notification about a resource configuration change down the view hierarchy.
android.view.ViewGroup,void dispatchDisplayHint(int hint), Dispatch a hint about whether this view is displayed.
android.view.ViewGroup,boolean dispatchDragEvent(DragEvent event), Detects if this View is enabled and has a drag event listener.
android.view.ViewGroup,"void dispatchDrawableHotspotChanged(float x, float y)", Dispatches drawable hotspot changes to child views that meet at least one of the following criteria: Returns false from both isClickable() and isLongClickable() Requests duplication of parent state via setDuplicateParentStateEnabled(boolean)
android.view.ViewGroup,boolean dispatchKeyEvent(KeyEvent event), Dispatch a key event to the next view on the focus path.
android.view.ViewGroup,boolean dispatchKeyEventPreIme(KeyEvent event), Dispatch a key event before it is processed by any input method associated with the view hierarchy.
android.view.ViewGroup,boolean dispatchKeyShortcutEvent(KeyEvent event), Dispatches a key shortcut event.
android.view.ViewGroup,void dispatchPointerCaptureChanged(boolean hasCapture),
android.view.ViewGroup,"void dispatchProvideAutofillStructure(ViewStructure structure, int flags)"," Dispatches creation of a ViewStructures for autofill purposes down the hierarchy, when an Assist structure is being created as part of an autofill request. This implementation adds in all child views of the view group, in addition to calling the default View implementation."
android.view.ViewGroup,void dispatchProvideStructure(ViewStructure structure), Dispatch creation of ViewStructure down the hierarchy.
android.view.ViewGroup,void dispatchSetActivated(boolean activated), Dispatch setActivated to all of this View's children.
android.view.ViewGroup,void dispatchSetSelected(boolean selected), Dispatch setSelected to all of this View's children.
android.view.ViewGroup,void dispatchSystemUiVisibilityChanged(int visible), Dispatch callbacks to setOnSystemUiVisibilityChangeListener(View.OnSystemUiVisibilityChangeListener) down the view hierarchy.
android.view.ViewGroup,boolean dispatchTouchEvent(MotionEvent ev)," Pass the touch screen motion event down to the target view, or this view if it is the target."
android.view.ViewGroup,boolean dispatchTrackballEvent(MotionEvent event), Pass a trackball motion event down to the focused view.
android.view.ViewGroup,"boolean dispatchUnhandledMove(View focused, int direction)", This method is the last chance for the focused view and its ancestors to respond to an arrow key.
android.view.ViewGroup,void dispatchWindowFocusChanged(boolean hasFocus), Called when the window containing this view gains or loses window focus.
android.view.ViewGroup,void dispatchWindowSystemUiVisiblityChanged(int visible), Dispatch callbacks to onWindowSystemUiVisibilityChanged(int) down the view hierarchy.
android.view.ViewGroup,void dispatchWindowVisibilityChanged(int visibility), Dispatch a window visibility change down the view hierarchy.
android.view.ViewGroup,void endViewTransition(View view), This method should always be called following an earlier call to startViewTransition(View).
android.view.ViewGroup,View findFocus(), Find the view in the hierarchy rooted at this view that currently has focus.
android.view.ViewGroup,"void findViewsWithText(ArrayList<View> outViews, CharSequence text, int flags)", Finds the Views that contain given text.
android.view.ViewGroup,"View focusSearch(View focused, int direction)", Find the nearest view in the specified direction that wants to take focus.
android.view.ViewGroup,void focusableViewAvailable(View v), Tells the parent that a new focusable view has become available.
android.view.ViewGroup,boolean gatherTransparentRegion(Region region), This is used by the RootView to perform an optimization when the view hierarchy contains one or several SurfaceView.
android.view.ViewGroup,ViewGroup.LayoutParams generateLayoutParams(AttributeSet attrs), Returns a new set of layout parameters based on the supplied attributes set.
android.view.ViewGroup,CharSequence getAccessibilityClassName(), Return the class name of this object to be used for accessibility purposes.
android.view.ViewGroup,View getChildAt(int index), Returns the view at the specified position in the group.
android.view.ViewGroup,int getChildCount(), Returns the number of children in the group.
android.view.ViewGroup,"static int getChildMeasureSpec(int spec, int padding, int childDimension)", Does the hard part of measureChildren: figuring out the MeasureSpec to pass to a particular child.
android.view.ViewGroup,"boolean getChildVisibleRect(View child, Rect r, Point offset)", Compute the visible part of a rectangular region defined in terms of a child view's coordinates.
android.view.ViewGroup,boolean getClipChildren(), Returns whether this group's children are clipped to their bounds before drawing.
android.view.ViewGroup,boolean getClipToPadding()," Returns whether this ViewGroup will clip its children to its padding, and resize (but not clip) any EdgeEffect to the padded region, if padding is present."
android.view.ViewGroup,int getDescendantFocusability(), Gets the descendant focusability of this view group.
android.view.ViewGroup,View getFocusedChild()," Returns the focused child of this view, if any."
android.view.ViewGroup,LayoutAnimationController getLayoutAnimation(), Returns the layout animation controller used to animate the group's children.
android.view.ViewGroup,Animation.AnimationListener getLayoutAnimationListener(), Returns the animation listener to which layout animation events are sent.
android.view.ViewGroup,int getLayoutMode(), Returns the basis of alignment during layout operations on this ViewGroup: either LAYOUT_MODE_CLIP_BOUNDS or LAYOUT_MODE_OPTICAL_BOUNDS.
android.view.ViewGroup,LayoutTransition getLayoutTransition(), Gets the LayoutTransition object for this ViewGroup.
android.view.ViewGroup,int getNestedScrollAxes(), Return the current axes of nested scrolling for this ViewGroup.
android.view.ViewGroup,ViewGroupOverlay getOverlay()," Returns the ViewGroupOverlay for this view group, creating it if it does not yet exist."
android.view.ViewGroup,int getPersistentDrawingCache()," This method was deprecated in API level P. The view drawing cache was largely made obsolete with the introduction of hardware-accelerated rendering in API 11. With hardware-acceleration, intermediate cache layers are largely unnecessary and can easily result in a net loss in performance due to the cost of creating and updating the layer. In the rare cases where caching layers are useful, such as for alpha animations, setLayerType(int, Paint) handles this with hardware rendering. For software-rendered snapshots of a small part of the View hierarchy or individual Views it is recommended to create a Canvas from either a Bitmap or Picture and call draw(Canvas) on the View. However these software-rendered usages are discouraged and have compatibility issues with hardware-only rendering features such as Config.HARDWARE bitmaps, real-time shadows, and outline clipping. For screenshots of the UI for feedback reports or unit testing the PixelCopy API is recommended."
android.view.ViewGroup,boolean getTouchscreenBlocksFocus(), Check whether this ViewGroup should ignore focus requests for itself and its children.
android.view.ViewGroup,boolean hasFocus(), Returns true if this view has or contains focus
android.view.ViewGroup,boolean hasTransientState()," Indicates whether the view is currently tracking transient state that the app should not need to concern itself with saving and restoring, but that the framework should take special note to preserve when possible."
android.view.ViewGroup,int indexOfChild(View child), Returns the position in the group of the specified child view.
android.view.ViewGroup,"final void invalidateChild(View child, Rect dirty)"," This method was deprecated in API level 26. Use onDescendantInvalidated(View, View) instead to observe updates to draw state in descendants."
android.view.ViewGroup,"ViewParent invalidateChildInParent(int[] location, Rect dirty)"," This method was deprecated in API level 26. Use onDescendantInvalidated(View, View) instead to observe updates to draw state in descendants."
android.view.ViewGroup,boolean isAlwaysDrawnWithCacheEnabled()," This method was deprecated in API level 23. As of M, this property is ignored. Child views may no longer have their caching behavior disabled by parents."
android.view.ViewGroup,boolean isAnimationCacheEnabled()," This method was deprecated in API level 23. As of M, this property is ignored. Caching behavior of children may be controlled through setLayerType(int, Paint)."
android.view.ViewGroup,boolean isMotionEventSplittingEnabled(), Returns true if MotionEvents dispatched to this ViewGroup can be split to multiple children.
android.view.ViewGroup,boolean isTransitionGroup(), Returns true if this ViewGroup should be considered as a single entity for removal when executing an Activity transition.
android.view.ViewGroup,void jumpDrawablesToCurrentState(), Call Drawable.jumpToCurrentState() on all Drawable objects associated with this view.
android.view.ViewGroup,"final void layout(int l, int t, int r, int b)", Assign a size and position to a view and all of its descendants This is the second phase of the layout mechanism.
android.view.ViewGroup,"void notifySubtreeAccessibilityStateChanged(View child, View source, int changeType)", Notifies a view parent that the accessibility state of one of its descendants has changed and that the structure of the subtree is different.
android.view.ViewGroup,"final void offsetDescendantRectToMyCoords(View descendant, Rect rect)", Offset a rectangle that is in a descendant's coordinate space into our coordinate space.
android.view.ViewGroup,"final void offsetRectIntoDescendantCoords(View descendant, Rect rect)", Offset a rectangle that is in our coordinate space into an ancestor's coordinate space.
android.view.ViewGroup,boolean onInterceptHoverEvent(MotionEvent event), Implement this method to intercept hover events before they are handled by child views.
android.view.ViewGroup,boolean onInterceptTouchEvent(MotionEvent ev), Implement this method to intercept all touch screen motion events.
android.view.ViewGroup,"boolean onNestedFling(View target, float velocityX, float velocityY, boolean consumed)", Request a fling from a nested scroll.
android.view.ViewGroup,"boolean onNestedPreFling(View target, float velocityX, float velocityY)", React to a nested fling before the target view consumes it.
android.view.ViewGroup,"boolean onNestedPrePerformAccessibilityAction(View target, int action, Bundle args)", React to an accessibility action delegated by a target descendant view before the target processes it. Subclasses should always call super.onNestedPrePerformAccessibilityAction
android.view.ViewGroup,"void onNestedPreScroll(View target, int dx, int dy, int[] consumed)", React to a nested scroll in progress before the target view consumes a portion of the scroll.
android.view.ViewGroup,"void onNestedScroll(View target, int dxConsumed, int dyConsumed, int dxUnconsumed, int dyUnconsumed)", React to a nested scroll in progress.
android.view.ViewGroup,"void onNestedScrollAccepted(View child, View target, int axes)", React to the successful claiming of a nested scroll operation.
android.view.ViewGroup,"boolean onRequestSendAccessibilityEvent(View child, AccessibilityEvent event)", Called when a child has requested sending an AccessibilityEvent and gives an opportunity to its parent to augment the event.
android.view.ViewGroup,"PointerIcon onResolvePointerIcon(MotionEvent event, int pointerIndex)"," Returns the pointer icon for the motion event, or null if it doesn't specify the icon."
android.view.ViewGroup,"boolean onStartNestedScroll(View child, View target, int nestedScrollAxes)"," React to a descendant view initiating a nestable scroll operation, claiming the nested scroll operation if appropriate."
android.view.ViewGroup,void onStopNestedScroll(View child), React to a nested scroll operation ending.
android.view.ViewGroup,void onViewAdded(View child), Called when a new child is added to this ViewGroup.
android.view.ViewGroup,void onViewRemoved(View child), Called when a child view is removed from this ViewGroup.
android.view.ViewGroup,void recomputeViewAttributes(View child), Tell view hierarchy that the global view attributes need to be re-evaluated.
android.view.ViewGroup,void removeAllViews(), Call this method to remove all child views from the ViewGroup.
android.view.ViewGroup,void removeAllViewsInLayout()," Called by a ViewGroup subclass to remove child views from itself, when it must first know its size on screen before it can calculate how many child views it will render."
android.view.ViewGroup,void removeView(View view)," Note: do not invoke this method from draw(android.graphics.Canvas), onDraw(android.graphics.Canvas), dispatchDraw(android.graphics.Canvas) or any related method."
android.view.ViewGroup,void removeViewAt(int index), Removes the view at the specified position in the group.
android.view.ViewGroup,void removeViewInLayout(View view), Removes a view during layout.
android.view.ViewGroup,"void removeViews(int start, int count)", Removes the specified range of views from the group.
android.view.ViewGroup,"void removeViewsInLayout(int start, int count)", Removes a range of views during layout.
android.view.ViewGroup,"void requestChildFocus(View child, View focused)", Called when a child of this parent wants focus
android.view.ViewGroup,"boolean requestChildRectangleOnScreen(View child, Rect rectangle, boolean immediate)", Called when a child of this group wants a particular rectangle to be positioned onto the screen.
android.view.ViewGroup,void requestDisallowInterceptTouchEvent(boolean disallowIntercept), Called when a child does not want this parent and its ancestors to intercept touch events with onInterceptTouchEvent(MotionEvent).
android.view.ViewGroup,"boolean requestFocus(int direction, Rect previouslyFocusedRect)", Call this to try to give focus to a specific view or to one of its descendants and give it hints about the direction and a specific rectangle that the focus is coming from. Looks for a view to give focus to respecting the setting specified by getDescendantFocusability().
android.view.ViewGroup,"boolean requestSendAccessibilityEvent(View child, AccessibilityEvent event)", Called by a child to request from its parent to send an AccessibilityEvent.
android.view.ViewGroup,void requestTransparentRegion(View child), Called when a child wants the view hierarchy to gather and report transparent regions to the window compositor.
android.view.ViewGroup,boolean restoreDefaultFocus(), Gives focus to the default-focus view in the view hierarchy that has this view as a root.
android.view.ViewGroup,void scheduleLayoutAnimation(), Schedules the layout animation to be played after the next layout pass of this view group.
android.view.ViewGroup,void setAddStatesFromChildren(boolean addsStates), Sets whether this ViewGroup's drawable states also include its children's drawable states.
android.view.ViewGroup,void setAlwaysDrawnWithCacheEnabled(boolean always)," This method was deprecated in API level 23. As of M, this property is ignored. Child views may no longer have their caching behavior disabled by parents."
android.view.ViewGroup,void setAnimationCacheEnabled(boolean enabled)," This method was deprecated in API level 23. As of M, this property is ignored. Caching behavior of children may be controlled through setLayerType(int, Paint)."
android.view.ViewGroup,void setClipChildren(boolean clipChildren)," By default, children are clipped to their bounds before drawing."
android.view.ViewGroup,void setClipToPadding(boolean clipToPadding)," Sets whether this ViewGroup will clip its children to its padding and resize (but not clip) any EdgeEffect to the padded region, if padding is present."
android.view.ViewGroup,void setDescendantFocusability(int focusability), Set the descendant focusability of this view group.
android.view.ViewGroup,void setLayoutAnimation(LayoutAnimationController controller), Sets the layout animation controller used to animate the group's children after the first layout.
android.view.ViewGroup,void setLayoutAnimationListener(Animation.AnimationListener animationListener), Specifies the animation listener to which layout animation events must be sent.
android.view.ViewGroup,void setLayoutMode(int layoutMode), Sets the basis of alignment during the layout of this ViewGroup.
android.view.ViewGroup,void setLayoutTransition(LayoutTransition transition), Sets the LayoutTransition object for this ViewGroup.
android.view.ViewGroup,void setMotionEventSplittingEnabled(boolean split), Enable or disable the splitting of MotionEvents to multiple children during touch event dispatch.
android.view.ViewGroup,void setOnHierarchyChangeListener(ViewGroup.OnHierarchyChangeListener listener), Register a callback to be invoked when a child is added to or removed from this view.
android.view.ViewGroup,void setPersistentDrawingCache(int drawingCacheToKeep)," This method was deprecated in API level P. The view drawing cache was largely made obsolete with the introduction of hardware-accelerated rendering in API 11. With hardware-acceleration, intermediate cache layers are largely unnecessary and can easily result in a net loss in performance due to the cost of creating and updating the layer. In the rare cases where caching layers are useful, such as for alpha animations, setLayerType(int, Paint) handles this with hardware rendering. For software-rendered snapshots of a small part of the View hierarchy or individual Views it is recommended to create a Canvas from either a Bitmap or Picture and call draw(Canvas) on the View. However these software-rendered usages are discouraged and have compatibility issues with hardware-only rendering features such as Config.HARDWARE bitmaps, real-time shadows, and outline clipping. For screenshots of the UI for feedback reports or unit testing the PixelCopy API is recommended."
android.view.ViewGroup,void setTouchscreenBlocksFocus(boolean touchscreenBlocksFocus), Set whether this ViewGroup should ignore focus requests for itself and its children.
android.view.ViewGroup,void setTransitionGroup(boolean isTransitionGroup), Changes whether or not this ViewGroup should be treated as a single entity during Activity Transitions.
android.view.ViewGroup,boolean shouldDelayChildPressedState(), Return true if the pressed state should be delayed for children or descendants of this ViewGroup.
android.view.ViewGroup,"boolean showContextMenuForChild(View originalView, float x, float y)", Shows the context menu for the specified view or its ancestors anchored to the specified view-relative coordinate.
android.view.ViewGroup,boolean showContextMenuForChild(View originalView), Shows the context menu for the specified view or its ancestors.
android.view.ViewGroup,"ActionMode startActionModeForChild(View originalView, ActionMode.Callback callback, int type)", Start an action mode of a specific type for the specified view.
android.view.ViewGroup,"ActionMode startActionModeForChild(View originalView, ActionMode.Callback callback)", Start an action mode for the specified view with the default type TYPE_PRIMARY.
android.view.ViewGroup,void startLayoutAnimation(), Runs the layout animation.
android.view.ViewGroup,void startViewTransition(View view)," This method tells the ViewGroup that the given View object, which should have this ViewGroup as its parent, should be kept around (re-displayed when the ViewGroup draws its children) even if it is removed from its parent."
android.view.ViewGroup,"void updateViewLayout(View view, ViewGroup.LayoutParams params)",
android.view.ViewGroupOverlay,void add(View view), Adds a View to the overlay.
android.view.ViewGroupOverlay,void remove(View view), Removes the specified View from the overlay.
android.view.ViewManager,"abstract void addView(View view, ViewGroup.LayoutParams params)", Assign the passed LayoutParams to the passed View and add the view to the window.
android.view.ViewManager,abstract void removeView(View view),
android.view.ViewManager,"abstract void updateViewLayout(View view, ViewGroup.LayoutParams params)",
android.view.ViewOutlineProvider,"abstract void getOutline(View view, Outline outline)", Called to get the provider to populate the Outline.
android.view.ViewOverlay,void add(Drawable drawable), Adds a Drawable to the overlay.
android.view.ViewOverlay,void clear(), Removes all content from the overlay.
android.view.ViewOverlay,void remove(Drawable drawable), Removes the specified Drawable from the overlay.
android.view.ViewParent,abstract void bringChildToFront(View child), Change the z order of the child so it's on top of all other children.
android.view.ViewParent,abstract boolean canResolveLayoutDirection(), Tells if this view parent can resolve the layout direction.
android.view.ViewParent,abstract boolean canResolveTextAlignment(), Tells if this view parent can resolve the text alignment.
android.view.ViewParent,abstract boolean canResolveTextDirection(), Tells if this view parent can resolve the text direction.
android.view.ViewParent,abstract void childDrawableStateChanged(View child), This method is called on the parent when a child's drawable state has changed.
android.view.ViewParent,"abstract void childHasTransientStateChanged(View child, boolean hasTransientState)", Called when a child view now has or no longer is tracking transient state.
android.view.ViewParent,abstract void clearChildFocus(View child), Called when a child of this parent is giving up focus
android.view.ViewParent,abstract void createContextMenu(ContextMenu menu), Have the parent populate the specified context menu if it has anything to add (and then recurse on its parent).
android.view.ViewParent,"abstract View focusSearch(View v, int direction)", Find the nearest view in the specified direction that wants to take focus
android.view.ViewParent,abstract void focusableViewAvailable(View v), Tells the parent that a new focusable view has become available.
android.view.ViewParent,"abstract boolean getChildVisibleRect(View child, Rect r, Point offset)", Compute the visible part of a rectangular region defined in terms of a child view's coordinates.
android.view.ViewParent,abstract int getLayoutDirection(), Return this view parent layout direction.
android.view.ViewParent,abstract ViewParent getParent()," Returns the parent if it exists, or null."
android.view.ViewParent,abstract ViewParent getParentForAccessibility(), Gets the parent of a given View for accessibility.
android.view.ViewParent,abstract int getTextAlignment(), Return this view parent text alignment.
android.view.ViewParent,abstract int getTextDirection(), Return this view parent text direction.
android.view.ViewParent,"abstract void invalidateChild(View child, Rect r)"," This method was deprecated in API level 26. Use onDescendantInvalidated(View, View) instead."
android.view.ViewParent,"abstract ViewParent invalidateChildInParent(int[] location, Rect r)"," This method was deprecated in API level 26. Use onDescendantInvalidated(View, View) instead."
android.view.ViewParent,abstract boolean isLayoutDirectionResolved(), Tells if this view parent layout direction is resolved.
android.view.ViewParent,abstract boolean isLayoutRequested(), Indicates whether layout was requested on this view parent.
android.view.ViewParent,abstract boolean isTextAlignmentResolved(), Tells if this view parent text alignment is resolved.
android.view.ViewParent,abstract boolean isTextDirectionResolved(), Tells if this view parent text direction is resolved.
android.view.ViewParent,"abstract View keyboardNavigationClusterSearch(View currentCluster, int direction)", Find the nearest keyboard navigation cluster in the specified direction.
android.view.ViewParent,"abstract void notifySubtreeAccessibilityStateChanged(View child, View source, int changeType)", Notifies a view parent that the accessibility state of one of its descendants has changed and that the structure of the subtree is different.
android.view.ViewParent,"default void onDescendantInvalidated(View child, View target)"," The target View has been invalidated, or has had a drawing property changed that requires the hierarchy to re-render."
android.view.ViewParent,"abstract boolean onNestedFling(View target, float velocityX, float velocityY, boolean consumed)", Request a fling from a nested scroll.
android.view.ViewParent,"abstract boolean onNestedPreFling(View target, float velocityX, float velocityY)", React to a nested fling before the target view consumes it.
android.view.ViewParent,"abstract boolean onNestedPrePerformAccessibilityAction(View target, int action, Bundle arguments)", React to an accessibility action delegated by a target descendant view before the target processes it.
android.view.ViewParent,"abstract void onNestedPreScroll(View target, int dx, int dy, int[] consumed)", React to a nested scroll in progress before the target view consumes a portion of the scroll.
android.view.ViewParent,"abstract void onNestedScroll(View target, int dxConsumed, int dyConsumed, int dxUnconsumed, int dyUnconsumed)", React to a nested scroll in progress.
android.view.ViewParent,"abstract void onNestedScrollAccepted(View child, View target, int nestedScrollAxes)", React to the successful claiming of a nested scroll operation.
android.view.ViewParent,"abstract boolean onStartNestedScroll(View child, View target, int nestedScrollAxes)"," React to a descendant view initiating a nestable scroll operation, claiming the nested scroll operation if appropriate."
android.view.ViewParent,abstract void onStopNestedScroll(View target), React to a nested scroll operation ending.
android.view.ViewParent,abstract void recomputeViewAttributes(View child), Tell view hierarchy that the global view attributes need to be re-evaluated.
android.view.ViewParent,"abstract void requestChildFocus(View child, View focused)", Called when a child of this parent wants focus
android.view.ViewParent,"abstract boolean requestChildRectangleOnScreen(View child, Rect rectangle, boolean immediate)", Called when a child of this group wants a particular rectangle to be positioned onto the screen.
android.view.ViewParent,abstract void requestDisallowInterceptTouchEvent(boolean disallowIntercept), Called when a child does not want this parent and its ancestors to intercept touch events with onInterceptTouchEvent(MotionEvent).
android.view.ViewParent,abstract void requestFitSystemWindows(), Ask that a new dispatch of View.fitSystemWindows(Rect) be performed.
android.view.ViewParent,abstract void requestLayout(), Called when something has changed which has invalidated the layout of a child of this view parent.
android.view.ViewParent,"abstract boolean requestSendAccessibilityEvent(View child, AccessibilityEvent event)", Called by a child to request from its parent to send an AccessibilityEvent.
android.view.ViewParent,abstract void requestTransparentRegion(View child), Called when a child wants the view hierarchy to gather and report transparent regions to the window compositor.
android.view.ViewParent,abstract boolean showContextMenuForChild(View originalView), Shows the context menu for the specified view or its ancestors.
android.view.ViewParent,"abstract boolean showContextMenuForChild(View originalView, float x, float y)", Shows the context menu for the specified view or its ancestors anchored to the specified view-relative coordinate.
android.view.ViewParent,"abstract ActionMode startActionModeForChild(View originalView, ActionMode.Callback callback, int type)", Start an action mode of a specific type for the specified view.
android.view.ViewParent,"abstract ActionMode startActionModeForChild(View originalView, ActionMode.Callback callback)", Start an action mode for the specified view with the default type TYPE_PRIMARY.
android.view.ViewPropertyAnimator,ViewPropertyAnimator alpha(float value), This method will cause the View's alpha property to be animated to the specified value.
android.view.ViewPropertyAnimator,ViewPropertyAnimator alphaBy(float value), This method will cause the View's alpha property to be animated by the specified value.
android.view.ViewPropertyAnimator,void cancel(), Cancels all property animations that are currently running or pending.
android.view.ViewPropertyAnimator,long getDuration(), Returns the current duration of property animations.
android.view.ViewPropertyAnimator,TimeInterpolator getInterpolator(), Returns the timing interpolator that this animation uses.
android.view.ViewPropertyAnimator,long getStartDelay(), Returns the current startDelay of property animations.
android.view.ViewPropertyAnimator,ViewPropertyAnimator rotation(float value), This method will cause the View's rotation property to be animated to the specified value.
android.view.ViewPropertyAnimator,ViewPropertyAnimator rotationBy(float value), This method will cause the View's rotation property to be animated by the specified value.
android.view.ViewPropertyAnimator,ViewPropertyAnimator rotationX(float value), This method will cause the View's rotationX property to be animated to the specified value.
android.view.ViewPropertyAnimator,ViewPropertyAnimator rotationXBy(float value), This method will cause the View's rotationX property to be animated by the specified value.
android.view.ViewPropertyAnimator,ViewPropertyAnimator rotationY(float value), This method will cause the View's rotationY property to be animated to the specified value.
android.view.ViewPropertyAnimator,ViewPropertyAnimator rotationYBy(float value), This method will cause the View's rotationY property to be animated by the specified value.
android.view.ViewPropertyAnimator,ViewPropertyAnimator scaleX(float value), This method will cause the View's scaleX property to be animated to the specified value.
android.view.ViewPropertyAnimator,ViewPropertyAnimator scaleXBy(float value), This method will cause the View's scaleX property to be animated by the specified value.
android.view.ViewPropertyAnimator,ViewPropertyAnimator scaleY(float value), This method will cause the View's scaleY property to be animated to the specified value.
android.view.ViewPropertyAnimator,ViewPropertyAnimator scaleYBy(float value), This method will cause the View's scaleY property to be animated by the specified value.
android.view.ViewPropertyAnimator,ViewPropertyAnimator setDuration(long duration), Sets the duration for the underlying animator that animates the requested properties.
android.view.ViewPropertyAnimator,ViewPropertyAnimator setInterpolator(TimeInterpolator interpolator), Sets the interpolator for the underlying animator that animates the requested properties.
android.view.ViewPropertyAnimator,ViewPropertyAnimator setListener(Animator.AnimatorListener listener), Sets a listener for events in the underlying Animators that run the property animations.
android.view.ViewPropertyAnimator,ViewPropertyAnimator setStartDelay(long startDelay), Sets the startDelay for the underlying animator that animates the requested properties.
android.view.ViewPropertyAnimator,ViewPropertyAnimator setUpdateListener(ValueAnimator.AnimatorUpdateListener listener), Sets a listener for update events in the underlying ValueAnimator that runs the property animations.
android.view.ViewPropertyAnimator,void start(), Starts the currently pending property animations immediately.
android.view.ViewPropertyAnimator,ViewPropertyAnimator translationX(float value), This method will cause the View's translationX property to be animated to the specified value.
android.view.ViewPropertyAnimator,ViewPropertyAnimator translationXBy(float value), This method will cause the View's translationX property to be animated by the specified value.
android.view.ViewPropertyAnimator,ViewPropertyAnimator translationY(float value), This method will cause the View's translationY property to be animated to the specified value.
android.view.ViewPropertyAnimator,ViewPropertyAnimator translationYBy(float value), This method will cause the View's translationY property to be animated by the specified value.
android.view.ViewPropertyAnimator,ViewPropertyAnimator translationZ(float value), This method will cause the View's translationZ property to be animated to the specified value.
android.view.ViewPropertyAnimator,ViewPropertyAnimator translationZBy(float value), This method will cause the View's translationZ property to be animated by the specified value.
android.view.ViewPropertyAnimator,ViewPropertyAnimator withEndAction(Runnable runnable), Specifies an action to take place when the next animation ends.
android.view.ViewPropertyAnimator,ViewPropertyAnimator withLayer(), The View associated with this ViewPropertyAnimator will have its layer type set to LAYER_TYPE_HARDWARE for the duration of the next animation.
android.view.ViewPropertyAnimator,ViewPropertyAnimator withStartAction(Runnable runnable), Specifies an action to take place when the next animation runs.
android.view.ViewPropertyAnimator,ViewPropertyAnimator x(float value), This method will cause the View's x property to be animated to the specified value.
android.view.ViewPropertyAnimator,ViewPropertyAnimator xBy(float value), This method will cause the View's x property to be animated by the specified value.
android.view.ViewPropertyAnimator,ViewPropertyAnimator y(float value), This method will cause the View's y property to be animated to the specified value.
android.view.ViewPropertyAnimator,ViewPropertyAnimator yBy(float value), This method will cause the View's y property to be animated by the specified value.
android.view.ViewPropertyAnimator,ViewPropertyAnimator z(float value), This method will cause the View's z property to be animated to the specified value.
android.view.ViewPropertyAnimator,ViewPropertyAnimator zBy(float value), This method will cause the View's z property to be animated by the specified value.
android.view.ViewStructure.HtmlInfo.Builder,"abstract ViewStructure.HtmlInfo.Builder addAttribute(String name, String value)", Adds an HTML attribute.
android.view.ViewStructure.HtmlInfo.Builder,abstract ViewStructure.HtmlInfo build(), Builds the ViewStructure.HtmlInfo object.
android.view.ViewStructure.HtmlInfo,"abstract List<Pair<String,String>> getAttributes()", Gets the list of HTML attributes.
android.view.ViewStructure.HtmlInfo,abstract String getTag(), Gets the HTML tag.
android.view.ViewStructure,abstract int addChildCount(int num), Add to this view's child count.
android.view.ViewStructure,abstract void asyncCommit(), Call when done populating a ViewStructure returned by asyncNewChild(int).
android.view.ViewStructure,abstract ViewStructure asyncNewChild(int index)," Like newChild(int), but allows the caller to asynchronously populate the returned child."
android.view.ViewStructure,abstract AutofillId getAutofillId(), Gets the AutofillId associated with this node.
android.view.ViewStructure,abstract int getChildCount(), Return the child count as set by setChildCount(int).
android.view.ViewStructure,abstract Bundle getExtras()," Get extra data associated with this view structure; the returned Bundle is mutable, allowing you to view and modify its contents."
android.view.ViewStructure,abstract CharSequence getHint(), Retrieve the last hint set by setHint(CharSequence).
android.view.ViewStructure,abstract CharSequence getText(), Retrieve the last setText(CharSequence).
android.view.ViewStructure,abstract int getTextSelectionEnd()," Retrieve the last selection end set by setText(CharSequence, int, int)."
android.view.ViewStructure,abstract int getTextSelectionStart()," Retrieve the last selection start set by setText(CharSequence, int, int)."
android.view.ViewStructure,abstract boolean hasExtras(), Returns true if getExtras() has been used to create extra content.
android.view.ViewStructure,abstract ViewStructure newChild(int index)," Create a new child ViewStructure in this view, putting into the list of children at index."
android.view.ViewStructure,abstract ViewStructure.HtmlInfo.Builder newHtmlInfoBuilder(String tagName), Creates a new ViewStructure.HtmlInfo.Builder for the given HTML tag.
android.view.ViewStructure,abstract void setAccessibilityFocused(boolean state)," Set the accessibility focused state of this view, as per View.isAccessibilityFocused()."
android.view.ViewStructure,abstract void setActivated(boolean state)," Set the activated state of this view, as per View.isActivated()."
android.view.ViewStructure,abstract void setAlpha(float alpha)," Set an alpha transformation that is applied to this view, as per View.getAlpha()."
android.view.ViewStructure,abstract void setAutofillHints(String[] hint), Sets the a hints that helps the autofill service to select the appropriate data to fill the view.
android.view.ViewStructure,abstract void setAutofillId(AutofillId id), Sets the AutofillId associated with this node.
android.view.ViewStructure,"abstract void setAutofillId(AutofillId parentId, int virtualId)", Sets the AutofillId for this virtual node.
android.view.ViewStructure,abstract void setAutofillOptions(CharSequence[] options), Sets the options that can be used to autofill this node.
android.view.ViewStructure,abstract void setAutofillType(int type), Sets the getAutofillType() that can be used to autofill this node.
android.view.ViewStructure,abstract void setAutofillValue(AutofillValue value), Sets the AutofillValue representing the current value of this node.
android.view.ViewStructure,abstract void setCheckable(boolean state)," Set the checkable state of this view, such as whether it implements the Checkable interface."
android.view.ViewStructure,abstract void setChecked(boolean state)," Set the checked state of this view, such as Checkable.isChecked()."
android.view.ViewStructure,abstract void setChildCount(int num)," Set the number of children of this view, which defines the range of indices you can use with newChild(int) and asyncNewChild(int)."
android.view.ViewStructure,abstract void setClassName(String className)," Set the class name of the view, as per View.getAccessibilityClassName()."
android.view.ViewStructure,abstract void setClickable(boolean state)," Set the clickable state of this view, as per View.isClickable()."
android.view.ViewStructure,abstract void setContentDescription(CharSequence contentDescription)," Set the content description of the view, as per View.getContentDescription()."
android.view.ViewStructure,abstract void setContextClickable(boolean state)," Set the context clickable state of this view, as per View.isContextClickable()."
android.view.ViewStructure,abstract void setDataIsSensitive(boolean sensitive)," Sets whether the data on this node is sensitive; if it is, then its content (text, autofill value, etc..) is striped before calls to onFillRequest(android.service.autofill.FillRequest, android.os.CancellationSignal, android.service.autofill.FillCallback)."
android.view.ViewStructure,"abstract void setDimens(int left, int top, int scrollX, int scrollY, int width, int height)", Set the basic dimensions of this view.
android.view.ViewStructure,abstract void setElevation(float elevation)," Set the visual elevation (shadow) of the view, as per View.getZ()."
android.view.ViewStructure,abstract void setEnabled(boolean state)," Set the enabled state of this view, as per View.isEnabled()."
android.view.ViewStructure,abstract void setFocusable(boolean state)," Set the focusable state of this view, as per View.isFocusable()."
android.view.ViewStructure,abstract void setFocused(boolean state)," Set the focused state of this view, as per View.isFocused()."
android.view.ViewStructure,abstract void setHint(CharSequence hint), Set optional hint text associated with this view; this is for example the text that is shown by an EditText when it is empty to indicate to the user the kind of text to input.
android.view.ViewStructure,abstract void setHtmlInfo(ViewStructure.HtmlInfo htmlInfo), Sets the HTML properties of this node when it represents an HTML element.
android.view.ViewStructure,"abstract void setId(int id, String packageName, String typeName, String entryName)", Set the identifier for this view.
android.view.ViewStructure,abstract void setInputType(int inputType), Sets the InputType bits of this node.
android.view.ViewStructure,abstract void setLocaleList(LocaleList localeList), Sets the the list of locales associated with this node.
android.view.ViewStructure,abstract void setLongClickable(boolean state)," Set the long clickable state of this view, as per View.isLongClickable()."
android.view.ViewStructure,void setMaxTextEms(int maxEms)," Sets the maximum width in ems of the text associated with this view, when supported."
android.view.ViewStructure,void setMaxTextLength(int maxLength)," Sets the maximum length of the text associated with this view, when supported."
android.view.ViewStructure,void setMinTextEms(int minEms)," Sets the minimum width in ems of the text associated with this view, when supported."
android.view.ViewStructure,abstract void setOpaque(boolean opaque)," Set the opaque state of this view, as per View.isOpaque()."
android.view.ViewStructure,abstract void setSelected(boolean state)," Set the selected state of this view, as per View.isSelected()."
android.view.ViewStructure,abstract void setText(CharSequence text), Set the text that is associated with this view.
android.view.ViewStructure,"abstract void setText(CharSequence text, int selectionStart, int selectionEnd)", Like setText(CharSequence) but with an active selection extending from selectionStart through selectionEnd.
android.view.ViewStructure,void setTextIdEntry(String entryName), Sets the identifier used to set the text associated with this view.
android.view.ViewStructure,"abstract void setTextLines(int[] charOffsets, int[] baselines)", Set line information for test that was previously supplied through setText(CharSequence).
android.view.ViewStructure,"abstract void setTextStyle(float size, int fgColor, int bgColor, int style)", Explicitly set default global style information for text that was previously set with setText(CharSequence).
android.view.ViewStructure,abstract void setTransformation(Matrix matrix)," Set the transformation matrix associated with this view, as per View.getMatrix(), or null if there is none."
android.view.ViewStructure,abstract void setVisibility(int visibility)," Set the visibility state of this view, as per View.getVisibility()."
android.view.ViewStructure,abstract void setWebDomain(String domain), Sets the Web domain represented by this node.
android.view.ViewStub.OnInflateListener,"abstract void onInflate(ViewStub stub, View inflated)", Invoked after a ViewStub successfully inflated its layout resource.
android.view.ViewStub,void draw(Canvas canvas), Manually render this view (and all of its children) to the given Canvas.
android.view.ViewStub,int getInflatedId(), Returns the id taken by the inflated view.
android.view.ViewStub,LayoutInflater getLayoutInflater(), Get current LayoutInflater used in inflate().
android.view.ViewStub,int getLayoutResource(), Returns the layout resource that will be used by setVisibility(int) or inflate() to replace this StubbedView in its parent by another view.
android.view.ViewStub,View inflate(), Inflates the layout resource identified by getLayoutResource() and replaces this StubbedView in its parent by the inflated layout resource.
android.view.ViewStub,void setInflatedId(int inflatedId), Defines the id taken by the inflated view.
android.view.ViewStub,void setLayoutInflater(LayoutInflater inflater)," Set LayoutInflater to use in inflate(), or null to use the default."
android.view.ViewStub,void setLayoutResource(int layoutResource), Specifies the layout resource to inflate when this StubbedView becomes visible or invisible or when inflate() is invoked.
android.view.ViewStub,void setOnInflateListener(ViewStub.OnInflateListener inflateListener), Specifies the inflate listener to be notified after this ViewStub successfully inflated its layout resource.
android.view.ViewStub,void setVisibility(int visibility)," When visibility is set to VISIBLE or INVISIBLE, inflate() is invoked and this StubbedView is replaced in its parent by the inflated layout resource."
android.view.ViewTreeObserver.OnDrawListener,abstract void onDraw(), Callback method to be invoked when the view tree is about to be drawn.
android.view.ViewTreeObserver.OnGlobalFocusChangeListener,"abstract void onGlobalFocusChanged(View oldFocus, View newFocus)", Callback method to be invoked when the focus changes in the view tree.
android.view.ViewTreeObserver.OnGlobalLayoutListener,abstract void onGlobalLayout(), Callback method to be invoked when the global layout state or the visibility of views within the view tree changes
android.view.ViewTreeObserver.OnPreDrawListener,abstract boolean onPreDraw(), Callback method to be invoked when the view tree is about to be drawn.
android.view.ViewTreeObserver.OnScrollChangedListener,abstract void onScrollChanged(), Callback method to be invoked when something in the view tree has been scrolled.
android.view.ViewTreeObserver.OnTouchModeChangeListener,abstract void onTouchModeChanged(boolean isInTouchMode), Callback method to be invoked when the touch mode changes.
android.view.ViewTreeObserver.OnWindowAttachListener,abstract void onWindowAttached(), Callback method to be invoked when the view hierarchy is attached to a window
android.view.ViewTreeObserver.OnWindowAttachListener,abstract void onWindowDetached(), Callback method to be invoked when the view hierarchy is detached from a window
android.view.ViewTreeObserver.OnWindowFocusChangeListener,abstract void onWindowFocusChanged(boolean hasFocus), Callback method to be invoked when the window focus changes in the view tree.
android.view.ViewTreeObserver,void addOnDrawListener(ViewTreeObserver.OnDrawListener listener), Register a callback to be invoked when the view tree is about to be drawn.
android.view.ViewTreeObserver,void addOnGlobalFocusChangeListener(ViewTreeObserver.OnGlobalFocusChangeListener listener), Register a callback to be invoked when the focus state within the view tree changes.
android.view.ViewTreeObserver,void addOnGlobalLayoutListener(ViewTreeObserver.OnGlobalLayoutListener listener), Register a callback to be invoked when the global layout state or the visibility of views within the view tree changes
android.view.ViewTreeObserver,void addOnPreDrawListener(ViewTreeObserver.OnPreDrawListener listener), Register a callback to be invoked when the view tree is about to be drawn
android.view.ViewTreeObserver,void addOnScrollChangedListener(ViewTreeObserver.OnScrollChangedListener listener), Register a callback to be invoked when a view has been scrolled.
android.view.ViewTreeObserver,void addOnTouchModeChangeListener(ViewTreeObserver.OnTouchModeChangeListener listener), Register a callback to be invoked when the invoked when the touch mode changes.
android.view.ViewTreeObserver,void addOnWindowAttachListener(ViewTreeObserver.OnWindowAttachListener listener), Register a callback to be invoked when the view hierarchy is attached to a window.
android.view.ViewTreeObserver,void addOnWindowFocusChangeListener(ViewTreeObserver.OnWindowFocusChangeListener listener), Register a callback to be invoked when the window focus state within the view tree changes.
android.view.ViewTreeObserver,void dispatchOnDraw(), Notifies registered listeners that the drawing pass is about to start.
android.view.ViewTreeObserver,void dispatchOnGlobalLayout(), Notifies registered listeners that a global layout happened.
android.view.ViewTreeObserver,boolean dispatchOnPreDraw(), Notifies registered listeners that the drawing pass is about to start.
android.view.ViewTreeObserver,boolean isAlive(), Indicates whether this ViewTreeObserver is alive.
android.view.ViewTreeObserver,void removeGlobalOnLayoutListener(ViewTreeObserver.OnGlobalLayoutListener victim), This method was deprecated in API level 16. Use #removeOnGlobalLayoutListener instead
android.view.ViewTreeObserver,void removeOnDrawListener(ViewTreeObserver.OnDrawListener victim), Remove a previously installed pre-draw callback.
android.view.ViewTreeObserver,void removeOnGlobalFocusChangeListener(ViewTreeObserver.OnGlobalFocusChangeListener victim), Remove a previously installed focus change callback.
android.view.ViewTreeObserver,void removeOnGlobalLayoutListener(ViewTreeObserver.OnGlobalLayoutListener victim), Remove a previously installed global layout callback
android.view.ViewTreeObserver,void removeOnPreDrawListener(ViewTreeObserver.OnPreDrawListener victim), Remove a previously installed pre-draw callback
android.view.ViewTreeObserver,void removeOnScrollChangedListener(ViewTreeObserver.OnScrollChangedListener victim), Remove a previously installed scroll-changed callback
android.view.ViewTreeObserver,void removeOnTouchModeChangeListener(ViewTreeObserver.OnTouchModeChangeListener victim), Remove a previously installed touch mode change callback
android.view.ViewTreeObserver,void removeOnWindowAttachListener(ViewTreeObserver.OnWindowAttachListener victim), Remove a previously installed window attach callback.
android.view.ViewTreeObserver,void removeOnWindowFocusChangeListener(ViewTreeObserver.OnWindowFocusChangeListener victim), Remove a previously installed window focus change callback.
android.webkit.ClientCertRequest,abstract void cancel(), Cancel this request.
android.webkit.ClientCertRequest,abstract String getHost(), Returns the host name of the server requesting the certificate.
android.webkit.ClientCertRequest,abstract String[] getKeyTypes(), Returns the acceptable types of asymmetric keys.
android.webkit.ClientCertRequest,abstract int getPort(), Returns the port number of the server requesting the certificate.
android.webkit.ClientCertRequest,abstract Principal[] getPrincipals(), Returns the acceptable certificate issuers for the certificate matching the private key.
android.webkit.ClientCertRequest,abstract void ignore(), Ignore the request for now.
android.webkit.ClientCertRequest,"abstract void proceed(PrivateKey privateKey, X509Certificate[] chain)", Proceed with the specified private key and client certificate chain.
android.webkit.ConsoleMessage.MessageLevel,static ConsoleMessage.MessageLevel valueOf(String name),
android.webkit.ConsoleMessage.MessageLevel,static final MessageLevel[] values(),
android.webkit.ConsoleMessage,int lineNumber(),
android.webkit.ConsoleMessage,String message(),
android.webkit.ConsoleMessage,ConsoleMessage.MessageLevel messageLevel(),
android.webkit.ConsoleMessage,String sourceId(),
android.webkit.CookieManager,abstract boolean acceptCookie(), Gets whether the application's WebView instances send and accept cookies.
android.webkit.CookieManager,abstract boolean acceptThirdPartyCookies(WebView webview), Gets whether the WebView should allow third party cookies to be set.
android.webkit.CookieManager,static boolean allowFileSchemeCookies(), Gets whether the application's WebView instances send and accept cookies for file scheme URLs.
android.webkit.CookieManager,abstract void flush(), Ensures all cookies currently accessible through the getCookie API are written to persistent storage.
android.webkit.CookieManager,abstract String getCookie(String url), Gets the cookies for the given URL.
android.webkit.CookieManager,static CookieManager getInstance(), Gets the singleton CookieManager instance.
android.webkit.CookieManager,abstract boolean hasCookies(), Gets whether there are stored cookies.
android.webkit.CookieManager,abstract void removeAllCookie(), This method was deprecated in API level 21. Use removeAllCookies(ValueCallback) instead.
android.webkit.CookieManager,abstract void removeAllCookies(ValueCallback<Boolean> callback), Removes all cookies.
android.webkit.CookieManager,abstract void removeExpiredCookie(), This method was deprecated in API level 21. The WebView handles removing expired cookies automatically.
android.webkit.CookieManager,abstract void removeSessionCookie(), This method was deprecated in API level 21. use removeSessionCookies(ValueCallback) instead.
android.webkit.CookieManager,abstract void removeSessionCookies(ValueCallback<Boolean> callback)," Removes all session cookies, which are cookies without an expiration date."
android.webkit.CookieManager,abstract void setAcceptCookie(boolean accept), Sets whether the application's WebView instances should send and accept cookies.
android.webkit.CookieManager,static void setAcceptFileSchemeCookies(boolean accept), Sets whether the application's WebView instances should send and accept cookies for file scheme URLs.
android.webkit.CookieManager,"abstract void setAcceptThirdPartyCookies(WebView webview, boolean accept)", Sets whether the WebView should allow third party cookies to be set.
android.webkit.CookieManager,"abstract void setCookie(String url, String value, ValueCallback<Boolean> callback)", Sets a cookie for the given URL.
android.webkit.CookieManager,"abstract void setCookie(String url, String value)", Sets a cookie for the given URL.
android.webkit.CookieSyncManager,static CookieSyncManager createInstance(Context context), Create a singleton CookieSyncManager within a context
android.webkit.CookieSyncManager,static CookieSyncManager getInstance(), Singleton access to a CookieSyncManager.
android.webkit.CookieSyncManager,void resetSync(), This method was deprecated in API level 27. Calling resetSync is no longer necessary as the WebView automatically syncs cookies.
android.webkit.CookieSyncManager,void run()," When an object implementing interface Runnable is used to create a thread, starting the thread causes the object's run method to be called in that separately executing thread."
android.webkit.CookieSyncManager,void startSync(), This method was deprecated in API level 27. Calling startSync is no longer necessary as the WebView automatically syncs cookies.
android.webkit.CookieSyncManager,void stopSync(), This method was deprecated in API level 27. Calling stopSync is no longer useful as the WebView automatically syncs cookies.
android.webkit.CookieSyncManager,void sync(), This method was deprecated in API level 27. Use flush() instead.
android.webkit.DateSorter,long getBoundary(int index),
android.webkit.DateSorter,int getIndex(long time),
android.webkit.DateSorter,String getLabel(int index),
android.webkit.DownloadListener,"abstract void onDownloadStart(String url, String userAgent, String contentDisposition, String mimetype, long contentLength)", Notify the host application that a file should be downloaded
android.webkit.GeolocationPermissions.Callback,"abstract void invoke(String origin, boolean allow, boolean retain)", Sets the Geolocation permission state for the supplied origin.
android.webkit.GeolocationPermissions,void allow(String origin), Allows the specified origin to use the Geolocation API.
android.webkit.GeolocationPermissions,void clear(String origin), Clears the Geolocation permission state for the specified origin.
android.webkit.GeolocationPermissions,void clearAll(), Clears the Geolocation permission state for all origins.
android.webkit.GeolocationPermissions,"void getAllowed(String origin, ValueCallback<Boolean> callback)", Gets the Geolocation permission state for the specified origin.
android.webkit.GeolocationPermissions,static GeolocationPermissions getInstance(), Gets the singleton instance of this class.
android.webkit.GeolocationPermissions,void getOrigins(ValueCallback<Set<String>> callback), Gets the set of origins for which Geolocation permissions are stored.
android.webkit.HttpAuthHandler,void cancel(), Instructs the WebView to cancel the authentication request.
android.webkit.HttpAuthHandler,"void proceed(String username, String password)", Instructs the WebView to proceed with the authentication with the given credentials.
android.webkit.HttpAuthHandler,boolean useHttpAuthUsernamePassword(), Gets whether the credentials stored for the current host (i.e.
android.webkit.JavascriptInterface,abstract Class<?extendsAnnotation> annotationType(), Returns the annotation type of this annotation.
android.webkit.JavascriptInterface,abstract boolean equals(Object obj), Returns true if the specified object represents an annotation that is logically equivalent to this one.
android.webkit.JavascriptInterface,abstract int hashCode()," Returns the hash code of this annotation, as defined below: The hash code of an annotation is the sum of the hash codes of its members (including those with default values), as defined below: The hash code of an annotation member is (127 times the hash code of the member-name as computed by hashCode()) XOR the hash code of the member-value, as defined below: The hash code of a member-value depends on its type: The hash code of a primitive value v is equal to WrapperType.valueOf(v).hashCode(), where WrapperType is the wrapper type corresponding to the primitive type of v (Byte, Character, Double, Float, Integer, Long, Short, or Boolean)."
android.webkit.JavascriptInterface,abstract String toString(), Returns a string representation of this annotation.
android.webkit.JsPromptResult,void confirm(String result), Handle a confirmation response from the user.
android.webkit.JsResult,final void cancel(), Handle the result if the user cancelled the dialog.
android.webkit.JsResult,final void confirm(), Handle a confirmation response from the user.
android.webkit.MimeTypeMap,String getExtensionFromMimeType(String mimeType), Return the registered extension for the given MIME type.
android.webkit.MimeTypeMap,static String getFileExtensionFromUrl(String url), Returns the file extension or an empty string if there is no extension.
android.webkit.MimeTypeMap,String getMimeTypeFromExtension(String extension), Return the MIME type for the given extension.
android.webkit.MimeTypeMap,static MimeTypeMap getSingleton(), Get the singleton instance of MimeTypeMap.
android.webkit.MimeTypeMap,boolean hasExtension(String extension), Return true if the given extension has a registered MIME type.
android.webkit.MimeTypeMap,boolean hasMimeType(String mimeType), Return true if the given MIME type has an entry in the map.
android.webkit.PermissionRequest,abstract void deny(), Call this method to deny the request.
android.webkit.PermissionRequest,abstract Uri getOrigin(), Call this method to get the origin of the web page which is trying to access the restricted resources.
android.webkit.PermissionRequest,abstract String[] getResources(), Call this method to get the resources the web page is trying to access.
android.webkit.PermissionRequest,abstract void grant(String[] resources), Call this method to grant origin the permission to access the given resources.
android.webkit.PluginStub,"abstract View getEmbeddedView(int NPP, Context context)", Return a custom embedded view to draw the plugin.
android.webkit.PluginStub,"abstract View getFullScreenView(int NPP, Context context)", Return a custom full-screen view to be displayed when the user requests a plugin display as full-screen.
android.webkit.RenderProcessGoneDetail,abstract boolean didCrash()," Indicates whether the render process was observed to crash, or whether it was killed by the system."
android.webkit.RenderProcessGoneDetail,abstract int rendererPriorityAtExit(), Returns the renderer priority that was set at the time that the renderer exited.
android.webkit.SafeBrowsingResponse,abstract void backToSafety(boolean report)," Act as if the user clicked ""back to safety."""
android.webkit.SafeBrowsingResponse,abstract void proceed(boolean report)," Act as if the user clicked ""visit this unsafe site."""
android.webkit.SafeBrowsingResponse,abstract void showInterstitial(boolean allowReporting), Display the default interstitial.
android.webkit.ServiceWorkerClient,WebResourceResponse shouldInterceptRequest(WebResourceRequest request), Notify the host application of a resource request and allow the application to return the data.
android.webkit.ServiceWorkerController,static ServiceWorkerController getInstance(), Returns the default ServiceWorkerController instance.
android.webkit.ServiceWorkerController,abstract ServiceWorkerWebSettings getServiceWorkerWebSettings(), Gets the settings for all service workers.
android.webkit.ServiceWorkerController,abstract void setServiceWorkerClient(ServiceWorkerClient client), Sets the client to capture service worker related callbacks.
android.webkit.ServiceWorkerWebSettings,abstract boolean getAllowContentAccess(), Gets whether Service Workers support content URL access.
android.webkit.ServiceWorkerWebSettings,abstract boolean getAllowFileAccess(), Gets whether Service Workers support file access.
android.webkit.ServiceWorkerWebSettings,abstract boolean getBlockNetworkLoads(), Gets whether Service Workers are prohibited from loading any resources from the network.
android.webkit.ServiceWorkerWebSettings,abstract int getCacheMode(), Gets the current setting for overriding the cache mode.
android.webkit.ServiceWorkerWebSettings,abstract void setAllowContentAccess(boolean allow)," Enables or disables content URL access from Service Workers, see setAllowContentAccess(boolean)."
android.webkit.ServiceWorkerWebSettings,abstract void setAllowFileAccess(boolean allow)," Enables or disables file access within Service Workers, see setAllowFileAccess(boolean)."
android.webkit.ServiceWorkerWebSettings,abstract void setBlockNetworkLoads(boolean flag)," Sets whether Service Workers should not load resources from the network, see setBlockNetworkLoads(boolean)."
android.webkit.ServiceWorkerWebSettings,abstract void setCacheMode(int mode)," Overrides the way the cache is used, see setCacheMode(int)."
android.webkit.SslErrorHandler,void cancel(), Cancel this request and all pending requests for the WebView that had the error.
android.webkit.SslErrorHandler,void proceed(), Proceed with the SSL certificate.
android.webkit.TracingConfig,String getCustomCategoryPattern(), Returns the custom category pattern for this configuration.
android.webkit.TracingConfig,int getPresetCategories(), Returns the preset categories value of this configuration.
android.webkit.TracingConfig,int getTracingMode(), Returns the tracing mode of this configuration.
android.webkit.TracingController.TracingOutputStream,abstract void complete(), Called when tracing is finished and the data collection is over.
android.webkit.TracingController.TracingOutputStream,abstract void write(byte[] chunk), Will be called to return tracing data in chunks.
android.webkit.TracingController,static TracingController getInstance(), Returns the default TracingController instance.
android.webkit.TracingController,abstract boolean isTracing(), True if the system is tracing
android.webkit.TracingController,abstract boolean start(TracingConfig tracingConfig), Starts tracing all webviews.
android.webkit.TracingController,abstract boolean stop(), Stops tracing and discards all tracing data.
android.webkit.TracingController,"abstract boolean stopAndFlush(TracingController.TracingOutputStream outputStream, Handler handler)", Stops tracing and flushes tracing data to the specifid outputStream.
android.webkit.TracingFileOutputStream,void complete(), Closes the file.
android.webkit.TracingFileOutputStream,void write(byte[] chunk), Writes bytes chunk to the file.
android.webkit.URLUtil,"static String composeSearchUrl(String inQuery, String template, String queryPlaceHolder)",
android.webkit.URLUtil,static byte[] decode(byte[] url),
android.webkit.URLUtil,"static String guessFileName(String url, String contentDisposition, String mimeType)"," Guesses canonical filename that a download would have, using the URL and contentDisposition."
android.webkit.URLUtil,static String guessUrl(String inUrl), Cleans up (if possible) user-entered web addresses
android.webkit.URLUtil,static boolean isAboutUrl(String url),
android.webkit.URLUtil,static boolean isAssetUrl(String url),
android.webkit.URLUtil,static boolean isContentUrl(String url),
android.webkit.URLUtil,static boolean isCookielessProxyUrl(String url), This method was deprecated in API level 3. Cookieless proxy is no longer supported.
android.webkit.URLUtil,static boolean isDataUrl(String url),
android.webkit.URLUtil,static boolean isFileUrl(String url),
android.webkit.URLUtil,static boolean isHttpUrl(String url),
android.webkit.URLUtil,static boolean isHttpsUrl(String url),
android.webkit.URLUtil,static boolean isJavaScriptUrl(String url),
android.webkit.URLUtil,static boolean isNetworkUrl(String url),
android.webkit.URLUtil,static boolean isValidUrl(String url),
android.webkit.URLUtil,static String stripAnchor(String url), Strips the url of the anchor.
android.webkit.ValueCallback,abstract void onReceiveValue(T value), Invoked when the value is available.
android.webkit.WebBackForwardList,abstract int getCurrentIndex(), Get the index of the current history item.
android.webkit.WebBackForwardList,abstract WebHistoryItem getCurrentItem(), Return the current history item.
android.webkit.WebBackForwardList,abstract WebHistoryItem getItemAtIndex(int index), Get the history item at the given index.
android.webkit.WebBackForwardList,abstract int getSize(), Get the total size of the back/forward list.
android.webkit.WebChromeClient.CustomViewCallback,abstract void onCustomViewHidden(), Invoked when the host application dismisses the custom view.
android.webkit.WebChromeClient.FileChooserParams,abstract Intent createIntent(), Creates an intent that would start a file picker for file selection.
android.webkit.WebChromeClient.FileChooserParams,abstract String[] getAcceptTypes(), Returns an array of acceptable MIME types.
android.webkit.WebChromeClient.FileChooserParams,abstract String getFilenameHint()," The file name of a default selection if specified, or null."
android.webkit.WebChromeClient.FileChooserParams,abstract int getMode(), Returns file chooser mode.
android.webkit.WebChromeClient.FileChooserParams,abstract CharSequence getTitle(), Returns the title to use for this file selector.
android.webkit.WebChromeClient.FileChooserParams,abstract boolean isCaptureEnabled(), Returns preference for a live media captured value (e.g.
android.webkit.WebChromeClient.FileChooserParams,"static Uri[] parseResult(int resultCode, Intent data)", Parse the result returned by the file picker activity.
android.webkit.WebChromeClient,Bitmap getDefaultVideoPoster()," When not playing, video elements are represented by a 'poster' image."
android.webkit.WebChromeClient,View getVideoLoadingProgressView(), Obtains a View to be displayed while buffering of full screen video is taking place.
android.webkit.WebChromeClient,void getVisitedHistory(ValueCallback<String[]> callback)," Obtains a list of all visited history items, used for link coloring"
android.webkit.WebChromeClient,void onCloseWindow(WebView window), Notify the host application to close the given WebView and remove it from the view system if necessary.
android.webkit.WebChromeClient,boolean onConsoleMessage(ConsoleMessage consoleMessage), Report a JavaScript console message to the host application.
android.webkit.WebChromeClient,"void onConsoleMessage(String message, int lineNumber, String sourceID)", This method was deprecated in API level 8. Use onConsoleMessage(ConsoleMessage) instead.
android.webkit.WebChromeClient,"boolean onCreateWindow(WebView view, boolean isDialog, boolean isUserGesture, Message resultMsg)", Request the host application to create a new window.
android.webkit.WebChromeClient,"void onExceededDatabaseQuota(String url, String databaseIdentifier, long quota, long estimatedDatabaseSize, long totalQuota, WebStorage.QuotaUpdater quotaUpdater)", This method was deprecated in API level 19. This method is no longer called; WebView now uses the HTML5 / JavaScript Quota Management API.
android.webkit.WebChromeClient,void onGeolocationPermissionsHidePrompt()," Notify the host application that a request for Geolocation permissions, made with a previous call to onGeolocationPermissionsShowPrompt() has been canceled."
android.webkit.WebChromeClient,"void onGeolocationPermissionsShowPrompt(String origin, GeolocationPermissions.Callback callback)"," Notify the host application that web content from the specified origin is attempting to use the Geolocation API, but no permission state is currently set for that origin."
android.webkit.WebChromeClient,void onHideCustomView(), Notify the host application that the current page has exited full screen mode.
android.webkit.WebChromeClient,"boolean onJsAlert(WebView view, String url, String message, JsResult result)", Tell the client to display a javascript alert dialog.
android.webkit.WebChromeClient,"boolean onJsBeforeUnload(WebView view, String url, String message, JsResult result)", Tell the client to display a dialog to confirm navigation away from the current page.
android.webkit.WebChromeClient,"boolean onJsConfirm(WebView view, String url, String message, JsResult result)", Tell the client to display a confirm dialog to the user.
android.webkit.WebChromeClient,"boolean onJsPrompt(WebView view, String url, String message, String defaultValue, JsPromptResult result)", Tell the client to display a prompt dialog to the user.
android.webkit.WebChromeClient,boolean onJsTimeout(), This method was deprecated in API level 17. This method is no longer supported and will not be invoked.
android.webkit.WebChromeClient,void onPermissionRequest(PermissionRequest request), Notify the host application that web content is requesting permission to access the specified resources and the permission currently isn't granted or denied.
android.webkit.WebChromeClient,void onPermissionRequestCanceled(PermissionRequest request), Notify the host application that the given permission request has been canceled.
android.webkit.WebChromeClient,"void onProgressChanged(WebView view, int newProgress)", Tell the host application the current progress of loading a page.
android.webkit.WebChromeClient,"void onReachedMaxAppCacheSize(long requiredStorage, long quota, WebStorage.QuotaUpdater quotaUpdater)", This method was deprecated in API level 19. This method is no longer called; WebView now uses the HTML5 / JavaScript Quota Management API.
android.webkit.WebChromeClient,"void onReceivedIcon(WebView view, Bitmap icon)", Notify the host application of a new favicon for the current page.
android.webkit.WebChromeClient,"void onReceivedTitle(WebView view, String title)", Notify the host application of a change in the document title.
android.webkit.WebChromeClient,"void onReceivedTouchIconUrl(WebView view, String url, boolean precomposed)", Notify the host application of the url for an apple-touch-icon.
android.webkit.WebChromeClient,void onRequestFocus(WebView view), Request display and focus for this WebView.
android.webkit.WebChromeClient,"void onShowCustomView(View view, int requestedOrientation, WebChromeClient.CustomViewCallback callback)"," This method was deprecated in API level 18. This method supports the obsolete plugin mechanism, and will not be invoked in future"
android.webkit.WebChromeClient,"void onShowCustomView(View view, WebChromeClient.CustomViewCallback callback)", Notify the host application that the current page has entered full screen mode.
android.webkit.WebChromeClient,"boolean onShowFileChooser(WebView webView, ValueCallback<Uri[]> filePathCallback, WebChromeClient.FileChooserParams fileChooserParams)", Tell the client to show a file chooser.
android.webkit.WebHistoryItem,abstract Bitmap getFavicon(), Return the favicon of this history item or null if no favicon was found.
android.webkit.WebHistoryItem,abstract String getOriginalUrl(), Return the original url of this history item.
android.webkit.WebHistoryItem,abstract String getTitle(), Return the document title of this history item.
android.webkit.WebHistoryItem,abstract String getUrl(), Return the url of this history item.
android.webkit.WebIconDatabase.IconListener,"abstract void onReceivedIcon(String url, Bitmap icon)", Called when the icon has been retrieved from the database and the result is non-null.
android.webkit.WebIconDatabase,abstract void close(), Close the shared instance of the icon database.
android.webkit.WebIconDatabase,static WebIconDatabase getInstance(), Get the global instance of WebIconDatabase.
android.webkit.WebIconDatabase,abstract void open(String path), Open a the icon database and store the icons in the given path.
android.webkit.WebIconDatabase,abstract void releaseIconForPageUrl(String url), Release the icon for the given page url.
android.webkit.WebIconDatabase,abstract void removeAllIcons(), Removes all the icons in the database.
android.webkit.WebIconDatabase,"abstract void requestIconForPageUrl(String url, WebIconDatabase.IconListener listener)", Request the Bitmap representing the icon for the given page url.
android.webkit.WebIconDatabase,abstract void retainIconForPageUrl(String url), Retain the icon for the given page url.
android.webkit.WebMessage,String getData(), Returns the data of the message.
android.webkit.WebMessage,WebMessagePort[] getPorts()," Returns the ports that are sent with the message, or null if no port is sent."
android.webkit.WebMessagePort,abstract void close(), Close the message port and free any resources associated with it.
android.webkit.WebMessagePort,abstract void postMessage(WebMessage message), Post a WebMessage to the entangled port.
android.webkit.WebMessagePort,"abstract void setWebMessageCallback(WebMessagePort.WebMessageCallback callback, Handler handler)", Sets a callback to receive message events on the handler that is provided by the application.
android.webkit.WebMessagePort,abstract void setWebMessageCallback(WebMessagePort.WebMessageCallback callback), Sets a callback to receive message events on the main thread.
android.webkit.WebMessagePort.WebMessageCallback,"void onMessage(WebMessagePort port, WebMessage message)", Message callback for receiving onMessage events.
android.webkit.WebResourceError,abstract CharSequence getDescription(), Gets the string describing the error.
android.webkit.WebResourceError,abstract int getErrorCode(), Gets the error code of the error.
android.webkit.WebResourceRequest,abstract String getMethod()," Gets the method associated with the request, for example ""GET""."
android.webkit.WebResourceRequest,"abstract Map<String,String> getRequestHeaders()", Gets the headers associated with the request.
android.webkit.WebResourceRequest,abstract Uri getUrl(), Gets the URL for which the resource request was made.
android.webkit.WebResourceRequest,abstract boolean hasGesture(), Gets whether a gesture (such as a click) was associated with the request.
android.webkit.WebResourceRequest,abstract boolean isForMainFrame(), Gets whether the request was made for the main frame.
android.webkit.WebResourceRequest,abstract boolean isRedirect(), Gets whether the request was a result of a server-side redirect.
android.webkit.WebResourceResponse,InputStream getData(), Gets the input stream that provides the resource response's data.
android.webkit.WebResourceResponse,String getEncoding(), Gets the resource response's encoding.
android.webkit.WebResourceResponse,String getMimeType(), Gets the resource response's MIME type.
android.webkit.WebResourceResponse,String getReasonPhrase(), Gets the description of the resource response's status code.
android.webkit.WebResourceResponse,"Map<String,String> getResponseHeaders()", Gets the headers for the resource response.
android.webkit.WebResourceResponse,int getStatusCode(), Gets the resource response's status code.
android.webkit.WebResourceResponse,void setData(InputStream data), Sets the input stream that provides the resource response's data.
android.webkit.WebResourceResponse,void setEncoding(String encoding)," Sets the resource response's encoding, for example ""UTF-8""."
android.webkit.WebResourceResponse,void setMimeType(String mimeType)," Sets the resource response's MIME type, for example ""text/html""."
android.webkit.WebResourceResponse,"void setResponseHeaders(Map<String,String> headers)", Sets the headers for the resource response.
android.webkit.WebResourceResponse,"void setStatusCodeAndReasonPhrase(int statusCode, String reasonPhrase)", Sets the resource response's status code and reason phrase.
android.webkit.WebSettings.LayoutAlgorithm,static WebSettings.LayoutAlgorithm valueOf(String name),
android.webkit.WebSettings.LayoutAlgorithm,static final LayoutAlgorithm[] values(),
android.webkit.WebSettings.PluginState,static WebSettings.PluginState valueOf(String name),
android.webkit.WebSettings.PluginState,static final PluginState[] values(),
android.webkit.WebSettings.RenderPriority,static WebSettings.RenderPriority valueOf(String name),
android.webkit.WebSettings.RenderPriority,static final RenderPriority[] values(),
android.webkit.WebSettings.TextSize,static WebSettings.TextSize valueOf(String name),
android.webkit.WebSettings.TextSize,static final TextSize[] values(),
android.webkit.WebSettings,abstract boolean enableSmoothTransition()," This method was deprecated in API level 17. This method is now obsolete, and will become a no-op in future."
android.webkit.WebSettings,abstract boolean getAllowContentAccess(), Gets whether this WebView supports content URL access.
android.webkit.WebSettings,abstract boolean getAllowFileAccess(), Gets whether this WebView supports file access.
android.webkit.WebSettings,abstract boolean getAllowFileAccessFromFileURLs(), Gets whether JavaScript running in the context of a file scheme URL can access content from other file scheme URLs.
android.webkit.WebSettings,abstract boolean getAllowUniversalAccessFromFileURLs(), Gets whether JavaScript running in the context of a file scheme URL can access content from any origin.
android.webkit.WebSettings,abstract boolean getBlockNetworkImage(), Gets whether the WebView does not load image resources from the network.
android.webkit.WebSettings,abstract boolean getBlockNetworkLoads(), Gets whether the WebView does not load any resources from the network.
android.webkit.WebSettings,abstract boolean getBuiltInZoomControls(), Gets whether the zoom mechanisms built into WebView are being used.
android.webkit.WebSettings,abstract int getCacheMode(), Gets the current setting for overriding the cache mode.
android.webkit.WebSettings,abstract String getCursiveFontFamily(), Gets the cursive font family name.
android.webkit.WebSettings,abstract boolean getDatabaseEnabled(), Gets whether the database storage API is enabled.
android.webkit.WebSettings,abstract String getDatabasePath(), This method was deprecated in API level 19. Database paths are managed by the implementation this method is obsolete.
android.webkit.WebSettings,abstract int getDefaultFixedFontSize(), Gets the default fixed font size.
android.webkit.WebSettings,abstract int getDefaultFontSize(), Gets the default font size.
android.webkit.WebSettings,abstract String getDefaultTextEncodingName(), Gets the default text encoding name.
android.webkit.WebSettings,static String getDefaultUserAgent(Context context), Returns the default User-Agent used by a WebView.
android.webkit.WebSettings,abstract WebSettings.ZoomDensity getDefaultZoom(), This method was deprecated in API level 19. Will only return the default value.
android.webkit.WebSettings,abstract int getDisabledActionModeMenuItems()," Gets the action mode menu items that are disabled, expressed in an integer field flag."
android.webkit.WebSettings,abstract boolean getDisplayZoomControls(), Gets whether the WebView displays on-screen zoom controls when using the built-in zoom mechanisms.
android.webkit.WebSettings,abstract boolean getDomStorageEnabled(), Gets whether the DOM Storage APIs are enabled.
android.webkit.WebSettings,abstract String getFantasyFontFamily(), Gets the fantasy font family name.
android.webkit.WebSettings,abstract String getFixedFontFamily(), Gets the fixed font family name.
android.webkit.WebSettings,abstract boolean getJavaScriptCanOpenWindowsAutomatically(), Gets whether JavaScript can open windows automatically.
android.webkit.WebSettings,abstract boolean getJavaScriptEnabled(), Gets whether JavaScript is enabled.
android.webkit.WebSettings,abstract WebSettings.LayoutAlgorithm getLayoutAlgorithm(), Gets the current layout algorithm.
android.webkit.WebSettings,abstract boolean getLightTouchEnabled(), This method was deprecated in API level 18. This setting is obsolete.
android.webkit.WebSettings,abstract boolean getLoadWithOverviewMode(), Gets whether this WebView loads pages in overview mode.
android.webkit.WebSettings,abstract boolean getLoadsImagesAutomatically(), Gets whether the WebView loads image resources.
android.webkit.WebSettings,abstract boolean getMediaPlaybackRequiresUserGesture(), Gets whether the WebView requires a user gesture to play media.
android.webkit.WebSettings,abstract int getMinimumFontSize(), Gets the minimum font size.
android.webkit.WebSettings,abstract int getMinimumLogicalFontSize(), Gets the minimum logical font size.
android.webkit.WebSettings,abstract int getMixedContentMode(), Gets the current behavior of the WebView with regard to loading insecure content from a secure origin.
android.webkit.WebSettings,abstract boolean getOffscreenPreRaster(), Gets whether this WebView should raster tiles when it is offscreen but attached to a window.
android.webkit.WebSettings,abstract WebSettings.PluginState getPluginState()," This method was deprecated in API level 18. Plugins will not be supported in future, and should not be used."
android.webkit.WebSettings,abstract boolean getSafeBrowsingEnabled(), Gets whether Safe Browsing is enabled.
android.webkit.WebSettings,abstract String getSansSerifFontFamily(), Gets the sans-serif font family name.
android.webkit.WebSettings,abstract boolean getSaveFormData(), Gets whether the WebView saves form data.
android.webkit.WebSettings,abstract boolean getSavePassword(), This method was deprecated in API level 18. Saving passwords in WebView will not be supported in future versions.
android.webkit.WebSettings,abstract String getSerifFontFamily(), Gets the serif font family name.
android.webkit.WebSettings,abstract String getStandardFontFamily(), Gets the standard font family name.
android.webkit.WebSettings,WebSettings.TextSize getTextSize(), This method was deprecated in API level 14. Use getTextZoom() instead.
android.webkit.WebSettings,abstract int getTextZoom(), Gets the text zoom of the page in percent.
android.webkit.WebSettings,abstract boolean getUseWideViewPort()," Gets whether the WebView supports the ""viewport"" HTML meta tag or will use a wide viewport."
android.webkit.WebSettings,abstract String getUserAgentString(), Gets the WebView's user-agent string.
android.webkit.WebSettings,abstract void setAllowContentAccess(boolean allow), Enables or disables content URL access within WebView.
android.webkit.WebSettings,abstract void setAllowFileAccess(boolean allow), Enables or disables file access within WebView.
android.webkit.WebSettings,abstract void setAllowFileAccessFromFileURLs(boolean flag), Sets whether JavaScript running in the context of a file scheme URL should be allowed to access content from other file scheme URLs.
android.webkit.WebSettings,abstract void setAllowUniversalAccessFromFileURLs(boolean flag), Sets whether JavaScript running in the context of a file scheme URL should be allowed to access content from any origin.
android.webkit.WebSettings,abstract void setAppCacheEnabled(boolean flag), Sets whether the Application Caches API should be enabled.
android.webkit.WebSettings,abstract void setAppCacheMaxSize(long appCacheMaxSize), This method was deprecated in API level 18. In future quota will be managed automatically.
android.webkit.WebSettings,abstract void setAppCachePath(String appCachePath), Sets the path to the Application Caches files.
android.webkit.WebSettings,abstract void setBlockNetworkImage(boolean flag), Sets whether the WebView should not load image resources from the network (resources accessed via http and https URI schemes).
android.webkit.WebSettings,abstract void setBlockNetworkLoads(boolean flag), Sets whether the WebView should not load resources from the network.
android.webkit.WebSettings,abstract void setBuiltInZoomControls(boolean enabled), Sets whether the WebView should use its built-in zoom mechanisms.
android.webkit.WebSettings,abstract void setCacheMode(int mode), Overrides the way the cache is used.
android.webkit.WebSettings,abstract void setCursiveFontFamily(String font), Sets the cursive font family name.
android.webkit.WebSettings,abstract void setDatabaseEnabled(boolean flag), Sets whether the database storage API is enabled.
android.webkit.WebSettings,abstract void setDatabasePath(String databasePath), This method was deprecated in API level 19. Database paths are managed by the implementation and calling this method will have no effect.
android.webkit.WebSettings,abstract void setDefaultFixedFontSize(int size), Sets the default fixed font size.
android.webkit.WebSettings,abstract void setDefaultFontSize(int size), Sets the default font size.
android.webkit.WebSettings,abstract void setDefaultTextEncodingName(String encoding), Sets the default text encoding name to use when decoding html pages.
android.webkit.WebSettings,abstract void setDefaultZoom(WebSettings.ZoomDensity zoom)," This method was deprecated in API level 19. This method is no longer supported, see the function documentation for recommended alternatives."
android.webkit.WebSettings,abstract void setDisabledActionModeMenuItems(int menuItems), Disables the action mode menu items according to menuItems flag.
android.webkit.WebSettings,abstract void setDisplayZoomControls(boolean enabled), Sets whether the WebView should display on-screen zoom controls when using the built-in zoom mechanisms.
android.webkit.WebSettings,abstract void setDomStorageEnabled(boolean flag), Sets whether the DOM storage API is enabled.
android.webkit.WebSettings,abstract void setEnableSmoothTransition(boolean enable)," This method was deprecated in API level 17. This method is now obsolete, and will become a no-op in future."
android.webkit.WebSettings,abstract void setFantasyFontFamily(String font), Sets the fantasy font family name.
android.webkit.WebSettings,abstract void setFixedFontFamily(String font), Sets the fixed font family name.
android.webkit.WebSettings,abstract void setGeolocationDatabasePath(String databasePath), This method was deprecated in API level 24. Geolocation database are managed by the implementation and calling this method will have no effect.
android.webkit.WebSettings,abstract void setGeolocationEnabled(boolean flag), Sets whether Geolocation is enabled.
android.webkit.WebSettings,abstract void setJavaScriptCanOpenWindowsAutomatically(boolean flag), Tells JavaScript to open windows automatically.
android.webkit.WebSettings,abstract void setJavaScriptEnabled(boolean flag), Tells the WebView to enable JavaScript execution.
android.webkit.WebSettings,abstract void setLayoutAlgorithm(WebSettings.LayoutAlgorithm l), Sets the underlying layout algorithm.
android.webkit.WebSettings,abstract void setLightTouchEnabled(boolean enabled), This method was deprecated in API level 18. From JELLY_BEAN this setting is obsolete and has no effect.
android.webkit.WebSettings,abstract void setLoadWithOverviewMode(boolean overview)," Sets whether the WebView loads pages in overview mode, that is, zooms out the content to fit on screen by width."
android.webkit.WebSettings,abstract void setLoadsImagesAutomatically(boolean flag), Sets whether the WebView should load image resources.
android.webkit.WebSettings,abstract void setMediaPlaybackRequiresUserGesture(boolean require), Sets whether the WebView requires a user gesture to play media.
android.webkit.WebSettings,abstract void setMinimumFontSize(int size), Sets the minimum font size.
android.webkit.WebSettings,abstract void setMinimumLogicalFontSize(int size), Sets the minimum logical font size.
android.webkit.WebSettings,abstract void setMixedContentMode(int mode), Configures the WebView's behavior when a secure origin attempts to load a resource from an insecure origin.
android.webkit.WebSettings,abstract void setNeedInitialFocus(boolean flag)," Tells the WebView whether it needs to set a node to have focus when requestFocus(int, android.graphics.Rect) is called."
android.webkit.WebSettings,abstract void setOffscreenPreRaster(boolean enabled), Sets whether this WebView should raster tiles when it is offscreen but attached to a window.
android.webkit.WebSettings,abstract void setPluginState(WebSettings.PluginState state)," This method was deprecated in API level 18. Plugins will not be supported in future, and should not be used."
android.webkit.WebSettings,abstract void setRenderPriority(WebSettings.RenderPriority priority)," This method was deprecated in API level 18. It is not recommended to adjust thread priorities, and this will not be supported in future versions."
android.webkit.WebSettings,abstract void setSafeBrowsingEnabled(boolean enabled), Sets whether Safe Browsing is enabled.
android.webkit.WebSettings,abstract void setSansSerifFontFamily(String font), Sets the sans-serif font family name.
android.webkit.WebSettings,abstract void setSaveFormData(boolean save), Sets whether the WebView should save form data.
android.webkit.WebSettings,abstract void setSavePassword(boolean save), This method was deprecated in API level 18. Saving passwords in WebView will not be supported in future versions.
android.webkit.WebSettings,abstract void setSerifFontFamily(String font), Sets the serif font family name.
android.webkit.WebSettings,abstract void setStandardFontFamily(String font), Sets the standard font family name.
android.webkit.WebSettings,abstract void setSupportMultipleWindows(boolean support), Sets whether the WebView whether supports multiple windows.
android.webkit.WebSettings,abstract void setSupportZoom(boolean support), Sets whether the WebView should support zooming using its on-screen zoom controls and gestures.
android.webkit.WebSettings,void setTextSize(WebSettings.TextSize t), This method was deprecated in API level 14. Use setTextZoom(int) instead.
android.webkit.WebSettings,abstract void setTextZoom(int textZoom), Sets the text zoom of the page in percent.
android.webkit.WebSettings,abstract void setUseWideViewPort(boolean use)," Sets whether the WebView should enable support for the ""viewport"" HTML meta tag or should use a wide viewport."
android.webkit.WebSettings,abstract void setUserAgentString(String ua), Sets the WebView's user-agent string.
android.webkit.WebSettings,abstract boolean supportMultipleWindows(), Gets whether the WebView supports multiple windows.
android.webkit.WebSettings,abstract boolean supportZoom(), Gets whether the WebView supports zoom.
android.webkit.WebSettings.ZoomDensity,static WebSettings.ZoomDensity valueOf(String name),
android.webkit.WebSettings.ZoomDensity,static final ZoomDensity[] values(),
android.webkit.WebStorage.Origin,String getOrigin(), Gets the string representation of this origin.
android.webkit.WebStorage.Origin,long getQuota()," Gets the quota for this origin, for the Web SQL Database API, in bytes."
android.webkit.WebStorage.Origin,long getUsage()," Gets the total amount of storage currently being used by this origin, for all JavaScript storage APIs, in bytes."
android.webkit.WebStorage.QuotaUpdater,abstract void updateQuota(long newQuota)," Provides a new quota, specified in bytes."
android.webkit.WebStorage,void deleteAllData(), Clears all storage currently being used by the JavaScript storage APIs.
android.webkit.WebStorage,void deleteOrigin(String origin), Clears the storage currently being used by both the Application Cache and Web SQL Database APIs by the given origin.
android.webkit.WebStorage,static WebStorage getInstance(), Gets the singleton instance of this class.
android.webkit.WebStorage,void getOrigins(ValueCallback<Map> callback), Gets the origins currently using either the Application Cache or Web SQL Database APIs.
android.webkit.WebStorage,"void getQuotaForOrigin(String origin, ValueCallback<Long> callback)", Gets the storage quota for the Web SQL Database API for the given origin.
android.webkit.WebStorage,"void getUsageForOrigin(String origin, ValueCallback<Long> callback)", Gets the amount of storage currently being used by both the Application Cache and Web SQL Database APIs by the given origin.
android.webkit.WebStorage,"void setQuotaForOrigin(String origin, long quota)", This method was deprecated in API level 18. Controlling quota per-origin will not be supported in future.
android.webkit.WebView.FindListener,"abstract void onFindResultReceived(int activeMatchOrdinal, int numberOfMatches, boolean isDoneCounting)", Notifies the listener about progress made by a find operation.
android.webkit.WebView.HitTestResult,String getExtra(), Gets additional type-dependant information about the result.
android.webkit.WebView.HitTestResult,int getType(), Gets the type of the hit test result.
android.webkit.WebView.PictureListener,"abstract void onNewPicture(WebView view, Picture picture)", This method was deprecated in API level 12. Deprecated due to internal changes.
android.webkit.WebView,"void addJavascriptInterface(Object object, String name)", Injects the supplied Java object into this WebView.
android.webkit.WebView,void autofill(SparseArray<AutofillValue> values), Automatically fills the content of the virtual children within this view.
android.webkit.WebView,boolean canGoBack(), Gets whether this WebView has a back history item.
android.webkit.WebView,boolean canGoBackOrForward(int steps), Gets whether the page can go back or forward the given number of steps.
android.webkit.WebView,boolean canGoForward(), Gets whether this WebView has a forward history item.
android.webkit.WebView,boolean canZoomIn()," This method was deprecated in API level 17. This method is prone to inaccuracy due to race conditions between the web rendering and UI threads; prefer onScaleChanged(WebView, float, float)."
android.webkit.WebView,boolean canZoomOut()," This method was deprecated in API level 17. This method is prone to inaccuracy due to race conditions between the web rendering and UI threads; prefer onScaleChanged(WebView, float, float)."
android.webkit.WebView,Picture capturePicture()," This method was deprecated in API level 19. Use onDraw(Canvas) to obtain a bitmap snapshot of the WebView, or saveWebArchive(String) to save the content to a file."
android.webkit.WebView,void clearCache(boolean includeDiskFiles), Clears the resource cache.
android.webkit.WebView,static void clearClientCertPreferences(Runnable onCleared), Clears the client certificate preferences stored in response to proceeding/cancelling client cert requests.
android.webkit.WebView,void clearFormData()," Removes the autocomplete popup from the currently focused form field, if present."
android.webkit.WebView,void clearHistory(), Tells this WebView to clear its internal back/forward list.
android.webkit.WebView,void clearMatches(), Clears the highlighting surrounding text matches created by findAllAsync(String).
android.webkit.WebView,void clearSslPreferences(), Clears the SSL preferences table stored in response to proceeding with SSL certificate errors.
android.webkit.WebView,void clearView()," This method was deprecated in API level 18. Use WebView.loadUrl(""about:blank"") to reliably reset the view state and release page resources (including any running JavaScript)."
android.webkit.WebView,void computeScroll(), Called by a parent to request that a child update its values for mScrollX and mScrollY if necessary.
android.webkit.WebView,WebBackForwardList copyBackForwardList(), Gets the WebBackForwardList for this WebView.
android.webkit.WebView,PrintDocumentAdapter createPrintDocumentAdapter(String documentName), Creates a PrintDocumentAdapter that provides the content of this WebView for printing.
android.webkit.WebView,PrintDocumentAdapter createPrintDocumentAdapter(), This method was deprecated in API level 21. Use createPrintDocumentAdapter(String) which requires user to provide a print document name.
android.webkit.WebView,WebMessagePort[] createWebMessageChannel(), Creates a message channel to communicate with JS and returns the message ports that represent the endpoints of this message channel.
android.webkit.WebView,void destroy(), Destroys the internal state of this WebView.
android.webkit.WebView,static void disableWebView()," Indicate that the current process does not intend to use WebView, and that an exception should be thrown if a WebView is created or any other methods in the android.webkit package are used."
android.webkit.WebView,boolean dispatchKeyEvent(KeyEvent event), Dispatch a key event to the next view on the focus path.
android.webkit.WebView,void documentHasImages(Message response), Queries the document to see if it contains any image references.
android.webkit.WebView,static void enableSlowWholeDocumentDraw()," For apps targeting the L release, WebView has a new default behavior that reduces memory footprint and increases performance by intelligently choosing the portion of the HTML document that needs to be drawn."
android.webkit.WebView,"void evaluateJavascript(String script, ValueCallback<String> resultCallback)", Asynchronously evaluates JavaScript in the context of the currently displayed page.
android.webkit.WebView,static String findAddress(String addr), Gets the first substring consisting of the address of a physical location.
android.webkit.WebView,int findAll(String find), This method was deprecated in API level 16. findAllAsync(String) is preferred.
android.webkit.WebView,void findAllAsync(String find)," Finds all instances of find on the page and highlights them, asynchronously."
android.webkit.WebView,View findFocus(), Find the view in the hierarchy rooted at this view that currently has focus.
android.webkit.WebView,void findNext(boolean forward)," Highlights and scrolls to the next match found by findAllAsync(String), wrapping around page boundaries as necessary."
android.webkit.WebView,"void flingScroll(int vx, int vy)",
android.webkit.WebView,void freeMemory()," This method was deprecated in API level 19. Memory caches are automatically dropped when no longer needed, and in response to system memory pressure."
android.webkit.WebView,CharSequence getAccessibilityClassName(), Return the class name of this object to be used for accessibility purposes.
android.webkit.WebView,AccessibilityNodeProvider getAccessibilityNodeProvider(), Gets the provider for managing a virtual view hierarchy rooted at this View and reported to AccessibilityServices that explore the window content.
android.webkit.WebView,SslCertificate getCertificate(), Gets the SSL certificate for the main top-level page or null if there is no certificate (the site is not secure).
android.webkit.WebView,int getContentHeight(), Gets the height of the HTML content.
android.webkit.WebView,static PackageInfo getCurrentWebViewPackage(), If WebView has already been loaded into the current process this method will return the package that was used to load it.
android.webkit.WebView,Bitmap getFavicon(), Gets the favicon for the current page.
android.webkit.WebView,Handler getHandler(),
android.webkit.WebView,WebView.HitTestResult getHitTestResult(), Gets a HitTestResult based on the current cursor node.
android.webkit.WebView,"String[] getHttpAuthUsernamePassword(String host, String realm)"," This method was deprecated in API level 26. Use getHttpAuthUsernamePassword(String, String) instead"
android.webkit.WebView,Looper getLooper(), Returns the Looper corresponding to the thread on which WebView calls must be made.
android.webkit.WebView,String getOriginalUrl(), Gets the original URL for the current page.
android.webkit.WebView,int getProgress(), Gets the progress for the current page.
android.webkit.WebView,boolean getRendererPriorityWaivedWhenNotVisible(), Return whether this WebView requests a priority of RENDERER_PRIORITY_WAIVED when not visible.
android.webkit.WebView,int getRendererRequestedPriority(), Get the requested renderer priority for this WebView.
android.webkit.WebView,static Uri getSafeBrowsingPrivacyPolicyUrl(), Returns a URL pointing to the privacy policy for Safe Browsing reporting.
android.webkit.WebView,float getScale()," This method was deprecated in API level 17. This method is prone to inaccuracy due to race conditions between the web rendering and UI threads; prefer onScaleChanged(WebView, float, float)."
android.webkit.WebView,WebSettings getSettings(), Gets the WebSettings object used to control the settings for this WebView.
android.webkit.WebView,TextClassifier getTextClassifier(), Returns the TextClassifier used by this WebView.
android.webkit.WebView,String getTitle(), Gets the title for the current page.
android.webkit.WebView,String getUrl(), Gets the URL for the current page.
android.webkit.WebView,WebChromeClient getWebChromeClient(), Gets the chrome handler.
android.webkit.WebView,static ClassLoader getWebViewClassLoader(), Returns the ClassLoader used to load internal WebView classes.
android.webkit.WebView,WebViewClient getWebViewClient(), Gets the WebViewClient.
android.webkit.WebView,void goBack(), Goes back in the history of this WebView.
android.webkit.WebView,void goBackOrForward(int steps), Goes to the history item that is the number of steps away from the current item.
android.webkit.WebView,void goForward(), Goes forward in the history of this WebView.
android.webkit.WebView,void invokeZoomPicker(), Invokes the graphical zoom picker widget for this WebView.
android.webkit.WebView,boolean isPrivateBrowsingEnabled(), Gets whether private browsing is enabled in this WebView.
android.webkit.WebView,"void loadData(String data, String mimeType, String encoding)", Loads the given data into this WebView using a 'data' scheme URL.
android.webkit.WebView,"void loadDataWithBaseURL(String baseUrl, String data, String mimeType, String encoding, String historyUrl)"," Loads the given data into this WebView, using baseUrl as the base URL for the content."
android.webkit.WebView,void loadUrl(String url), Loads the given URL.
android.webkit.WebView,"void loadUrl(String url, Map<String,String> additionalHttpHeaders)", Loads the given URL with the specified additional HTTP headers.
android.webkit.WebView,"void onChildViewAdded(View parent, View child)", This method was deprecated in API level 8. WebView no longer needs to implement ViewGroup.OnHierarchyChangeListener. This method does nothing now.
android.webkit.WebView,"void onChildViewRemoved(View p, View child)", This method was deprecated in API level 8. WebView no longer needs to implement ViewGroup.OnHierarchyChangeListener. This method does nothing now.
android.webkit.WebView,InputConnection onCreateInputConnection(EditorInfo outAttrs), Creates a new InputConnection for an InputMethod to interact with the WebView.
android.webkit.WebView,boolean onDragEvent(DragEvent event), Handles drag events sent by the system following a call to startDragAndDrop().
android.webkit.WebView,void onFinishTemporaryDetach(), Called after onStartTemporaryDetach() when the container is done changing the view.
android.webkit.WebView,boolean onGenericMotionEvent(MotionEvent event), Implement this method to handle generic motion events.
android.webkit.WebView,"void onGlobalFocusChanged(View oldFocus, View newFocus)", This method was deprecated in API level 3. WebView should not have implemented ViewTreeObserver.OnGlobalFocusChangeListener. This method does nothing now.
android.webkit.WebView,boolean onHoverEvent(MotionEvent event), Implement this method to handle hover events.
android.webkit.WebView,"boolean onKeyDown(int keyCode, KeyEvent event)"," Default implementation of KeyEvent.Callback.onKeyDown(): perform press of the view when KEYCODE_DPAD_CENTER or KEYCODE_ENTER is released, if the view is enabled and clickable."
android.webkit.WebView,"boolean onKeyMultiple(int keyCode, int repeatCount, KeyEvent event)", Default implementation of KeyEvent.Callback.onKeyMultiple(): always returns false (doesn't handle the event).
android.webkit.WebView,"boolean onKeyUp(int keyCode, KeyEvent event)"," Default implementation of KeyEvent.Callback.onKeyUp(): perform clicking of the view when KEYCODE_DPAD_CENTER, KEYCODE_ENTER or KEYCODE_SPACE is released."
android.webkit.WebView,void onPause()," Does a best-effort attempt to pause any processing that can be paused safely, such as animations and geolocation."
android.webkit.WebView,"void onProvideAutofillVirtualStructure(ViewStructure structure, int flags)"," Populates a ViewStructure containing virtual children to fullfil an autofill request. The ViewStructure traditionally represents a View, while for web pages it represent HTML nodes."
android.webkit.WebView,void onProvideVirtualStructure(ViewStructure structure), Called when assist structure is being retrieved from a view as part of Activity.onProvideAssistData to generate additional virtual structure under this view.
android.webkit.WebView,void onResume(), Resumes a WebView after a previous call to onPause().
android.webkit.WebView,void onStartTemporaryDetach()," This is called when a container is going to temporarily detach a child, with ViewGroup.detachViewFromParent."
android.webkit.WebView,boolean onTouchEvent(MotionEvent event), Implement this method to handle touch screen motion events.
android.webkit.WebView,boolean onTrackballEvent(MotionEvent event), Implement this method to handle trackball motion events.
android.webkit.WebView,void onWindowFocusChanged(boolean hasWindowFocus), Called when the window containing this view gains or loses focus.
android.webkit.WebView,boolean overlayHorizontalScrollbar(), This method was deprecated in API level 23. This method is now obsolete.
android.webkit.WebView,boolean overlayVerticalScrollbar(), This method was deprecated in API level 23. This method is now obsolete.
android.webkit.WebView,boolean pageDown(boolean bottom), Scrolls the contents of this WebView down by half the page size.
android.webkit.WebView,boolean pageUp(boolean top), Scrolls the contents of this WebView up by half the view size.
android.webkit.WebView,void pauseTimers()," Pauses all layout, parsing, and JavaScript timers for all WebViews."
android.webkit.WebView,boolean performLongClick()," Calls this view's OnLongClickListener, if it is defined."
android.webkit.WebView,"void postUrl(String url, byte[] postData)"," Loads the URL with postData using ""POST"" method into this WebView."
android.webkit.WebView,"void postVisualStateCallback(long requestId, WebView.VisualStateCallback callback)"," Posts a WebView.VisualStateCallback, which will be called when the current state of the WebView is ready to be drawn."
android.webkit.WebView,"void postWebMessage(WebMessage message, Uri targetOrigin)", Post a message to main frame.
android.webkit.WebView,void reload(), Reloads the current URL.
android.webkit.WebView,void removeJavascriptInterface(String name), Removes a previously injected Java object from this WebView.
android.webkit.WebView,"boolean requestChildRectangleOnScreen(View child, Rect rect, boolean immediate)", Called when a child of this group wants a particular rectangle to be positioned onto the screen.
android.webkit.WebView,"boolean requestFocus(int direction, Rect previouslyFocusedRect)", Call this to try to give focus to a specific view or to one of its descendants and give it hints about the direction and a specific rectangle that the focus is coming from. Looks for a view to give focus to respecting the setting specified by getDescendantFocusability().
android.webkit.WebView,void requestFocusNodeHref(Message hrefMsg), Requests the anchor or image element URL at the last tapped point.
android.webkit.WebView,void requestImageRef(Message msg), Requests the URL of the image last touched by the user.
android.webkit.WebView,WebBackForwardList restoreState(Bundle inState), Restores the state of this WebView from the given Bundle.
android.webkit.WebView,void resumeTimers()," Resumes all layout, parsing, and JavaScript timers for all WebViews."
android.webkit.WebView,"void savePassword(String host, String username, String password)", This method was deprecated in API level 18. Saving passwords in WebView will not be supported in future versions.
android.webkit.WebView,WebBackForwardList saveState(Bundle outState), Saves the state of this WebView used in onSaveInstanceState(Bundle).
android.webkit.WebView,void saveWebArchive(String filename), Saves the current view as a web archive.
android.webkit.WebView,"void saveWebArchive(String basename, boolean autoname, ValueCallback<String> callback)", Saves the current view as a web archive.
android.webkit.WebView,void setBackgroundColor(int color), Sets the background color for this view.
android.webkit.WebView,void setCertificate(SslCertificate certificate)," This method was deprecated in API level 17. Calling this function has no useful effect, and will be ignored in future releases."
android.webkit.WebView,static void setDataDirectorySuffix(String suffix), Define the directory used to store WebView data for the current process.
android.webkit.WebView,void setDownloadListener(DownloadListener listener)," Registers the interface to be used when content can not be handled by the rendering engine, and should be downloaded instead."
android.webkit.WebView,void setFindListener(WebView.FindListener listener), Registers the listener to be notified as find-on-page operations progress.
android.webkit.WebView,void setHorizontalScrollbarOverlay(boolean overlay), This method was deprecated in API level 23. This method has no effect.
android.webkit.WebView,"void setHttpAuthUsernamePassword(String host, String realm, String username, String password)"," This method was deprecated in API level 26. Use setHttpAuthUsernamePassword(String, String, String, String) instead"
android.webkit.WebView,void setInitialScale(int scaleInPercent), Sets the initial scale for this WebView.
android.webkit.WebView,"void setLayerType(int layerType, Paint paint)", Specifies the type of layer backing this view.
android.webkit.WebView,void setLayoutParams(ViewGroup.LayoutParams params), Set the layout parameters associated with this view.
android.webkit.WebView,void setMapTrackballToArrowKeys(boolean setMap)," This method was deprecated in API level 17. Only the default case, true, will be supported in a future version."
android.webkit.WebView,void setNetworkAvailable(boolean networkUp), Informs WebView of the network state.
android.webkit.WebView,void setOverScrollMode(int mode), Set the over-scroll mode for this view.
android.webkit.WebView,void setPictureListener(WebView.PictureListener listener), This method was deprecated in API level 12. This method is now obsolete.
android.webkit.WebView,"void setRendererPriorityPolicy(int rendererRequestedPriority, boolean waivedWhenNotVisible)", Set the renderer priority policy for this WebView.
android.webkit.WebView,"static void setSafeBrowsingWhitelist(List<String> urls, ValueCallback<Boolean> callback)", Sets the list of domains that are exempt from SafeBrowsing checks.
android.webkit.WebView,void setScrollBarStyle(int style), Specify the style of the scrollbars.
android.webkit.WebView,void setTextClassifier(TextClassifier textClassifier), Sets the TextClassifier for this WebView.
android.webkit.WebView,void setVerticalScrollbarOverlay(boolean overlay), This method was deprecated in API level 23. This method has no effect.
android.webkit.WebView,void setWebChromeClient(WebChromeClient client), Sets the chrome handler.
android.webkit.WebView,static void setWebContentsDebuggingEnabled(boolean enabled), Enables debugging of web contents (HTML / CSS / JavaScript) loaded into any WebViews of this application.
android.webkit.WebView,void setWebViewClient(WebViewClient client), Sets the WebViewClient that will receive various notifications and requests.
android.webkit.WebView,boolean shouldDelayChildPressedState(), Return true if the pressed state should be delayed for children or descendants of this ViewGroup.
android.webkit.WebView,"boolean showFindDialog(String text, boolean showIme)", This method was deprecated in API level 18. This method does not work reliably on all Android versions; implementing a custom find dialog using WebView.findAllAsync() provides a more robust solution.
android.webkit.WebView,"static void startSafeBrowsing(Context context, ValueCallback<Boolean> callback)", Starts Safe Browsing initialization.
android.webkit.WebView,void stopLoading(), Stops the current load.
android.webkit.WebView,void zoomBy(float zoomFactor), Performs a zoom operation in this WebView.
android.webkit.WebView,boolean zoomIn(), Performs zoom in in this WebView.
android.webkit.WebView,boolean zoomOut(), Performs zoom out in this WebView.
android.webkit.WebView.VisualStateCallback,abstract void onComplete(long requestId), Invoked when the visual state is ready to be drawn in the next onDraw(Canvas).
android.webkit.WebView.WebViewTransport,WebView getWebView(), Gets the WebView object.
android.webkit.WebView.WebViewTransport,void setWebView(WebView webview), Sets the WebView to the transportation object.
android.webkit.WebViewClient,"void doUpdateVisitedHistory(WebView view, String url, boolean isReload)", Notify the host application to update its visited links database.
android.webkit.WebViewClient,"void onFormResubmission(WebView view, Message dontResend, Message resend)", As the host application if the browser should resend data as the requested page was a result of a POST.
android.webkit.WebViewClient,"void onLoadResource(WebView view, String url)", Notify the host application that the WebView will load the resource specified by the given url.
android.webkit.WebViewClient,"void onPageCommitVisible(WebView view, String url)", Notify the host application that WebView content left over from previous page navigations will no longer be drawn.
android.webkit.WebViewClient,"void onPageFinished(WebView view, String url)", Notify the host application that a page has finished loading.
android.webkit.WebViewClient,"void onPageStarted(WebView view, String url, Bitmap favicon)", Notify the host application that a page has started loading.
android.webkit.WebViewClient,"void onReceivedClientCertRequest(WebView view, ClientCertRequest request)", Notify the host application to handle a SSL client certificate request.
android.webkit.WebViewClient,"void onReceivedError(WebView view, int errorCode, String description, String failingUrl)"," This method was deprecated in API level 23. Use onReceivedError(WebView, WebResourceRequest, WebResourceError) instead."
android.webkit.WebViewClient,"void onReceivedError(WebView view, WebResourceRequest request, WebResourceError error)", Report web resource loading error to the host application.
android.webkit.WebViewClient,"void onReceivedHttpAuthRequest(WebView view, HttpAuthHandler handler, String host, String realm)", Notifies the host application that the WebView received an HTTP authentication request.
android.webkit.WebViewClient,"void onReceivedHttpError(WebView view, WebResourceRequest request, WebResourceResponse errorResponse)", Notify the host application that an HTTP error has been received from the server while loading a resource.
android.webkit.WebViewClient,"void onReceivedLoginRequest(WebView view, String realm, String account, String args)", Notify the host application that a request to automatically log in the user has been processed.
android.webkit.WebViewClient,"void onReceivedSslError(WebView view, SslErrorHandler handler, SslError error)", Notify the host application that an SSL error occurred while loading a resource.
android.webkit.WebViewClient,"boolean onRenderProcessGone(WebView view, RenderProcessGoneDetail detail)", Notify host application that the given WebView's render process has exited.
android.webkit.WebViewClient,"void onSafeBrowsingHit(WebView view, WebResourceRequest request, int threatType, SafeBrowsingResponse callback)", Notify the host application that a loading URL has been flagged by Safe Browsing.
android.webkit.WebViewClient,"void onScaleChanged(WebView view, float oldScale, float newScale)", Notify the host application that the scale applied to the WebView has changed.
android.webkit.WebViewClient,"void onTooManyRedirects(WebView view, Message cancelMsg, Message continueMsg)"," This method was deprecated in API level 8. This method is no longer called. When the WebView encounters a redirect loop, it will cancel the load."
android.webkit.WebViewClient,"void onUnhandledKeyEvent(WebView view, KeyEvent event)", Notify the host application that a key was not handled by the WebView.
android.webkit.WebViewClient,"WebResourceResponse shouldInterceptRequest(WebView view, WebResourceRequest request)", Notify the host application of a resource request and allow the application to return the data.
android.webkit.WebViewClient,"WebResourceResponse shouldInterceptRequest(WebView view, String url)"," This method was deprecated in API level 21. Use shouldInterceptRequest(WebView, WebResourceRequest) instead."
android.webkit.WebViewClient,"boolean shouldOverrideKeyEvent(WebView view, KeyEvent event)", Give the host application a chance to handle the key event synchronously.
android.webkit.WebViewClient,"boolean shouldOverrideUrlLoading(WebView view, WebResourceRequest request)", Give the host application a chance to take over the control when a new url is about to be loaded in the current WebView.
android.webkit.WebViewClient,"boolean shouldOverrideUrlLoading(WebView view, String url)"," This method was deprecated in API level 24. Use shouldOverrideUrlLoading(WebView, WebResourceRequest) instead."
android.webkit.WebViewDatabase,abstract void clearFormData(), Clears any saved data for web forms.
android.webkit.WebViewDatabase,abstract void clearHttpAuthUsernamePassword(), Clears any saved credentials for HTTP authentication.
android.webkit.WebViewDatabase,abstract void clearUsernamePassword(), This method was deprecated in API level 18. Saving passwords in WebView will not be supported in future versions.
android.webkit.WebViewDatabase,"abstract String[] getHttpAuthUsernamePassword(String host, String realm)", Retrieves HTTP authentication credentials for a given host and realm from the WebViewDatabase instance.
android.webkit.WebViewDatabase,static WebViewDatabase getInstance(Context context),
android.webkit.WebViewDatabase,abstract boolean hasFormData(), Gets whether there is any saved data for web forms.
android.webkit.WebViewDatabase,abstract boolean hasHttpAuthUsernamePassword(), Gets whether there are any saved credentials for HTTP authentication.
android.webkit.WebViewDatabase,abstract boolean hasUsernamePassword(), This method was deprecated in API level 18. Saving passwords in WebView will not be supported in future versions.
android.webkit.WebViewDatabase,"abstract void setHttpAuthUsernamePassword(String host, String realm, String username, String password)", Stores HTTP authentication credentials for a given host and realm to the WebViewDatabase instance.
android.webkit.WebViewFragment,WebView getWebView(), Gets the WebView.
android.webkit.WebViewFragment,"View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState)", Called to instantiate the view.
android.webkit.WebViewFragment,void onDestroy(), Called when the fragment is no longer in use.
android.webkit.WebViewFragment,void onDestroyView(), Called when the WebView has been detached from the fragment.
android.webkit.WebViewFragment,void onPause(), Called when the fragment is visible to the user and actively running.
android.webkit.WebViewFragment,void onResume(), Called when the fragment is no longer resumed.
